
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 28 23:05:35 CST 2021
//----------------------------------------------------

package codigoj;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 28 23:05:35 CST 2021
  */
public class SintacticoJ extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoJ() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoJ(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoJ(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\011\000\002\002" +
    "\012\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\014\000\002\004\014\000" +
    "\002\004\005\000\002\004\005\000\002\004\007\000\002" +
    "\004\007\000\002\004\006\000\002\004\006\000\002\004" +
    "\010\000\002\004\010\000\002\004\011\000\002\004\014" +
    "\000\002\004\007\000\002\004\007\000\002\004\006\000" +
    "\002\004\006\000\002\004\010\000\002\004\010\000\002" +
    "\004\011\000\002\004\011\000\002\004\013\000\002\006" +
    "\011\000\002\012\003\000\002\012\010\000\002\012\005" +
    "\000\002\012\005\000\002\012\006\000\002\012\007\000" +
    "\002\007\015\000\002\010\011\000\002\011\011\000\002" +
    "\013\012\000\002\013\011\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\015\005\000\002\016\005" +
    "\000\002\020\005\000\002\017\005\000\002\021\006\000" +
    "\002\022\010\000\002\022\005\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\014\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\006\006\005\053\004\001\002\000\004\102" +
    "\320\001\002\000\004\102\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\072\011\001" +
    "\002\000\004\073\012\001\002\000\004\074\013\001\002" +
    "\000\034\013\040\022\037\032\042\033\015\034\014\035" +
    "\036\047\021\050\044\054\041\072\020\102\032\113\033" +
    "\115\025\001\002\000\004\072\315\001\002\000\004\072" +
    "\262\001\002\000\026\013\ufff4\022\ufff4\030\ufff4\032\ufff4" +
    "\033\ufff4\047\ufff4\050\ufff4\063\260\075\ufff4\102\ufff4\001" +
    "\002\000\024\013\ufff0\022\ufff0\030\ufff0\032\ufff0\033\ufff0" +
    "\047\ufff0\050\ufff0\075\ufff0\102\ufff0\001\002\000\014\035" +
    "\036\072\020\102\211\113\033\115\025\001\002\000\006" +
    "\070\222\102\223\001\002\000\024\013\ufff7\022\ufff7\030" +
    "\ufff7\032\ufff7\033\ufff7\047\ufff7\050\ufff7\075\ufff7\102\ufff7" +
    "\001\002\000\026\013\ufff3\022\ufff3\030\ufff3\032\ufff3\033" +
    "\ufff3\047\ufff3\050\ufff3\064\220\075\ufff3\102\ufff3\001\002" +
    "\000\026\013\ufff2\022\ufff2\030\ufff2\032\ufff2\033\ufff2\047" +
    "\ufff2\050\ufff2\061\216\075\ufff2\102\ufff2\001\002\000\030" +
    "\013\uffc1\022\uffc1\030\uffc1\032\uffc1\033\uffc1\047\uffc1\050" +
    "\uffc1\073\uffc1\075\uffc1\100\uffc1\102\uffc1\001\002\000\024" +
    "\013\ufffd\022\ufffd\030\ufffd\032\ufffd\033\ufffd\047\ufffd\050" +
    "\ufffd\075\ufffd\102\ufffd\001\002\000\022\013\040\022\037" +
    "\032\042\033\015\047\021\050\044\075\215\102\146\001" +
    "\002\000\024\013\uffef\022\uffef\030\uffef\032\uffef\033\uffef" +
    "\047\uffef\050\uffef\075\uffef\102\uffef\001\002\000\024\013" +
    "\uffee\022\uffee\030\uffee\032\uffee\033\uffee\047\uffee\050\uffee" +
    "\075\uffee\102\uffee\001\002\000\026\013\uffc0\022\uffc0\030" +
    "\uffc0\032\uffc0\033\uffc0\047\uffc0\050\uffc0\061\147\075\uffc0" +
    "\102\uffc0\001\002\000\030\013\uffc2\022\uffc2\030\uffc2\032" +
    "\uffc2\033\uffc2\047\uffc2\050\uffc2\073\uffc2\075\uffc2\100\uffc2" +
    "\102\uffc2\001\002\000\024\013\ufffb\022\ufffb\030\ufffb\032" +
    "\ufffb\033\ufffb\047\ufffb\050\ufffb\075\ufffb\102\ufffb\001\002" +
    "\000\024\013\ufff9\022\ufff9\030\ufff9\032\ufff9\033\ufff9\047" +
    "\ufff9\050\ufff9\075\ufff9\102\ufff9\001\002\000\004\072\207" +
    "\001\002\000\004\072\175\001\002\000\004\102\173\001" +
    "\002\000\004\072\160\001\002\000\004\072\115\001\002" +
    "\000\024\013\ufff5\022\ufff5\030\ufff5\032\ufff5\033\ufff5\047" +
    "\ufff5\050\ufff5\075\ufff5\102\ufff5\001\002\000\006\070\050" +
    "\102\051\001\002\000\026\013\ufff1\022\ufff1\030\ufff1\032" +
    "\ufff1\033\ufff1\047\ufff1\050\ufff1\062\046\075\ufff1\102\ufff1" +
    "\001\002\000\002\001\002\000\026\013\uffc8\022\uffc8\030" +
    "\uffc8\032\uffc8\033\uffc8\047\uffc8\050\uffc8\062\uffc8\075\uffc8" +
    "\102\uffc8\001\002\000\004\102\113\001\002\000\010\060" +
    "\053\067\054\070\052\001\002\000\004\100\112\001\002" +
    "\000\012\005\066\044\070\076\067\103\065\001\002\000" +
    "\006\005\056\103\055\001\002\000\004\100\064\001\002" +
    "\000\006\005\057\102\060\001\002\000\004\100\063\001" +
    "\002\000\004\005\061\001\002\000\004\100\062\001\002" +
    "\000\024\013\uffdb\022\uffdb\030\uffdb\032\uffdb\033\uffdb\047" +
    "\uffdb\050\uffdb\075\uffdb\102\uffdb\001\002\000\024\013\uffdd" +
    "\022\uffdd\030\uffdd\032\uffdd\033\uffdd\047\uffdd\050\uffdd\075" +
    "\uffdd\102\uffdd\001\002\000\024\013\uffe1\022\uffe1\030\uffe1" +
    "\032\uffe1\033\uffe1\047\uffe1\050\uffe1\075\uffe1\102\uffe1\001" +
    "\002\000\004\100\111\001\002\000\006\005\104\102\105" +
    "\001\002\000\004\005\077\001\002\000\004\072\071\001" +
    "\002\000\004\005\072\001\002\000\004\102\073\001\002" +
    "\000\004\005\074\001\002\000\004\073\075\001\002\000" +
    "\004\100\076\001\002\000\024\013\uffed\022\uffed\030\uffed" +
    "\032\uffed\033\uffed\047\uffed\050\uffed\075\uffed\102\uffed\001" +
    "\002\000\004\102\100\001\002\000\004\005\101\001\002" +
    "\000\004\077\102\001\002\000\004\100\103\001\002\000" +
    "\024\013\uffd9\022\uffd9\030\uffd9\032\uffd9\033\uffd9\047\uffd9" +
    "\050\uffd9\075\uffd9\102\uffd9\001\002\000\004\100\110\001" +
    "\002\000\004\005\106\001\002\000\004\100\107\001\002" +
    "\000\024\013\uffda\022\uffda\030\uffda\032\uffda\033\uffda\047" +
    "\uffda\050\uffda\075\uffda\102\uffda\001\002\000\024\013\uffdc" +
    "\022\uffdc\030\uffdc\032\uffdc\033\uffdc\047\uffdc\050\uffdc\075" +
    "\uffdc\102\uffdc\001\002\000\024\013\uffe0\022\uffe0\030\uffe0" +
    "\032\uffe0\033\uffe0\047\uffe0\050\uffe0\075\uffe0\102\uffe0\001" +
    "\002\000\024\013\uffdf\022\uffdf\030\uffdf\032\uffdf\033\uffdf" +
    "\047\uffdf\050\uffdf\075\uffdf\102\uffdf\001\002\000\004\100" +
    "\114\001\002\000\024\013\uffde\022\uffde\030\uffde\032\uffde" +
    "\033\uffde\047\uffde\050\uffde\075\uffde\102\uffde\001\002\000" +
    "\006\071\117\102\120\001\002\000\004\073\135\001\002" +
    "\000\006\073\uffd7\100\uffd7\001\002\000\006\066\121\072" +
    "\122\001\002\000\010\005\130\102\131\103\127\001\002" +
    "\000\004\073\123\001\002\000\004\102\124\001\002\000" +
    "\004\066\125\001\002\000\004\071\126\001\002\000\006" +
    "\073\uffd6\100\uffd6\001\002\000\006\073\uffd5\100\uffd5\001" +
    "\002\000\006\005\132\102\133\001\002\000\006\073\uffd4" +
    "\100\uffd4\001\002\000\006\073\uffd3\100\uffd3\001\002\000" +
    "\004\005\134\001\002\000\006\073\uffd2\100\uffd2\001\002" +
    "\000\004\074\136\001\002\000\034\013\040\022\037\032" +
    "\042\033\015\034\014\035\036\047\021\050\044\054\041" +
    "\072\020\102\032\113\033\115\025\001\002\000\022\013" +
    "\040\022\037\032\042\033\015\047\021\050\044\075\143" +
    "\102\146\001\002\000\024\013\ufff8\022\ufff8\030\ufff8\032" +
    "\ufff8\033\ufff8\047\ufff8\050\ufff8\075\ufff8\102\ufff8\001\002" +
    "\000\024\013\ufff6\022\ufff6\030\ufff6\032\ufff6\033\ufff6\047" +
    "\ufff6\050\ufff6\075\ufff6\102\ufff6\001\002\000\024\013\ufffe" +
    "\022\ufffe\030\ufffe\032\ufffe\033\ufffe\047\ufffe\050\ufffe\075" +
    "\ufffe\102\ufffe\001\002\000\024\013\uffd0\022\uffd0\030\uffd0" +
    "\032\uffd0\033\uffd0\047\uffd0\050\uffd0\075\uffd0\102\uffd0\001" +
    "\002\000\024\013\ufffa\022\ufffa\030\ufffa\032\ufffa\033\ufffa" +
    "\047\ufffa\050\ufffa\075\ufffa\102\ufffa\001\002\000\024\013" +
    "\ufffc\022\ufffc\030\ufffc\032\ufffc\033\ufffc\047\ufffc\050\ufffc" +
    "\075\ufffc\102\ufffc\001\002\000\004\061\147\001\002\000" +
    "\004\060\150\001\002\000\004\111\151\001\002\000\004" +
    "\076\152\001\002\000\004\102\153\001\002\000\004\077" +
    "\154\001\002\000\004\061\155\001\002\000\004\102\156" +
    "\001\002\000\004\100\157\001\002\000\024\013\uffec\022" +
    "\uffec\030\uffec\032\uffec\033\uffec\047\uffec\050\uffec\075\uffec" +
    "\102\uffec\001\002\000\004\102\161\001\002\000\004\073" +
    "\162\001\002\000\004\074\163\001\002\000\004\027\164" +
    "\001\002\000\004\102\165\001\002\000\004\100\166\001" +
    "\002\000\034\013\040\022\037\032\042\033\015\034\014" +
    "\035\036\047\021\050\044\054\041\072\020\102\032\113" +
    "\033\115\025\001\002\000\022\013\040\022\037\030\170" +
    "\032\042\033\015\047\021\050\044\102\146\001\002\000" +
    "\004\100\171\001\002\000\004\075\172\001\002\000\024" +
    "\013\uffbf\022\uffbf\030\uffbf\032\uffbf\033\uffbf\047\uffbf\050" +
    "\uffbf\075\uffbf\102\uffbf\001\002\000\004\100\174\001\002" +
    "\000\024\013\uffeb\022\uffeb\030\uffeb\032\uffeb\033\uffeb\047" +
    "\uffeb\050\uffeb\075\uffeb\102\uffeb\001\002\000\006\071\117" +
    "\102\120\001\002\000\004\073\177\001\002\000\004\074" +
    "\200\001\002\000\034\013\040\022\037\032\042\033\015" +
    "\034\014\035\036\047\021\050\044\054\041\072\020\102" +
    "\032\113\033\115\025\001\002\000\022\013\040\022\037" +
    "\032\042\033\015\047\021\050\044\075\202\102\146\001" +
    "\002\000\026\013\uffd8\022\uffd8\023\203\030\uffd8\032\uffd8" +
    "\033\uffd8\047\uffd8\050\uffd8\075\uffd8\102\uffd8\001\002\000" +
    "\004\074\204\001\002\000\034\013\040\022\037\032\042" +
    "\033\015\034\014\035\036\047\021\050\044\054\041\072" +
    "\020\102\032\113\033\115\025\001\002\000\022\013\040" +
    "\022\037\032\042\033\015\047\021\050\044\075\206\102" +
    "\146\001\002\000\024\013\uffd1\022\uffd1\030\uffd1\032\uffd1" +
    "\033\uffd1\047\uffd1\050\uffd1\075\uffd1\102\uffd1\001\002\000" +
    "\014\035\036\072\020\102\211\113\033\115\025\001\002" +
    "\000\004\100\212\001\002\000\006\073\uffc0\100\uffc0\001" +
    "\002\000\014\035\036\072\020\102\211\113\033\115\025" +
    "\001\002\000\004\073\214\001\002\000\030\013\uffc4\022" +
    "\uffc4\030\uffc4\032\uffc4\033\uffc4\047\uffc4\050\uffc4\073\uffc4" +
    "\075\uffc4\100\uffc4\102\uffc4\001\002\000\004\002\000\001" +
    "\002\000\002\001\002\000\026\013\uffc9\022\uffc9\030\uffc9" +
    "\032\uffc9\033\uffc9\047\uffc9\050\uffc9\061\uffc9\075\uffc9\102" +
    "\uffc9\001\002\000\002\001\002\000\026\013\uffc7\022\uffc7" +
    "\030\uffc7\032\uffc7\033\uffc7\047\uffc7\050\uffc7\064\uffc7\075" +
    "\uffc7\102\uffc7\001\002\000\004\102\254\001\002\000\012" +
    "\060\226\067\227\070\225\100\224\001\002\000\024\013" +
    "\uffea\022\uffea\030\uffea\032\uffea\033\uffea\047\uffea\050\uffea" +
    "\075\uffea\102\uffea\001\002\000\004\100\253\001\002\000" +
    "\006\005\241\103\240\001\002\000\006\005\231\103\230" +
    "\001\002\000\004\100\237\001\002\000\006\005\232\102" +
    "\233\001\002\000\004\100\236\001\002\000\004\005\234" +
    "\001\002\000\004\100\235\001\002\000\024\013\uffe3\022" +
    "\uffe3\030\uffe3\032\uffe3\033\uffe3\047\uffe3\050\uffe3\075\uffe3" +
    "\102\uffe3\001\002\000\024\013\uffe5\022\uffe5\030\uffe5\032" +
    "\uffe5\033\uffe5\047\uffe5\050\uffe5\075\uffe5\102\uffe5\001\002" +
    "\000\024\013\uffe9\022\uffe9\030\uffe9\032\uffe9\033\uffe9\047" +
    "\uffe9\050\uffe9\075\uffe9\102\uffe9\001\002\000\004\100\252" +
    "\001\002\000\006\005\242\102\243\001\002\000\004\100" +
    "\251\001\002\000\004\005\244\001\002\000\004\100\245" +
    "\001\002\000\004\050\246\001\002\000\004\102\247\001" +
    "\002\000\004\100\250\001\002\000\024\013\uffe2\022\uffe2" +
    "\030\uffe2\032\uffe2\033\uffe2\047\uffe2\050\uffe2\075\uffe2\102" +
    "\uffe2\001\002\000\024\013\uffe4\022\uffe4\030\uffe4\032\uffe4" +
    "\033\uffe4\047\uffe4\050\uffe4\075\uffe4\102\uffe4\001\002\000" +
    "\024\013\uffe8\022\uffe8\030\uffe8\032\uffe8\033\uffe8\047\uffe8" +
    "\050\uffe8\075\uffe8\102\uffe8\001\002\000\024\013\uffe7\022" +
    "\uffe7\030\uffe7\032\uffe7\033\uffe7\047\uffe7\050\uffe7\075\uffe7" +
    "\102\uffe7\001\002\000\004\100\255\001\002\000\024\013" +
    "\uffe6\022\uffe6\030\uffe6\032\uffe6\033\uffe6\047\uffe6\050\uffe6" +
    "\075\uffe6\102\uffe6\001\002\000\004\073\257\001\002\000" +
    "\030\013\uffc3\022\uffc3\030\uffc3\032\uffc3\033\uffc3\047\uffc3" +
    "\050\uffc3\073\uffc3\075\uffc3\100\uffc3\102\uffc3\001\002\000" +
    "\002\001\002\000\026\013\uffc6\022\uffc6\030\uffc6\032\uffc6" +
    "\033\uffc6\047\uffc6\050\uffc6\063\uffc6\075\uffc6\102\uffc6\001" +
    "\002\000\006\102\264\113\265\001\002\000\004\073\311" +
    "\001\002\000\004\060\303\001\002\000\004\102\266\001" +
    "\002\000\004\060\267\001\002\000\004\103\270\001\002" +
    "\000\004\100\271\001\002\000\006\071\117\102\120\001" +
    "\002\000\004\100\273\001\002\000\006\070\275\102\276" +
    "\001\002\000\004\073\uffce\001\002\000\004\102\302\001" +
    "\002\000\006\067\300\070\277\001\002\000\004\073\uffcb" +
    "\001\002\000\004\103\301\001\002\000\004\073\uffcc\001" +
    "\002\000\004\073\uffca\001\002\000\004\103\304\001\002" +
    "\000\004\100\305\001\002\000\006\071\117\102\120\001" +
    "\002\000\004\100\307\001\002\000\006\070\275\102\276" +
    "\001\002\000\004\073\uffcd\001\002\000\004\074\312\001" +
    "\002\000\034\013\040\022\037\032\042\033\015\034\014" +
    "\035\036\047\021\050\044\054\041\072\020\102\032\113" +
    "\033\115\025\001\002\000\022\013\040\022\037\032\042" +
    "\033\015\047\021\050\044\075\314\102\146\001\002\000" +
    "\024\013\uffcf\022\uffcf\030\uffcf\032\uffcf\033\uffcf\047\uffcf" +
    "\050\uffcf\075\uffcf\102\uffcf\001\002\000\004\034\014\001" +
    "\002\000\004\073\317\001\002\000\026\013\uffc5\022\uffc5" +
    "\030\uffc5\032\uffc5\033\uffc5\047\uffc5\050\uffc5\073\uffc5\075" +
    "\uffc5\102\uffc5\001\002\000\004\072\321\001\002\000\004" +
    "\102\322\001\002\000\004\073\323\001\002\000\004\074" +
    "\324\001\002\000\034\013\040\022\037\032\042\033\015" +
    "\034\014\035\036\047\021\050\044\054\041\072\020\102" +
    "\032\113\033\115\025\001\002\000\022\013\040\022\037" +
    "\032\042\033\015\047\021\050\044\075\326\102\146\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\324\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\026\004\025\006\033\007\034\010\021\011\042\014\030" +
    "\015\023\016\044\017\015\020\022\021\016\022\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\141\006" +
    "\144\007\143\010\137\011\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\136\004\025" +
    "\006\033\007\034\010\021\011\042\014\030\015\023\016" +
    "\044\017\015\020\022\021\016\022\027\001\001\000\014" +
    "\004\141\006\144\007\143\010\137\011\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\166" +
    "\004\025\006\033\007\034\010\021\011\042\014\030\015" +
    "\023\016\044\017\015\020\022\021\016\022\027\001\001" +
    "\000\014\004\141\006\144\007\143\010\137\011\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\175\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\200" +
    "\004\025\006\033\007\034\010\021\011\042\014\030\015" +
    "\023\016\044\017\015\020\022\021\016\022\027\001\001" +
    "\000\014\004\141\006\144\007\143\010\137\011\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\204" +
    "\004\025\006\033\007\034\010\021\011\042\014\030\015" +
    "\023\016\044\017\015\020\022\021\016\022\027\001\001" +
    "\000\014\004\141\006\144\007\143\010\137\011\140\001" +
    "\001\000\002\001\001\000\004\022\207\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\216\001\001\000\002\001\001\000\004\020\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\260\001" +
    "\001\000\002\001\001\000\004\013\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\271" +
    "\001\001\000\002\001\001\000\004\005\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\305" +
    "\001\001\000\002\001\001\000\004\005\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\312\004\025" +
    "\006\033\007\034\010\021\011\042\014\030\015\023\016" +
    "\044\017\015\020\022\021\016\022\027\001\001\000\014" +
    "\004\141\006\144\007\143\010\137\011\140\001\001\000" +
    "\002\001\001\000\004\021\315\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\324\004\025" +
    "\006\033\007\034\010\021\011\042\014\030\015\023\016" +
    "\044\017\015\020\022\021\016\022\027\001\001\000\014" +
    "\004\141\006\144\007\143\010\137\011\140\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoJ$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoJ$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoJ$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoJ$actions {
  private final SintacticoJ parser;

  /** Constructor */
  CUP$SintacticoJ$actions(SintacticoJ parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoJ$do_action(
    int                        CUP$SintacticoJ$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoJ$parser,
    java.util.Stack            CUP$SintacticoJ$stack,
    int                        CUP$SintacticoJ$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoJ$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoJ$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SWITCH ::= Switch Parentesis_Izq Identificador Parentesis_Der Llave_Izq Case Identificador P_Coma SENTENCIA Break P_Coma Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // POTENCIA ::= Identificador 
            {
              String RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("POTENCIA",16, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // POTENCIA ::= Float 
            {
              String RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).right;
		String de = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.peek()).value;
		RESULT=de;
              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("POTENCIA",16, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // POTENCIA ::= Int 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.peek()).value;
		RESULT=num;
              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("POTENCIA",16, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // POTENCIA ::= Parentesis_Izq POTENCIA Parentesis_Der 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).value;
		 RESULT=num;
              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("POTENCIA",16, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // POTENCIA ::= Potencia Parentesis_Izq POTENCIA P_Coma POTENCIA Parentesis_Der 
            {
              String RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-3)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).value;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("POTENCIA",16, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RAIZ ::= Raiz Parentesis_Izq RAIZ Parentesis_Der 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).value;
		 RESULT=num;
              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("RAIZ",15, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MULTIPLICACION ::= MULTIPLICACION Op_Multiplicacion MULTIPLICACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1*num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("MULTIPLICACION",13, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DIVISION ::= DIVISION Op_Division DIVISION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1/num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DIVISION",14, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RESTA ::= RESTA Op_Resta RESTA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1-num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("RESTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SUMA ::= SUMA Op_Suma SUMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1-num2;
    RESULT= (respuesta)+"";

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SUMA",11, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_FOR ::= Op_Incremento Identificador 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_FOR ::= Identificador Op_Incremento 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_FOR ::= Identificador Op_Atribucion Numero 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_FOR ::= Identificador Op_Igual Numero P_Coma SENTENCIA_BOOLEANA P_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_FOR ::= Int Identificador Op_Igual Numero P_Coma SENTENCIA_BOOLEANA P_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= For Parentesis_Izq SENTENCIA_FOR Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WHILE ::= While Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_ELSE ::= If Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der Else Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Identificador 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Numero 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Parentesis_Izq Parentesis_Der Identificador Op_Relacional Op_Booleano 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF ::= If Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Let Identificador Op_Igual Corchete_Izq Comillas Identificador Comillas Corchete_Der P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Let Identificador Op_Igual Comillas Identificador Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Let Identificador Op_Atribucion Comillas Identificador Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Let Identificador Op_Igual Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Let Identificador Op_Atribucion Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Let Op_Incremento Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Let Identificador Op_Incremento P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= Let Identificador Op_Igual Numero P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= Let Identificador Op_Atribucion Numero P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Var Identificador Op_Igual Comillas Identificador Comillas P_Coma Let Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Var Identificador Op_Atribucion Comillas Identificador Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Var Identificador Op_Igual Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Var Identificador Op_Atribucion Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Var Op_Incremento Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Var Identificador Op_Incremento P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Var Identificador Op_Igual Numero P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Var Identificador Op_Atribucion Numero P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Var Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Return Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Identificador Op_Suma Op_Igual Arguments Corchete_Izq Identificador Corchete_Der Op_Suma Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Let Identificador Op_Igual Prompt Parentesis_Izq Comillas Identificador Comillas Parentesis_Der P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= RAIZ 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= RESTA 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SUMA 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DIVISION 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Function Identificador Parentesis_Izq Identificador Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Main Identificador Parentesis_Izq Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          return CUP$SintacticoJ$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoJ$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.elementAt(CUP$SintacticoJ$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoJ$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoJ$parser.done_parsing();
          return CUP$SintacticoJ$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

