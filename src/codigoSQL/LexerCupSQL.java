/* The following code was generated by JFlex 1.4.3 on 29/05/21 04:36 AM */

package codigoSQL;
import java_cup.runtime.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/05/21 04:36 AM from the specification file
 * <tt>LexerCupSQL.flex</tt>
 */
public class LexerCupSQL implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\6\2\0\1\3\22\0\1\3\1\54\1\7\2\0"+
    "\1\55\2\0\1\62\1\63\1\51\1\47\1\3\1\50\1\4\1\5"+
    "\2\2\1\35\7\2\1\71\1\70\1\53\1\46\1\52\2\0\1\10"+
    "\1\30\1\21\1\11\1\14\1\12\1\37\1\32\1\26\1\31\1\45"+
    "\1\20\1\25\1\16\1\24\1\34\1\1\1\15\1\23\1\13\1\22"+
    "\1\27\1\33\1\36\1\17\1\1\1\66\1\0\1\67\1\0\1\1"+
    "\1\0\1\57\3\1\1\41\1\56\5\1\1\60\1\1\1\44\3\1"+
    "\1\40\1\61\1\42\1\43\5\1\1\64\1\0\1\65\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\24\3\1\11\1\12\1\13\1\14\2\15\2\2\1\3"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\1\1\0\1\5\1\26\5\3\1\27\41\3\1\30"+
    "\2\3\1\31\4\3\1\32\7\3\1\15\1\33\1\3"+
    "\1\0\1\34\1\35\2\3\1\30\1\36\1\3\1\37"+
    "\1\3\1\40\10\3\1\41\6\3\1\42\4\3\1\43"+
    "\1\3\1\44\46\3\1\0\3\3\1\45\3\3\1\46"+
    "\1\47\1\50\1\3\1\51\2\3\1\52\1\3\1\53"+
    "\1\54\1\55\1\56\1\3\1\57\3\3\1\60\1\61"+
    "\3\3\1\62\1\63\10\3\1\64\7\3\1\65\2\3"+
    "\1\66\3\3\1\67\4\3\1\70\3\3\1\71\1\3"+
    "\1\72\1\4\1\73\1\74\1\75\4\3\1\76\1\77"+
    "\1\3\1\100\3\3\1\101\4\3\1\102\3\3\1\103"+
    "\6\3\1\104\1\3\1\105\5\3\1\106\2\3\1\107"+
    "\1\110\4\3\1\111\3\3\1\112\1\113\2\3\1\114"+
    "\1\115\3\3\1\116\1\117\1\120\1\3\1\121\1\122"+
    "\1\123\1\124\1\3\1\125\1\3\1\126\1\127\1\3"+
    "\1\130\1\3\1\131\1\3\1\132\1\133\1\3\1\134"+
    "\1\3\1\135\1\136\1\3\1\137\1\3\1\140\1\3"+
    "\1\141\1\142\1\143\1\144\1\145\2\3\1\146\1\147"+
    "\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\72\0\u0122\0\72"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692"+
    "\0\u06cc\0\u0706\0\u05e4\0\u0692\0\u0740\0\u077a\0\72\0\72"+
    "\0\72\0\72\0\72\0\72\0\72\0\u07b4\0\u07ee\0\u0828"+
    "\0\72\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe"+
    "\0\u1138\0\u1172\0\u11ac\0\164\0\u11e6\0\u1220\0\u125a\0\u1294"+
    "\0\164\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\72\0\72\0\u1464\0\u149e\0\u07ee\0\164\0\u14d8\0\u1512"+
    "\0\164\0\164\0\u154c\0\164\0\u1586\0\164\0\u15c0\0\u15fa"+
    "\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\164\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\164\0\u18ec\0\u1926"+
    "\0\u1960\0\u199a\0\164\0\u19d4\0\164\0\u1a0e\0\u1a48\0\u1a82"+
    "\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52"+
    "\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188\0\u21c2"+
    "\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4\0\u231e\0\u2358\0\164"+
    "\0\u2392\0\u23cc\0\u2406\0\164\0\164\0\164\0\u2440\0\164"+
    "\0\u247a\0\u24b4\0\164\0\u24ee\0\164\0\164\0\164\0\164"+
    "\0\u2528\0\164\0\u2562\0\u259c\0\u25d6\0\164\0\164\0\u2610"+
    "\0\u264a\0\u2684\0\164\0\164\0\u26be\0\u26f8\0\u2732\0\u276c"+
    "\0\u27a6\0\u27e0\0\u281a\0\u2854\0\164\0\u288e\0\u28c8\0\u2902"+
    "\0\u293c\0\u2976\0\u29b0\0\u29ea\0\164\0\u2a24\0\u2a5e\0\164"+
    "\0\u2a98\0\u2ad2\0\u2b0c\0\164\0\u2b46\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\164\0\u2c2e\0\u2c68\0\u2ca2\0\164\0\u2cdc\0\164\0\72"+
    "\0\164\0\u2d16\0\164\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\164"+
    "\0\164\0\u2e38\0\164\0\u2e72\0\u2eac\0\u2ee6\0\164\0\u2f20"+
    "\0\u2f5a\0\u2f94\0\u2fce\0\164\0\u3008\0\u3042\0\u307c\0\164"+
    "\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8\0\164\0\u3212"+
    "\0\164\0\u324c\0\u3286\0\u32c0\0\u32fa\0\u3334\0\164\0\u336e"+
    "\0\u33a8\0\164\0\164\0\u33e2\0\u341c\0\u3456\0\u3490\0\164"+
    "\0\u34ca\0\u3504\0\u353e\0\164\0\164\0\u3578\0\u35b2\0\164"+
    "\0\164\0\u35ec\0\u3626\0\u3660\0\164\0\164\0\164\0\u369a"+
    "\0\164\0\164\0\164\0\164\0\u36d4\0\164\0\u370e\0\164"+
    "\0\164\0\u3748\0\164\0\u3782\0\164\0\u37bc\0\164\0\164"+
    "\0\u37f6\0\164\0\u3830\0\164\0\164\0\u386a\0\164\0\u38a4"+
    "\0\164\0\u38de\0\164\0\164\0\164\0\164\0\164\0\u3918"+
    "\0\u3952\0\164\0\164\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\3"+
    "\1\20\1\21\1\22\1\23\1\24\1\3\1\25\1\26"+
    "\1\27\2\3\1\30\1\31\1\4\1\3\1\32\1\33"+
    "\1\3\1\34\3\3\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\3\3\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\73\0\2\3\1\56"+
    "\2\0\1\56\1\0\36\3\10\0\4\3\11\0\1\56"+
    "\1\4\1\56\1\57\1\0\1\56\1\0\25\56\1\4"+
    "\10\56\10\0\4\56\11\0\2\56\1\5\2\0\1\5"+
    "\1\0\36\56\10\0\4\56\15\0\1\60\40\0\1\61"+
    "\24\0\2\3\1\56\2\0\1\56\1\0\1\3\1\62"+
    "\1\63\2\3\1\64\1\65\1\3\1\66\2\3\1\67"+
    "\22\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\1\70\3\3\1\71\5\3\1\72\23\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\5\3"+
    "\1\73\4\3\1\74\1\3\1\75\1\3\1\76\17\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\1\77\4\3\1\100\1\3\1\101\12\3\1\102\13\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\1\103\5\3\1\104\1\3\1\105\15\3\1\106\7\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\107\7\3\1\110\21\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\1\111\3\3\1\112"+
    "\4\3\1\113\1\114\1\3\1\115\21\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\1\116\13\3"+
    "\1\117\21\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\5\3\1\120\2\3\1\121\3\3\1\122"+
    "\5\3\1\123\13\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\24\3\1\124\11\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\1\125\3\3"+
    "\1\126\4\3\1\127\24\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\3\3\1\130\1\3\1\131"+
    "\12\3\1\132\3\3\1\133\11\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\2\3\1\134\3\3"+
    "\1\135\27\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\1\136\15\3\1\137\17\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\4\3\1\140"+
    "\2\3\1\141\4\3\1\142\1\3\1\143\17\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\22\3"+
    "\1\144\13\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\5\3\1\145\30\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\14\3\1\146\21\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\31\3\1\147\4\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\30\3\1\150\5\3\10\0\4\3"+
    "\56\0\1\151\71\0\1\61\1\152\70\0\1\61\1\0"+
    "\1\152\67\0\1\61\71\0\1\151\3\0\1\151\65\0"+
    "\1\151\4\0\1\151\17\0\2\3\1\56\2\0\1\56"+
    "\1\0\36\3\10\0\1\3\1\153\2\3\60\0\1\154"+
    "\22\0\3\56\2\0\1\56\1\0\36\56\10\0\4\56"+
    "\12\0\1\155\32\0\1\155\34\0\6\60\1\0\63\60"+
    "\1\0\2\3\1\56\2\0\1\56\1\0\1\3\1\156"+
    "\34\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\3\3\1\157\32\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\5\3\1\160\30\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\1\3"+
    "\1\161\5\3\1\162\26\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\3\3\1\163\32\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\11\3"+
    "\1\164\24\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\3\3\1\165\3\3\1\166\26\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\2\3"+
    "\1\167\5\3\1\170\1\171\1\3\1\172\22\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\1\173"+
    "\35\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\14\3\1\174\21\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\6\3\1\175\1\3\1\176"+
    "\25\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\5\3\1\177\30\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\5\3\1\200\30\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\20\3"+
    "\1\201\15\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\16\3\1\202\17\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\24\3\1\203\11\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\204\31\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\11\3\1\205\24\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\1\3\1\206"+
    "\34\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\13\3\1\207\22\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\16\3\1\210\17\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\13\3"+
    "\1\211\22\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\10\3\1\212\12\3\1\213\12\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\15\3"+
    "\1\214\20\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\23\3\1\215\2\3\1\216\7\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\22\3"+
    "\1\217\13\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\15\3\1\220\20\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\3\3\1\161\32\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\13\3\1\221\22\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\14\3\1\222\21\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\4\3\1\223"+
    "\31\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\12\3\1\224\1\3\1\225\21\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\6\3\1\226"+
    "\1\3\1\227\1\3\1\230\2\3\1\231\20\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\1\232"+
    "\35\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\1\3\1\233\34\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\17\3\1\234\16\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\10\3"+
    "\1\235\25\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\22\3\1\236\13\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\22\3\1\237\13\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\1\3\1\240\34\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\21\3\1\241\14\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\4\3\1\242"+
    "\31\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\1\3\1\243\1\3\1\244\7\3\1\245\22\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\5\3\1\246\2\3\1\247\25\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\4\3\1\250\31\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\2\3\1\251\24\3\1\252\6\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\14\3\1\253\21\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\6\3\1\254\27\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\4\3\1\255\11\3\1\256\17\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\16\3\1\257\17\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\3\3\1\260\32\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\32\3\1\261"+
    "\3\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\33\3\1\262\2\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\36\3\10\0\2\3\1\263"+
    "\1\3\12\0\1\264\32\0\1\264\35\0\2\3\1\56"+
    "\2\0\1\56\1\0\4\3\1\265\31\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\1\266\35\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\267\31\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\4\3\1\270\31\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\1\271\35\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\272\31\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\10\3\1\273\25\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\11\3\1\274"+
    "\24\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\10\3\1\275\25\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\15\3\1\276\20\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\11\3"+
    "\1\277\24\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\10\3\1\300\25\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\13\3\1\301\22\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\10\3\1\302\25\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\15\3\1\303\11\3\1\304\6\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\305\31\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\6\3\1\306\27\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\22\3\1\307"+
    "\13\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\4\3\1\310\11\3\1\311\17\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\3\3\1\312"+
    "\7\3\1\313\22\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\12\3\1\314\23\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\10\3\1\315"+
    "\25\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\4\3\1\316\31\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\3\3\1\317\32\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\1\320"+
    "\35\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\4\3\1\321\13\3\1\322\15\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\3\3\1\323"+
    "\32\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\24\3\1\324\11\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\1\325\35\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\13\3\1\326"+
    "\22\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\13\3\1\327\22\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\13\3\1\330\3\3\1\331"+
    "\16\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\12\3\1\332\23\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\6\3\1\333\27\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\15\3"+
    "\1\334\20\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\5\3\1\335\30\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\1\336\35\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\4\3"+
    "\1\337\31\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\4\3\1\340\31\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\4\3\1\341\31\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\342\31\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\4\3\1\343\31\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\4\3\1\344"+
    "\31\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\6\3\1\345\27\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\4\3\1\346\31\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\4\3"+
    "\1\347\7\3\1\350\21\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\4\3\1\351\31\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\11\3"+
    "\1\352\24\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\12\3\1\353\23\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\23\3\1\354\12\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\14\3\1\355\21\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\16\3\1\356\17\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\10\3\1\357"+
    "\25\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\1\360\35\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\6\3\1\361\27\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\10\3\1\362"+
    "\25\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\14\3\1\363\1\364\20\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\14\3\1\365\21\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\33\3\1\366\2\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\31\3\1\367\4\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\36\3\10\0"+
    "\3\3\1\262\12\0\1\264\32\0\1\264\25\0\1\370"+
    "\7\0\2\3\1\56\2\0\1\56\1\0\5\3\1\371"+
    "\30\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\7\3\1\372\26\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\5\3\1\373\30\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\12\3"+
    "\1\374\23\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\3\3\1\375\32\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\1\376\35\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\3\3"+
    "\1\377\32\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\3\3\1\u0100\32\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\4\3\1\u0101\31\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\27\3\1\u0102\6\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\2\3\1\u0103\33\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\3\3\1\u0104"+
    "\32\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\10\3\1\u0105\25\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\20\3\1\u0106\15\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\5\3"+
    "\1\u0107\30\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\5\3\1\u0108\30\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\4\3\1\u0109\31\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\3\3\1\u010a\32\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\3\3\1\u010b\32\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\4\3\1\u010c"+
    "\31\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\3\3\1\u010d\32\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\4\3\1\u010e\31\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\15\3"+
    "\1\u010f\20\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\3\3\1\u0110\32\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\16\3\1\u0111\17\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\3\3\1\u0112\32\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\24\3\1\u0113\11\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\11\3\1\u0114"+
    "\24\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\15\3\1\u0115\20\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\5\3\1\u0116\30\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\5\3"+
    "\1\u0117\30\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\11\3\1\u0118\24\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\26\3\1\u0119\7\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\27\3\1\u011a\6\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\5\3\1\u011b\30\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\22\3\1\u011c"+
    "\13\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\4\3\1\u011d\31\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\5\3\1\u011e\30\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\6\3"+
    "\1\u011f\27\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\4\3\1\u0120\31\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\5\3\1\u0121\30\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\u0122\31\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\5\3\1\u0123\30\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\1\u0124\35\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\30\3\1\u0125\5\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\10\3\1\u0126\25\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\10\3\1\u0127"+
    "\25\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\4\3\1\u0128\31\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\5\3\1\u0129\30\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\16\3"+
    "\1\u012a\17\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\4\3\1\u012b\31\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\13\3\1\u012c\22\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\3\3\1\u012d\32\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\1\u012e\35\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\16\3\1\u012f\17\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\5\3\1\u0130\30\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\4\3\1\u0131\31\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\4\3\1\u0132"+
    "\31\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\1\u0133\35\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\5\3\1\u0134\30\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\6\3\1\u0135"+
    "\27\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\3\3\1\u0136\32\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\4\3\1\u0137\31\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\14\3"+
    "\1\u0138\21\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\3\3\1\u0139\32\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\1\u013a\35\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\13\3"+
    "\1\u013b\22\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\3\3\1\u013c\32\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\4\3\1\u013d\31\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\3\3\1\u013e\32\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\1\u013f\35\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\13\3\1\u0140\22\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\u0141\31\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\1\u0142\35\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\7\3\1\u0143\26\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\5\3\1\u0144\30\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\34\3\1\u0145\1\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\4\3\1\u0146"+
    "\31\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\3\3\1\u0147\32\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\4\3\1\u0148\31\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\14\3"+
    "\1\u0149\21\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\5\3\1\u014a\30\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\11\3\1\u014b\24\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\11\3\1\u014c\24\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\5\3\1\u014d\30\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\16\3\1\u014e"+
    "\17\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\3\3\1\u014f\32\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\16\3\1\u0150\17\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\5\3"+
    "\1\u0151\30\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\5\3\1\u0152\30\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\6\3\1\u0153\27\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\7\3\1\u0154\26\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\6\3\1\u0155\27\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\6\3\1\u0156"+
    "\27\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\35\3\1\u0157\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\6\3\1\u0158\27\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\6\3\1\u0159"+
    "\27\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\25\3\1\u015a\10\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\13\3\1\u015b\22\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\3\3"+
    "\1\u015c\32\3\10\0\4\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14732];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\3\1\1\11\1\1\1\11\36\1\7\11"+
    "\1\1\1\0\1\1\1\11\67\1\2\11\1\1\1\0"+
    "\107\1\1\0\103\1\1\11\144\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCupSQL(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexerCupSQL(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 105: break;
        case 13: 
          { return new Symbol(sym.Op_Relacional, yychar, yyline, yytext());
          }
        case 106: break;
        case 66: 
          { return new Symbol(sym.Close, yychar, yyline, yytext());
          }
        case 107: break;
        case 69: 
          { return new Symbol(sym.Index, yychar, yyline, yytext());
          }
        case 108: break;
        case 86: 
          { return new Symbol(sym.Values, yychar, yyline, yytext());
          }
        case 109: break;
        case 81: 
          { return new Symbol(sym.Select, yychar, yyline, yytext());
          }
        case 110: break;
        case 32: 
          { return new Symbol(sym.Day, yychar, yyline, yytext());
          }
        case 111: break;
        case 33: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 112: break;
        case 49: 
          { return new Symbol(sym.Next, yychar, yyline, yytext());
          }
        case 113: break;
        case 68: 
          { return new Symbol(sym.Order, yychar, yyline, yytext());
          }
        case 114: break;
        case 45: 
          { return new Symbol(sym.Each, yychar, yyline, yytext());
          }
        case 115: break;
        case 76: 
          { return new Symbol(sym.Number, yychar, yyline, yytext());
          }
        case 116: break;
        case 23: 
          { return new Symbol(sym.As, yychar, yyline, yytext());
          }
        case 117: break;
        case 61: 
          { return new Symbol(sym.Alter, yychar, yyline, yytext());
          }
        case 118: break;
        case 99: 
          { return new Symbol(sym.Arraylen, yychar, yyline, yytext());
          }
        case 119: break;
        case 30: 
          { return new Symbol(sym.Any, yychar, yyline, yytext());
          }
        case 120: break;
        case 47: 
          { return new Symbol(sym.Exit, yychar, yyline, yytext());
          }
        case 121: break;
        case 59: 
          { return new Symbol(sym.After, yychar, yyline, yytext());
          }
        case 122: break;
        case 12: 
          { return new Symbol(sym.Op_Multiplicacion, yychar, yyline, yytext());
          }
        case 123: break;
        case 28: 
          { return new Symbol(sym.Real, yycolumn,yyline,new String(yytext()));
          }
        case 124: break;
        case 104: 
          { return new Symbol(sym.Savepoint, yychar, yyline, yytext());
          }
        case 125: break;
        case 55: 
          { return new Symbol(sym.View, yychar, yyline, yytext());
          }
        case 126: break;
        case 7: 
          { return new Symbol(sym.Op_Division, yychar, yyline, yytext());
          }
        case 127: break;
        case 93: 
          { return new Symbol(sym.Numeric, yychar, yyline, yytext());
          }
        case 128: break;
        case 90: 
          { return new Symbol(sym.Default, yychar, yyline, yytext());
          }
        case 129: break;
        case 73: 
          { return new Symbol(sym.Delete, yychar, yyline, yytext());
          }
        case 130: break;
        case 62: 
          { return new Symbol(sym.First, yychar, yyline, yytext());
          }
        case 131: break;
        case 79: 
          { return new Symbol(sym.Commit, yychar, yyline, yytext());
          }
        case 132: break;
        case 40: 
          { return new Symbol(sym.From, yychar, yyline, yytext());
          }
        case 133: break;
        case 88: 
          { return new Symbol(sym.Binary, yychar, yyline, yytext());
          }
        case 134: break;
        case 5: 
          { /*Ignore*/
          }
        case 135: break;
        case 16: 
          { return new Symbol(sym.Llave_Izq, yychar, yyline, yytext());
          }
        case 136: break;
        case 95: 
          { return new Symbol(sym.Convert, yychar, yyline, yytext());
          }
        case 137: break;
        case 67: 
          { return new Symbol(sym.Count, yychar, yyline, yytext());
          }
        case 138: break;
        case 9: 
          { return new Symbol(sym.Op_Igual, yychar, yyline, yytext());
          }
        case 139: break;
        case 64: 
          { return new Symbol(sym.Elsif, yychar, yyline, yytext());
          }
        case 140: break;
        case 38: 
          { return new Symbol(sym.Desc, yychar, yyline, yytext());
          }
        case 141: break;
        case 22: 
          { return new Symbol(sym.Op_Atribucion, yychar, yyline, yytext());
          }
        case 142: break;
        case 2: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 143: break;
        case 101: 
          { return new Symbol(sym.Rollback, yychar, yyline, yytext());
          }
        case 144: break;
        case 83: 
          { return new Symbol(sym.Others, yychar, yyline, yytext());
          }
        case 145: break;
        case 97: 
          { return new Symbol(sym.Boolean, yychar, yyline, yytext());
          }
        case 146: break;
        case 82: 
          { return new Symbol(sym.Schema, yychar, yyline, yytext());
          }
        case 147: break;
        case 78: 
          { return new Symbol(sym.Colum, yychar, yyline, yytext());
          }
        case 148: break;
        case 50: 
          { return new Symbol(sym.Last, yychar, yyline, yytext());
          }
        case 149: break;
        case 94: 
          { return new Symbol(sym.Cluster, yychar, yyline, yytext());
          }
        case 150: break;
        case 63: 
          { return new Symbol(sym.Table, yychar, yyline, yytext());
          }
        case 151: break;
        case 85: 
          { return new Symbol(sym.Insert, yychar, yyline, yytext());
          }
        case 152: break;
        case 42: 
          { return new Symbol(sym.Trim, yychar, yyline, yytext());
          }
        case 153: break;
        case 98: 
          { return new Symbol(sym.Primary, yychar, yyline, yytext());
          }
        case 154: break;
        case 41: 
          { return new Symbol(sym.Full, yychar, yyline, yytext());
          }
        case 155: break;
        case 3: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 156: break;
        case 35: 
          { return new Symbol(sym.Row, yychar, yyline, yytext());
          }
        case 157: break;
        case 46: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 158: break;
        case 53: 
          { return new Symbol(sym.Open, yychar, yyline, yytext());
          }
        case 159: break;
        case 36: 
          { return new Symbol(sym.New, yychar, yyline, yytext());
          }
        case 160: break;
        case 96: 
          { return new Symbol(sym.Integer, yychar, yyline, yytext());
          }
        case 161: break;
        case 31: 
          { return new Symbol(sym.Asc, yychar, yyline, yytext());
          }
        case 162: break;
        case 70: 
          { return new Symbol(sym.Begin, yychar, yyline, yytext());
          }
        case 163: break;
        case 21: 
          { return new Symbol(sym.Dos_Puntos, yychar, yyline, yytext());
          }
        case 164: break;
        case 17: 
          { return new Symbol(sym.Llave_Der, yychar, yyline, yytext());
          }
        case 165: break;
        case 18: 
          { return new Symbol(sym.Corchete_Izq, yychar, yyline, yytext());
          }
        case 166: break;
        case 11: 
          { return new Symbol(sym.Op_Resta, yychar, yyline, yytext());
          }
        case 167: break;
        case 39: 
          { return new Symbol(sym.Dual, yychar, yyline, yytext());
          }
        case 168: break;
        case 58: 
          { return new Symbol(sym.Op_Booleano, yychar, yyline, yytext());
          }
        case 169: break;
        case 51: 
          { return new Symbol(sym.Loop, yychar, yyline, yytext());
          }
        case 170: break;
        case 80: 
          { return new Symbol(sym.Update, yychar, yyline, yytext());
          }
        case 171: break;
        case 54: 
          { return new Symbol(sym.Into, yychar, yyline, yytext());
          }
        case 172: break;
        case 56: 
          { return new Symbol(sym.When, yychar, yyline, yytext());
          }
        case 173: break;
        case 60: 
          { return new Symbol(sym.Array, yychar, yyline, yytext());
          }
        case 174: break;
        case 10: 
          { return new Symbol(sym.Op_Suma, yychar, yyline, yytext());
          }
        case 175: break;
        case 44: 
          { return new Symbol(sym.Then, yychar, yyline, yytext());
          }
        case 176: break;
        case 100: 
          { return new Symbol(sym.Function, yychar, yyline, yytext());
          }
        case 177: break;
        case 84: 
          { return new Symbol(sym.Object, yychar, yyline, yytext());
          }
        case 178: break;
        case 25: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 179: break;
        case 20: 
          { return new Symbol(sym.P_Coma, yychar, yyline, yytext());
          }
        case 180: break;
        case 6: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 181: break;
        case 14: 
          { return new Symbol(sym.Parentesis_Izq, yychar, yyline, yytext());
          }
        case 182: break;
        case 24: 
          { return new Symbol(sym.Op_Logico, yychar, yyline, yytext());
          }
        case 183: break;
        case 37: 
          { return new Symbol(sym.Date, yychar, yyline, yytext());
          }
        case 184: break;
        case 74: 
          { return new Symbol(sym.Exists, yychar, yyline, yytext());
          }
        case 185: break;
        case 72: 
          { return new Symbol(sym.Prior, yychar, yyline, yytext());
          }
        case 186: break;
        case 57: 
          { return new Symbol(sym.Goto, yychar, yyline, yytext());
          }
        case 187: break;
        case 43: 
          { return new Symbol(sym.Type, yychar, yyline, yytext());
          }
        case 188: break;
        case 1: 
          { return new Symbol(sym.Texto, yycolumn,yyline,new String(yytext()));
          }
        case 189: break;
        case 19: 
          { return new Symbol(sym.Corchete_Der, yychar, yyline, yytext());
          }
        case 190: break;
        case 27: 
          { return new Symbol(sym.Op_Incremento, yychar, yyline, yytext());
          }
        case 191: break;
        case 48: 
          { return new Symbol(sym.Name, yychar, yyline, yytext());
          }
        case 192: break;
        case 103: 
          { return new Symbol(sym.Contains, yychar, yyline, yytext());
          }
        case 193: break;
        case 34: 
          { return new Symbol(sym.End, yychar, yyline, yytext());
          }
        case 194: break;
        case 89: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 195: break;
        case 71: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 196: break;
        case 4: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 197: break;
        case 29: 
          { return new Symbol(sym.Add, yychar, yyline, yytext());
          }
        case 198: break;
        case 75: 
          { return new Symbol(sym.Result, yychar, yyline, yytext());
          }
        case 199: break;
        case 91: 
          { return new Symbol(sym.Declare, yychar, yyline, yytext());
          }
        case 200: break;
        case 52: 
          { return new Symbol(sym.Char, yychar, yyline, yytext());
          }
        case 201: break;
        case 26: 
          { return new Symbol(sym.By, yychar, yyline, yytext());
          }
        case 202: break;
        case 77: 
          { return new Symbol(sym.Create, yychar, yyline, yytext());
          }
        case 203: break;
        case 15: 
          { return new Symbol(sym.Parentesis_Der, yychar, yyline, yytext());
          }
        case 204: break;
        case 102: 
          { return new Symbol(sym.Varchar2, yychar, yyline, yytext());
          }
        case 205: break;
        case 65: 
          { return new Symbol(sym.Nchar, yychar, yyline, yytext());
          }
        case 206: break;
        case 87: 
          { return new Symbol(sym.Before, yychar, yyline, yytext());
          }
        case 207: break;
        case 92: 
          { return new Symbol(sym.Trigger, yychar, yyline, yytext());
          }
        case 208: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
