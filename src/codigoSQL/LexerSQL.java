/* The following code was generated by JFlex 1.4.3 on 29/05/21 04:35 AM */

package codigoSQL;
import static codigoSQL.TokensSQL.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/05/21 04:35 AM from the specification file
 * <tt>LexerSQL.flex</tt>
 */
class LexerSQL {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\53\1\33\2\0"+
    "\1\54\2\0\1\61\1\62\1\50\1\46\1\3\1\47\1\34\1\4"+
    "\12\2\1\70\1\67\1\52\1\45\1\51\2\0\1\6\1\26\1\17"+
    "\1\7\1\12\1\10\1\36\1\30\1\24\1\27\1\44\1\16\1\23"+
    "\1\14\1\22\1\32\1\1\1\13\1\21\1\11\1\20\1\25\1\31"+
    "\1\35\1\15\1\1\1\65\1\0\1\66\1\0\1\1\1\0\1\56"+
    "\3\1\1\40\1\55\5\1\1\57\1\1\1\43\3\1\1\37\1\60"+
    "\1\41\1\42\5\1\1\63\1\0\1\64\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\21\3"+
    "\1\10\1\11\3\3\1\12\1\13\1\14\1\15\2\16"+
    "\2\2\1\3\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\1\1\0\1\5\1\27\5\3\1\30"+
    "\42\3\1\31\2\3\1\32\4\3\1\33\7\3\1\16"+
    "\1\34\1\3\1\0\1\35\1\36\2\3\1\31\1\37"+
    "\1\3\1\40\1\3\1\41\10\3\1\42\6\3\1\43"+
    "\4\3\1\44\1\3\1\45\46\3\1\0\3\3\1\46"+
    "\3\3\1\47\1\50\1\51\1\3\1\52\2\3\1\53"+
    "\1\3\1\54\1\55\1\56\1\57\1\3\1\60\3\3"+
    "\1\61\1\62\4\3\1\63\1\64\10\3\1\65\7\3"+
    "\1\66\2\3\1\67\2\3\1\70\4\3\1\71\3\3"+
    "\1\72\1\3\1\73\1\4\1\74\1\75\1\76\4\3"+
    "\1\77\1\100\1\3\1\101\3\3\1\102\5\3\1\103"+
    "\3\3\1\104\6\3\1\105\1\3\1\106\4\3\1\107"+
    "\2\3\1\110\1\111\4\3\1\112\3\3\1\113\1\114"+
    "\2\3\1\115\1\3\1\116\3\3\1\117\1\120\1\121"+
    "\1\3\1\122\1\123\1\124\1\125\1\3\1\126\1\127"+
    "\1\130\1\3\1\131\1\3\1\132\1\3\1\133\1\134"+
    "\1\3\1\135\1\3\1\136\1\3\1\137\1\3\1\140"+
    "\1\3\1\141\1\142\1\143\1\144\1\145\1\146\1\147"+
    "\2\3\1\150\1\151";

  private static int [] zzUnpackAction() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\71\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\71\0\71\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u05ca\0\u0675\0\u0720\0\u0759\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\u0792\0\u07cb"+
    "\0\u0804\0\71\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\162\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\162\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\71\0\71\0\u1443\0\u147c\0\u07cb\0\162"+
    "\0\u14b5\0\u14ee\0\162\0\162\0\u1527\0\162\0\u1560\0\162"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\162\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\162"+
    "\0\u18b7\0\u18f0\0\u1929\0\u1962\0\162\0\u199b\0\162\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64"+
    "\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c"+
    "\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc"+
    "\0\u22f5\0\162\0\u232e\0\u2367\0\u23a0\0\162\0\162\0\162"+
    "\0\u23d9\0\162\0\u2412\0\u244b\0\162\0\u2484\0\162\0\162"+
    "\0\162\0\162\0\u24bd\0\162\0\u24f6\0\u252f\0\u2568\0\162"+
    "\0\162\0\u25a1\0\u25da\0\u2613\0\u264c\0\162\0\162\0\u2685"+
    "\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\162"+
    "\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\162"+
    "\0\u29dc\0\u2a15\0\162\0\u2a4e\0\u2a87\0\162\0\u2ac0\0\u2af9"+
    "\0\u2b32\0\u2b6b\0\162\0\u2ba4\0\u2bdd\0\u2c16\0\162\0\u2c4f"+
    "\0\162\0\71\0\162\0\u2c88\0\162\0\u2cc1\0\u2cfa\0\u2d33"+
    "\0\u2d6c\0\162\0\162\0\u2da5\0\162\0\u2dde\0\u2e17\0\u2e50"+
    "\0\162\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\162\0\u2fa6"+
    "\0\u2fdf\0\u3018\0\162\0\u3051\0\u308a\0\u30c3\0\u30fc\0\u3135"+
    "\0\u316e\0\162\0\u31a7\0\162\0\u31e0\0\u3219\0\u3252\0\u328b"+
    "\0\162\0\u32c4\0\u32fd\0\162\0\162\0\u3336\0\u336f\0\u33a8"+
    "\0\u33e1\0\162\0\u341a\0\u3453\0\u348c\0\162\0\162\0\u34c5"+
    "\0\u34fe\0\162\0\u3537\0\162\0\u3570\0\u35a9\0\u35e2\0\162"+
    "\0\162\0\162\0\u361b\0\162\0\162\0\162\0\162\0\u3654"+
    "\0\162\0\162\0\162\0\u368d\0\162\0\u36c6\0\162\0\u36ff"+
    "\0\162\0\162\0\u3738\0\162\0\u3771\0\162\0\u37aa\0\162"+
    "\0\u37e3\0\162\0\u381c\0\162\0\162\0\162\0\162\0\162"+
    "\0\162\0\162\0\u3855\0\u388e\0\162\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\3\1\17\1\20"+
    "\1\21\1\22\1\23\1\3\1\24\1\25\1\26\2\3"+
    "\1\27\1\30\1\31\1\32\1\3\1\33\1\34\1\3"+
    "\1\35\3\3\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\3\3\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\72\0\2\3\1\57\2\0"+
    "\25\3\2\0\10\3\10\0\4\3\11\0\1\57\1\4"+
    "\1\57\2\0\25\57\1\0\1\60\10\57\10\0\4\57"+
    "\11\0\2\57\1\5\2\0\25\57\2\0\10\57\10\0"+
    "\4\57\14\0\1\61\40\0\1\62\24\0\2\3\1\57"+
    "\2\0\1\3\1\63\1\64\2\3\1\65\1\66\1\3"+
    "\1\67\2\3\1\70\11\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\1\71\3\3\1\72\5\3"+
    "\1\73\12\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\5\3\1\74\4\3\1\75\1\3\1\76"+
    "\1\3\1\77\6\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\1\100\4\3\1\101\1\3\1\102"+
    "\12\3\1\103\2\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\1\104\5\3\1\105\1\3\1\106"+
    "\14\3\2\0\1\107\7\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\4\3\1\110\7\3\1\111\10\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\1\112"+
    "\3\3\1\113\4\3\1\114\1\115\1\3\1\116\2\3"+
    "\1\117\5\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\1\120\13\3\1\121\10\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\5\3\1\122"+
    "\2\3\1\123\3\3\1\124\5\3\1\125\2\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\24\3"+
    "\1\126\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\1\127\3\3\1\130\4\3\1\131\13\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\3\3"+
    "\1\132\1\3\1\133\12\3\1\134\3\3\1\135\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\2\3"+
    "\1\136\3\3\1\137\16\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\1\140\15\3\1\141\6\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\4\3\1\142\2\3\1\143\4\3\1\144\1\3\1\145"+
    "\6\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\22\3\1\146\2\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\5\3\1\147\17\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\14\3"+
    "\1\150\10\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\25\3\2\0\3\3\1\151\4\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\25\3\2\0\2\3"+
    "\1\152\5\3\10\0\4\3\55\0\1\153\70\0\1\62"+
    "\1\154\67\0\1\62\1\0\1\154\66\0\1\62\70\0"+
    "\1\153\3\0\1\153\64\0\1\153\4\0\1\153\17\0"+
    "\2\3\1\57\2\0\25\3\2\0\10\3\10\0\1\3"+
    "\1\155\2\3\57\0\1\156\22\0\3\57\2\0\25\57"+
    "\2\0\10\57\10\0\4\57\12\0\1\157\66\0\5\61"+
    "\1\0\63\61\1\0\2\3\1\57\2\0\1\3\1\160"+
    "\23\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\3\3\1\161\21\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\5\3\1\162\17\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\1\3"+
    "\1\163\5\3\1\164\15\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\3\3\1\165\21\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\11\3"+
    "\1\166\13\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\3\3\1\167\3\3\1\170\15\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\2\3"+
    "\1\171\5\3\1\172\1\173\1\3\1\174\11\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\1\175"+
    "\24\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\14\3\1\176\10\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\6\3\1\177\1\3\1\200"+
    "\14\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\5\3\1\201\17\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\5\3\1\202\17\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\20\3"+
    "\1\203\4\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\16\3\1\204\6\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\24\3\1\205\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\4\3"+
    "\1\206\20\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\11\3\1\207\13\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\1\3\1\210\23\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\13\3\1\211\11\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\16\3\1\212\6\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\13\3\1\213"+
    "\11\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\10\3\1\214\12\3\1\215\1\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\15\3\1\216"+
    "\7\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\23\3\1\217\1\3\2\0\1\220\7\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\22\3\1\221\2\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\15\3\1\222\7\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\3\3\1\163\21\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\1\223\24\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\13\3\1\224\11\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\14\3\1\225\10\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\4\3\1\226"+
    "\20\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\12\3\1\227\1\3\1\230\10\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\6\3\1\231"+
    "\1\3\1\232\1\3\1\233\2\3\1\234\7\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\1\235"+
    "\24\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\1\3\1\236\23\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\17\3\1\237\5\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\10\3"+
    "\1\240\14\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\22\3\1\241\2\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\22\3\1\242\2\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\1\3\1\243\23\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\21\3\1\244\3\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\4\3\1\245"+
    "\20\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\1\3\1\246\1\3\1\247\7\3\1\250\11\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\10\3\1\251\14\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\4\3\1\252\20\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\2\3\1\253"+
    "\22\3\2\0\1\3\1\254\6\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\14\3\1\255\10\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\6\3\1\256"+
    "\16\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\4\3\1\257\11\3\1\260\6\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\16\3\1\261"+
    "\6\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\3\3\1\262\21\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\25\3\2\0\4\3\1\263"+
    "\3\3\10\0\4\3\11\0\2\3\1\57\2\0\25\3"+
    "\2\0\5\3\1\264\2\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\25\3\2\0\10\3\10\0\2\3\1\265"+
    "\1\3\12\0\1\266\67\0\2\3\1\57\2\0\4\3"+
    "\1\267\20\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\1\270\24\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\4\3\1\271\20\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\4\3"+
    "\1\272\20\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\1\273\24\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\4\3\1\274\20\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\10\3"+
    "\1\275\14\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\11\3\1\276\13\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\10\3\1\277\14\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\15\3\1\300\7\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\11\3\1\301\13\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\10\3\1\302"+
    "\14\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\13\3\1\303\11\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\10\3\1\304\14\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\15\3"+
    "\1\305\7\3\2\0\1\3\1\306\6\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\4\3\1\307\20\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\6\3"+
    "\1\310\16\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\22\3\1\311\2\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\4\3\1\312\11\3"+
    "\1\313\6\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\3\3\1\314\7\3\1\315\11\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\12\3"+
    "\1\316\12\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\10\3\1\317\14\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\4\3\1\320\20\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\3\3\1\321\21\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\1\322\24\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\4\3\1\323\13\3"+
    "\1\324\4\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\5\3\1\325\17\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\3\3\1\326\21\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\24\3\1\327\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\1\330\24\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\13\3\1\331\11\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\13\3"+
    "\1\332\11\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\13\3\1\333\3\3\1\334\5\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\12\3"+
    "\1\335\12\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\6\3\1\336\16\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\15\3\1\337\7\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\5\3\1\340\17\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\1\341\24\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\4\3\1\342\20\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\4\3\1\343\20\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\4\3\1\344\20\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\4\3\1\345"+
    "\20\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\4\3\1\346\20\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\4\3\1\347\20\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\6\3"+
    "\1\350\16\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\4\3\1\351\20\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\4\3\1\352\7\3"+
    "\1\353\10\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\4\3\1\354\20\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\12\3\1\355\12\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\23\3\1\356\1\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\14\3\1\357\10\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\16\3\1\360"+
    "\6\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\10\3\1\361\14\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\1\362\24\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\6\3\1\363"+
    "\16\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\10\3\1\364\14\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\14\3\1\365\1\366\7\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\14\3\1\367\10\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\25\3\2\0\5\3\1\370\2\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\25\3\2\0"+
    "\3\3\1\371\4\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\25\3\2\0\10\3\10\0\3\3\1\264\12\0"+
    "\1\266\57\0\1\372\7\0\2\3\1\57\2\0\5\3"+
    "\1\373\17\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\7\3\1\374\15\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\5\3\1\375\17\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\12\3\1\376\12\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\3\3\1\377\21\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\1\u0100\24\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\3\3\1\u0101\21\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\3\3\1\u0102\21\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\4\3\1\u0103"+
    "\20\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\25\3\2\0\1\3\1\u0104\6\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\2\3\1\u0105\22\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\3\3"+
    "\1\u0106\21\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\10\3\1\u0107\14\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\20\3\1\u0108\4\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\5\3\1\u0109\17\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\5\3\1\u010a\17\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\4\3\1\u010b"+
    "\20\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\11\3\1\u010c\13\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\3\3\1\u010d\21\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\3\3"+
    "\1\u010e\21\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\4\3\1\u010f\20\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\3\3\1\u0110\21\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\4\3\1\u0111\20\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\15\3\1\u0112\7\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\3\3\1\u0113"+
    "\21\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\16\3\1\u0114\6\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\3\3\1\u0115\21\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\24\3"+
    "\1\u0116\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\11\3\1\u0117\13\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\15\3\1\u0118\7\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\5\3"+
    "\1\u0119\17\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\5\3\1\u011a\17\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\11\3\1\u011b\13\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\25\3\2\0\1\u011c\7\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\25\3\2\0\1\3\1\u011d\6\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\5\3\1\u011e\17\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\4\3\1\u011f\20\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\5\3\1\u0120\17\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\6\3\1\u0121"+
    "\16\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\4\3\1\u0122\20\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\5\3\1\u0123\17\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\4\3"+
    "\1\u0124\20\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\5\3\1\u0125\17\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\1\u0126\24\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\25\3"+
    "\2\0\2\3\1\u0127\5\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\10\3\1\u0128\14\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\10\3\1\u0129\14\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\4\3\1\u012a\20\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\5\3\1\u012b\17\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\16\3\1\u012c"+
    "\6\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\4\3\1\u012d\20\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\13\3\1\u012e\11\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\3\3"+
    "\1\u012f\21\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\1\u0130\24\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\16\3\1\u0131\6\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\5\3"+
    "\1\u0132\17\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\22\3\1\u0133\2\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\4\3\1\u0134\20\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\4\3\1\u0135\20\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\1\u0136\24\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\5\3\1\u0137\17\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\6\3\1\u0138\16\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\3\3\1\u0139\21\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\4\3\1\u013a"+
    "\20\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\14\3\1\u013b\10\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\3\3\1\u013c\21\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\1\u013d"+
    "\24\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\13\3\1\u013e\11\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\3\3\1\u013f\21\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\4\3"+
    "\1\u0140\20\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\3\3\1\u0141\21\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\13\3\1\u0142\11\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\4\3\1\u0143\20\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\1\u0144\24\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\7\3\1\u0145\15\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\5\3\1\u0146\17\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\25\3\2\0\6\3\1\u0147\1\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\4\3\1\u0148"+
    "\20\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\3\3\1\u0149\21\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\4\3\1\u014a\20\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\14\3"+
    "\1\u014b\10\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\5\3\1\u014c\17\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\11\3\1\u014d\13\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\11\3\1\u014e\13\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\1\u014f\24\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\5\3\1\u0150\17\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\16\3\1\u0151\6\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\3\3\1\u0152\21\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\16\3\1\u0153"+
    "\6\3\2\0\10\3\10\0\4\3\11\0\2\3\1\57"+
    "\2\0\5\3\1\u0154\17\3\2\0\10\3\10\0\4\3"+
    "\11\0\2\3\1\57\2\0\6\3\1\u0155\16\3\2\0"+
    "\10\3\10\0\4\3\11\0\2\3\1\57\2\0\7\3"+
    "\1\u0156\15\3\2\0\10\3\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\6\3\1\u0157\16\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\6\3\1\u0158\16\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\25\3\2\0\7\3\1\u0159\10\0\4\3\11\0\2\3"+
    "\1\57\2\0\5\3\1\u015a\17\3\2\0\10\3\10\0"+
    "\4\3\11\0\2\3\1\57\2\0\6\3\1\u015b\16\3"+
    "\2\0\10\3\10\0\4\3\11\0\2\3\1\57\2\0"+
    "\6\3\1\u015c\16\3\2\0\10\3\10\0\4\3\11\0"+
    "\2\3\1\57\2\0\13\3\1\u015d\11\3\2\0\10\3"+
    "\10\0\4\3\11\0\2\3\1\57\2\0\3\3\1\u015e"+
    "\21\3\2\0\10\3\10\0\4\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14535];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\1\11\21\1\2\11\15\1\7\11"+
    "\1\1\1\0\1\1\1\11\70\1\2\11\1\1\1\0"+
    "\107\1\1\0\103\1\1\11\144\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[350];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerSQL(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerSQL(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokensSQL yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 61: 
          { lexeme=yytext(); return Array;
          }
        case 106: break;
        case 72: 
          { lexeme=yytext(); return While;
          }
        case 107: break;
        case 89: 
          { lexeme=yytext(); return Binary;
          }
        case 108: break;
        case 3: 
          { lexeme=yytext(); return Identificador;
          }
        case 109: break;
        case 88: 
          { lexeme=yytext(); return Before ;
          }
        case 110: break;
        case 67: 
          { lexeme=yytext(); return Close;
          }
        case 111: break;
        case 104: 
          { lexeme=yytext(); return Contains;
          }
        case 112: break;
        case 51: 
          { lexeme=yytext(); return Last;
          }
        case 113: break;
        case 78: 
          { lexeme=yytext(); return Create;
          }
        case 114: break;
        case 76: 
          { lexeme=yytext(); return Result;
          }
        case 115: break;
        case 75: 
          { lexeme=yytext(); return Exists;
          }
        case 116: break;
        case 23: 
          { lexeme = yytext(); return Op_Atribucion;
          }
        case 117: break;
        case 47: 
          { lexeme=yytext(); return Else;
          }
        case 118: break;
        case 97: 
          { lexeme=yytext(); return Integer;
          }
        case 119: break;
        case 82: 
          { lexeme=yytext(); return Select;
          }
        case 120: break;
        case 58: 
          { lexeme=yytext(); return Goto;
          }
        case 121: break;
        case 45: 
          { lexeme=yytext(); return Then;
          }
        case 122: break;
        case 30: 
          { lexeme=yytext(); return Add;
          }
        case 123: break;
        case 36: 
          { lexeme=yytext(); return Row;
          }
        case 124: break;
        case 62: 
          { lexeme=yytext(); return Alter;
          }
        case 125: break;
        case 52: 
          { lexeme=yytext(); return Loop;
          }
        case 126: break;
        case 15: 
          { lexeme=yytext(); return Parentesis_Izq;
          }
        case 127: break;
        case 5: 
          { /*Ignore*/
          }
        case 128: break;
        case 42: 
          { lexeme=yytext(); return Full;
          }
        case 129: break;
        case 96: 
          { lexeme=yytext(); return Convert;
          }
        case 130: break;
        case 18: 
          { lexeme=yytext(); return Llave_Der;
          }
        case 131: break;
        case 48: 
          { lexeme=yytext(); return Exit;
          }
        case 132: break;
        case 54: 
          { lexeme=yytext(); return Open;
          }
        case 133: break;
        case 49: 
          { lexeme=yytext(); return Name;
          }
        case 134: break;
        case 80: 
          { lexeme=yytext(); return Commit;
          }
        case 135: break;
        case 60: 
          { lexeme=yytext(); return After;
          }
        case 136: break;
        case 83: 
          { lexeme=yytext(); return Schema;
          }
        case 137: break;
        case 56: 
          { lexeme=yytext(); return View;
          }
        case 138: break;
        case 68: 
          { lexeme=yytext(); return Count;
          }
        case 139: break;
        case 98: 
          { lexeme=yytext(); return Boolean;
          }
        case 140: break;
        case 102: 
          { lexeme=yytext(); return Rollback;
          }
        case 141: break;
        case 2: 
          { return ERROR;
          }
        case 142: break;
        case 59: 
          { lexeme = yytext(); return Op_Booleano;
          }
        case 143: break;
        case 13: 
          { lexeme=yytext(); return Op_Multiplicacion;
          }
        case 144: break;
        case 57: 
          { lexeme=yytext(); return  When;
          }
        case 145: break;
        case 38: 
          { lexeme=yytext(); return Date;
          }
        case 146: break;
        case 100: 
          { lexeme=yytext(); return Arraylen;
          }
        case 147: break;
        case 39: 
          { lexeme=yytext(); return Desc;
          }
        case 148: break;
        case 31: 
          { lexeme=yytext(); return Any;
          }
        case 149: break;
        case 21: 
          { lexeme=yytext(); return P_Coma;
          }
        case 150: break;
        case 43: 
          { lexeme=yytext(); return Trim;
          }
        case 151: break;
        case 93: 
          { lexeme=yytext(); return Trigger;
          }
        case 152: break;
        case 19: 
          { lexeme = yytext(); return Corchete_Izq;
          }
        case 153: break;
        case 87: 
          { lexeme=yytext(); return Values;
          }
        case 154: break;
        case 86: 
          { lexeme=yytext(); return Insert;
          }
        case 155: break;
        case 77: 
          { lexeme=yytext(); return Number;
          }
        case 156: break;
        case 22: 
          { lexeme=yytext(); return Dos_Puntos;
          }
        case 157: break;
        case 40: 
          { lexeme=yytext(); return Dual ;
          }
        case 158: break;
        case 95: 
          { lexeme=yytext(); return Cluster;
          }
        case 159: break;
        case 79: 
          { lexeme=yytext(); return Column;
          }
        case 160: break;
        case 84: 
          { lexeme=yytext(); return Others;
          }
        case 161: break;
        case 16: 
          { lexeme=yytext(); return Parentesis_Der;
          }
        case 162: break;
        case 11: 
          { lexeme=yytext(); return Op_Suma;
          }
        case 163: break;
        case 65: 
          { lexeme=yytext(); return Elsif;
          }
        case 164: break;
        case 1: 
          { lexeme=yytext(); return Texto;
          }
        case 165: break;
        case 50: 
          { lexeme=yytext(); return Next;
          }
        case 166: break;
        case 64: 
          { lexeme=yytext(); return Table;
          }
        case 167: break;
        case 90: 
          { lexeme=yytext(); return Return;
          }
        case 168: break;
        case 85: 
          { lexeme=yytext(); return Object;
          }
        case 169: break;
        case 6: 
          { lexeme=yytext(); return Op_Division;
          }
        case 170: break;
        case 70: 
          { lexeme=yytext(); return Index;
          }
        case 171: break;
        case 4: 
          { lexeme=yytext(); return Numero;
          }
        case 172: break;
        case 74: 
          { lexeme=yytext(); return Delete;
          }
        case 173: break;
        case 34: 
          { lexeme=yytext(); return For;
          }
        case 174: break;
        case 94: 
          { lexeme=yytext(); return Numeric;
          }
        case 175: break;
        case 9: 
          { lexeme=yytext(); return Punto;
          }
        case 176: break;
        case 26: 
          { lexeme=yytext(); return If;
          }
        case 177: break;
        case 44: 
          { lexeme=yytext(); return Type;
          }
        case 178: break;
        case 63: 
          { lexeme=yytext(); return First;
          }
        case 179: break;
        case 66: 
          { lexeme=yytext(); return Nchar;
          }
        case 180: break;
        case 7: 
          { return Linea;
          }
        case 181: break;
        case 55: 
          { lexeme=yytext(); return Into;
          }
        case 182: break;
        case 99: 
          { lexeme=yytext(); return Primary;
          }
        case 183: break;
        case 12: 
          { lexeme=yytext(); return Op_Resta;
          }
        case 184: break;
        case 81: 
          { lexeme=yytext(); return Update;
          }
        case 185: break;
        case 91: 
          { lexeme=yytext(); return Default;
          }
        case 186: break;
        case 73: 
          { lexeme=yytext(); return Prior;
          }
        case 187: break;
        case 37: 
          { lexeme=yytext(); return  New;
          }
        case 188: break;
        case 105: 
          { lexeme=yytext(); return Savepoint;
          }
        case 189: break;
        case 101: 
          { lexeme=yytext(); return Function;
          }
        case 190: break;
        case 53: 
          { lexeme=yytext(); return Char;
          }
        case 191: break;
        case 46: 
          { lexeme=yytext(); return Each;
          }
        case 192: break;
        case 69: 
          { lexeme=yytext(); return Order;
          }
        case 193: break;
        case 27: 
          { lexeme=yytext(); return By;
          }
        case 194: break;
        case 71: 
          { lexeme=yytext(); return Begin;
          }
        case 195: break;
        case 10: 
          { lexeme=yytext(); return Op_Igual;
          }
        case 196: break;
        case 24: 
          { lexeme=yytext(); return As;
          }
        case 197: break;
        case 32: 
          { lexeme=yytext(); return Asc;
          }
        case 198: break;
        case 8: 
          { lexeme=yytext(); return Comillas;
          }
        case 199: break;
        case 20: 
          { lexeme = yytext(); return Corchete_Der;
          }
        case 200: break;
        case 28: 
          { lexeme = yytext(); return Op_Incremento;
          }
        case 201: break;
        case 14: 
          { lexeme = yytext(); return Op_Relacional;
          }
        case 202: break;
        case 29: 
          { lexeme=yytext(); return Real;
          }
        case 203: break;
        case 41: 
          { lexeme=yytext(); return From;
          }
        case 204: break;
        case 17: 
          { lexeme=yytext(); return Llave_Izq;
          }
        case 205: break;
        case 33: 
          { lexeme=yytext(); return Day;
          }
        case 206: break;
        case 25: 
          { lexeme=yytext(); return Op_Logico;
          }
        case 207: break;
        case 35: 
          { lexeme=yytext(); return End;
          }
        case 208: break;
        case 103: 
          { lexeme=yytext(); return Varchar2;
          }
        case 209: break;
        case 92: 
          { lexeme=yytext(); return Declare;
          }
        case 210: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
