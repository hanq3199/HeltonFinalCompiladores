/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigoHTML;

import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;

/**
 *
 * @author jcora
 */
public class FrmInicioHTML extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
   public FrmInicioHTML() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnArchivo = new javax.swing.JButton();
        btnAnalizarLex = new javax.swing.JButton();
        btnAnalizarSin = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAnalizadorSin = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAnalizadorLex = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnArchivo.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        btnArchivo.setText("Abrir Archivo");
        btnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnArchivoActionPerformed(evt);
            }
        });

        btnAnalizarLex.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        btnAnalizarLex.setText("Analizar Lexico");
        btnAnalizarLex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarLexActionPerformed(evt);
            }
        });

        btnAnalizarSin.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        btnAnalizarSin.setText("Analizar Sintactico");
        btnAnalizarSin.setActionCommand("");
        btnAnalizarSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarSinActionPerformed(evt);
            }
        });

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        txtAnalizadorSin.setColumns(20);
        txtAnalizadorSin.setRows(5);
        jScrollPane2.setViewportView(txtAnalizadorSin);

        txtAnalizadorLex.setColumns(20);
        txtAnalizadorLex.setRows(5);
        jScrollPane3.setViewportView(txtAnalizadorLex);

        jLabel1.setFont(new java.awt.Font("Imprint MT Shadow", 0, 36)); // NOI18N
        jLabel1.setText("Analizador Sintactico");

        jLabel2.setFont(new java.awt.Font("Imprint MT Shadow", 0, 36)); // NOI18N
        jLabel2.setText("Analizador Lexico");

        jButton1.setFont(new java.awt.Font("Georgia", 0, 18)); // NOI18N
        jButton1.setText("Limpiar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAnalizarLex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAnalizarSin)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 34, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(47, 47, 47))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(68, 68, 68))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnArchivo)
                            .addComponent(btnAnalizarSin)
                            .addComponent(btnAnalizarLex)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarLexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarLexActionPerformed
       int cont = 1;
        
        String expr = (String) txtResultado.getText();
        LexerHTML lexer = new LexerHTML(new StringReader(expr));
        String resultado = "LINEA " + cont + "\t\tSIMBOLO\n";
        while (true) {
            TokensH token = null;
           try {
               token = lexer.yylex();
           } catch (IOException ex) {
               Logger.getLogger(FrmInicioHTML.class.getName()).log(Level.SEVERE, null, ex);
           }
            if (token == null) {
                txtAnalizadorLex.setText(resultado);
                return;
            }
            switch (token) {
                case Linea:
                    cont++;
                    resultado += "LINEA " + cont + "\n";
                    break;
                case Comillas:
                    resultado += "  <Palabra reservada Comillas>\t\t" + lexer.lexeme + "\n";
                    break;
                case Address:
                    resultado += "  <Palabra reservada Addres>\t\t" + lexer.lexeme + "\n";
                    break;
                case Appelt:
                    resultado += "  <Palabra reservada Appelt>\t\t" + lexer.lexeme + "\n";
                    break;
                case Area:
                    resultado += "  <Palabra reservada Area>\t\t" + lexer.lexeme + "\n";
                    break; 
                case Basefont:
                    resultado += "  <Palabra reservada Basefont>\t\t" + lexer.lexeme + "\n";
                    break; 
                case Big:
                    resultado += "  <Palabra reservada Big>\t\t" + lexer.lexeme + "\n";
                    break;
                case Punto:
                    resultado += "  <Palabra reservada Punto>\t\t" + lexer.lexeme + "\n";
                    break;
                case Blockquote:
                    resultado += "  <Palabra reservada Blockquote>\t\t" + lexer.lexeme + "\n";
                    break;
                case Br:
                    resultado += "  <Palabra reservada Br>\t\t" + lexer.lexeme + "\n";
                    break;
                case B:
                    resultado += "  <Palabra reservada B>\t\t" + lexer.lexeme + "\n";
                    break;   
                 case Caption:
                    resultado += "  <Palabra reservada Caption>\t\t" + lexer.lexeme + "\n";
                    break;   
                 case Center:
                    resultado += "  <Palabra reservada Center>\t\t" + lexer.lexeme + "\n";
                    break;   
                case Cite:
                    resultado += "  <Palabra reservada Cite>\t\t" + lexer.lexeme + "\n";
                    break;   
                case Dd:
                    resultado += "  <Palabra reservada Dd>\t\t" + lexer.lexeme + "\n";
                    break;
                case Dfn:
                    resultado += "  <Palabra reservada Dfn>\t\t" + lexer.lexeme + "\n";
                    break;
                case Dir:
                    resultado += "  <Palabra reservada Dir>\t\t" + lexer.lexeme + "\n";
                    break;
                case Div:
                    resultado += "  <Palabra reservada Div>\t\t" + lexer.lexeme + "\n";
                    break;
                case Dl:
                    resultado += "  <Palabra reservada Dl>\t\t" + lexer.lexeme + "\n";
                    break;
                case Em:
                    resultado += "  <Palabra reservada Em>\t\t" + lexer.lexeme + "\n";
                    break;
                case Font:
                    resultado += "  <Palabra reservada Font>\t\t" + lexer.lexeme + "\n";
                    break;
                case Form:
                    resultado += "  <Palabra reservada Form>\t\t" + lexer.lexeme + "\n";
                    break;   
                case H1:
                    resultado += "  <Palabra reservada H1>\t\t" + lexer.lexeme + "\n";
                    break;   
                case H2:
                    resultado += "  <Palabra reservada H2>\t\t" + lexer.lexeme + "\n";
                    break;  
                case H3:
                    resultado += "  <Palabra reservada H3>\t\t" + lexer.lexeme + "\n";
                    break;   
                case H4:
                    resultado += "  <Palabra reservada H4>\t\t" + lexer.lexeme + "\n";
                    break;   
                case H5:
                    resultado += "  <Palabra reservada H5>\t\t" + lexer.lexeme + "\n";
                    break;   
                case H6:
                    resultado += "  <Palabra reservada H6>\t\t" + lexer.lexeme + "\n";
                    break;   
                case Head:
                    resultado += "  <Palabra reservada Head>\t\t" + lexer.lexeme + "\n";
                    break;   
                case Input:
                    resultado += "  <Palabra reservada Input>\t\t" + lexer.lexeme + "\n";
                    break;   
                case Isindex:
                    resultado += "  <Palabra reservada Isindex>\t\t" + lexer.lexeme + "\n";
                    break;       
                case I:
                    resultado += "  <Palabra reservada I>\t" + lexer.lexeme + "\n";
                    break;
                case Body:
                    resultado += "  <Palabra reservada BODY\t" + lexer.lexeme + "\n";
                    break;
                case Title:
                    resultado += "  <Palabra reservada TITLE>\t" + lexer.lexeme + "\n";
                    break;
                case Kbd:
                    resultado += "  <Reservada Kbd>\t" + lexer.lexeme + "\n";
                    break;
                case Link:
                    resultado += "  <Reservada Link>\t" + lexer.lexeme + "\n";
                    break;
                case Li:
                    resultado += "  <Reservada Li>\t" + lexer.lexeme + "\n";
                    break;
                case Map:
                    resultado += "  <Reservada Map>\t" + lexer.lexeme + "\n";
                    break;
                case Menu:
                    resultado += "  <Reservada Menu>\t" + lexer.lexeme + "\n";
                    break;
                case Meta:
                    resultado += "  <Reservada Meta>\t" + lexer.lexeme + "\n";
                    break;
                case Ol:
                    resultado += "  <Reservada Ol>\t" + lexer.lexeme + "\n";
                    break;
                case Option:
                    resultado += "  <Reservada Option>\t" + lexer.lexeme + "\n";
                    break;
                case Param:
                    resultado += "  <Reservada Param>\t" + lexer.lexeme + "\n";
                    break;    
                case Op_Igual:
                    resultado += "  <Operador igual>\t" + lexer.lexeme + "\n";
                    break;
                case Op_Suma:
                    resultado += "  <Operador suma>\t" + lexer.lexeme + "\n";
                    break;
                case Op_Resta:
                    resultado += "  <Operador resta>\t" + lexer.lexeme + "\n";
                    break;
                case Op_Multiplicacion:
                    resultado += "  <Operador multiplicacion>\t" + lexer.lexeme + "\n";
                    break;
                case Op_Division:
                    resultado += "  <Operador division>\t" + lexer.lexeme + "\n";
                    break;
                case Op_Logico:
                    resultado += "  <Operador logico>\t" + lexer.lexeme + "\n";
                    break;
                case Op_Incremento:
                    resultado += "  <Operador incremento>\t" + lexer.lexeme + "\n";
                    break;
                case Op_Relacional:
                    resultado += "  <Operador relacional>\t" + lexer.lexeme + "\n";
                    break;
                case Op_Atribucion:
                    resultado += "  <Operador atribucion>\t" + lexer.lexeme + "\n";
                    break;
                case Op_Booleano:
                    resultado += "  <Operador booleano>\t" + lexer.lexeme + "\n";
                    break;
                case Parentesis_Izq:
                    resultado += "  <Parentesis de apertura>\t" + lexer.lexeme + "\n";
                    break;
                case Parentesis_Der:
                    resultado += "  <Parentesis de cierre>\t" + lexer.lexeme + "\n";
                    break;
                case Llave_Izq:
                    resultado += "  <Llave de apertura>\t" + lexer.lexeme + "\n";
                    break;
                case Llave_Der:
                    resultado += "  <Llave de cierre>\t" + lexer.lexeme + "\n";
                    break;
                case Corchete_Izq:
                    resultado += "  <Corchete de apertura>\t" + lexer.lexeme + "\n";
                    break;
                case Corchete_Der:
                    resultado += "  <Corchete de cierre>\t" + lexer.lexeme + "\n";
                    break;
                case P:
                    resultado += "  <Reservada P>\t" + lexer.lexeme + "\n";
                    break;
                case P_Coma:
                    resultado += "  <Separador>\t" + lexer.lexeme + "\n";
                    break;
                case Identificador:
                    resultado += "  <Identificador>\t\t" + lexer.lexeme + "\n";
                    break;
                case Numero:
                    resultado += "  <Numero>\t\t" + lexer.lexeme + "\n";
                    break;
                case ERROR:
                    resultado += "  <Simbolo no definido>\n";
                    break;
                default:
                    resultado += "  < " + lexer.lexeme + " >\n";
                    break;
            }
    }//GEN-LAST:event_btnAnalizarLexActionPerformed
 }                                              

    private void btnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnArchivoActionPerformed
      JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
        
        try {
            String ST = new String(Files.readAllBytes(archivo.toPath()));
           txtResultado.setText(ST);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmInicioHTML.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmInicioHTML.class.getName()).log(Level.SEVERE, null, ex);
        }
                // TODO add your handling code here:
    }//GEN-LAST:event_btnArchivoActionPerformed

    private void btnAnalizarSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarSinActionPerformed
 String ST = txtResultado.getText();
        SintacticoH s = new SintacticoH(new codigo.LexerCup(new StringReader(ST)));
        
        try {
            s.parse();
            txtAnalizadorSin.setText("Analisis realizado correctamente");
            txtAnalizadorSin.setForeground(new Color(25, 111, 61));
        } catch (Exception ex) {
            Symbol sym = s.getS();
            txtAnalizadorSin.setText("Error de sintaxis. Linea: " + (sym.right + 1) + " Columna: " + (sym.left + 1) + ", Texto: \"" + sym.value + "\"");
            txtAnalizadorSin.setForeground(Color.red);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_btnAnalizarSinActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          txtAnalizadorLex.setText(null);
          txtAnalizadorSin.setText(null);
    }//GEN-LAST:event_jButton1ActionPerformed
                                            

    /**
     * @param args the command line arguments
     */
 public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.FrmInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.FrmInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.FrmInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.FrmInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    
    }
     public void correrInterfazHTML() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.FrmInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.FrmInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.FrmInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.FrmInicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmInicioHTML().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizarLex;
    private javax.swing.JButton btnAnalizarSin;
    private javax.swing.JButton btnArchivo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea txtAnalizadorLex;
    private javax.swing.JTextArea txtAnalizadorSin;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
