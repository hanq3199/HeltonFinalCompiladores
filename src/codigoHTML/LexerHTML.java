/* The following code was generated by JFlex 1.4.3 on 28/05/21 11:27 PM */

package codigoHTML;
import static codigoHTML.TokensH.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/05/21 11:27 PM from the specification file
 * <tt>LexerH.flex</tt>
 */
class LexerHTML {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\61\1\6\2\0"+
    "\1\62\2\0\1\63\1\64\1\50\1\46\1\3\1\47\1\25\1\4"+
    "\1\2\1\36\1\37\1\40\1\41\1\42\1\43\3\2\1\72\1\71"+
    "\1\60\1\45\1\57\2\0\1\51\2\1\1\53\11\1\1\52\1\54"+
    "\2\1\1\55\1\1\1\56\6\1\1\67\1\0\1\70\1\0\1\1"+
    "\1\0\1\7\1\17\1\26\1\10\1\12\1\20\1\24\1\35\1\23"+
    "\1\1\1\27\1\15\1\34\1\22\1\21\1\14\1\30\1\11\1\13"+
    "\1\16\1\31\1\33\1\1\1\44\1\32\1\1\1\65\1\0\1\66"+
    "\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\4\3\1\11\2\3\1\12\3\3\1\13\1\14\2\3"+
    "\1\15\3\3\1\16\1\17\1\20\1\21\3\3\2\22"+
    "\2\2\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\1\1\0\1\5\1\33\4\3\1\34\1\35"+
    "\2\3\1\36\10\3\1\37\1\3\1\40\1\41\1\3"+
    "\1\42\1\3\1\43\1\3\1\44\6\3\1\45\10\3"+
    "\1\46\3\3\1\47\2\3\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\22\1\56\2\3\1\57\1\0\1\60"+
    "\4\3\1\61\1\62\1\63\5\3\1\64\1\65\2\3"+
    "\1\66\11\3\1\67\7\3\1\70\4\3\1\71\1\72"+
    "\1\73\4\3\1\0\1\3\1\74\1\3\1\75\1\76"+
    "\7\3\1\77\1\3\1\100\2\3\1\101\1\102\1\3"+
    "\1\103\1\104\1\105\6\3\1\106\1\107\1\110\1\111"+
    "\1\112\1\113\1\4\2\3\1\114\2\3\1\115\1\3"+
    "\1\116\1\117\1\120\1\3\1\121\5\3\1\122\3\3"+
    "\1\123\1\124\1\125\1\126\3\3\1\127\3\3\1\130"+
    "\1\131\4\3\1\132\1\133\1\134\1\135\1\3\1\136"+
    "\1\3\1\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\73\0\73"+
    "\0\u0162\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\73\0\u0426\0\u0461\0\u049c"+
    "\0\u04d7\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\u0725\0\u0760\0\u0588\0\u0639\0\u079b\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\73\0\u07d6\0\u0811"+
    "\0\u084c\0\73\0\u0887\0\u08c2\0\u08fd\0\u0938\0\166\0\166"+
    "\0\u0973\0\u09ae\0\166\0\u09e9\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\166\0\u0c37\0\u0c72"+
    "\0\166\0\u0cad\0\166\0\u0ce8\0\166\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\166\0\u0e85\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\166\0\u105d\0\u1098\0\u10d3"+
    "\0\166\0\u110e\0\u1149\0\166\0\166\0\166\0\166\0\166"+
    "\0\166\0\73\0\73\0\u1184\0\u11bf\0\166\0\u11fa\0\u0811"+
    "\0\u1235\0\u1270\0\u12ab\0\u12e6\0\166\0\166\0\166\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\166\0\166\0\u1448\0\u1483"+
    "\0\166\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\166\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\166\0\u186e\0\u18a9\0\u18e4\0\u191f\0\166"+
    "\0\166\0\166\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81"+
    "\0\166\0\u1abc\0\166\0\166\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\166\0\u1c94\0\166\0\u1ccf\0\u1d0a"+
    "\0\166\0\u1d45\0\u1d80\0\166\0\166\0\166\0\u1dbb\0\u1df6"+
    "\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\166\0\166\0\166\0\166"+
    "\0\166\0\166\0\73\0\u1f1d\0\u1f58\0\166\0\u1f93\0\u1fce"+
    "\0\166\0\u2009\0\166\0\166\0\166\0\u2044\0\166\0\u207f"+
    "\0\u20ba\0\u20f5\0\u2130\0\u216b\0\166\0\u21a6\0\u21e1\0\u221c"+
    "\0\166\0\166\0\166\0\166\0\u2257\0\u2292\0\u22cd\0\166"+
    "\0\u2308\0\u2343\0\u237e\0\166\0\166\0\u23b9\0\u23f4\0\u242f"+
    "\0\u246a\0\166\0\166\0\166\0\166\0\u24a5\0\166\0\u24e0"+
    "\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\3\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\3\1\25\1\26\1\27"+
    "\1\3\1\30\1\3\1\31\1\32\1\33\6\4\1\3"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\3\1\42"+
    "\2\3\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\74\0\2\3\1\57"+
    "\3\0\16\3\1\0\17\3\4\0\6\3\15\0\1\57"+
    "\1\4\1\57\3\0\16\57\1\60\10\57\6\4\1\57"+
    "\4\0\6\57\15\0\2\57\1\5\3\0\16\57\1\0"+
    "\17\57\4\0\6\57\20\0\1\61\40\0\1\62\26\0"+
    "\2\3\1\57\3\0\1\3\1\63\1\64\2\3\1\65"+
    "\10\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\1\66\1\67\4\3\1\70\2\3\1\71\2\3"+
    "\1\72\1\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\16\3\1\0\6\3\1\73\10\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\1\74\5\3\1\75"+
    "\1\76\6\3\1\0\1\77\2\3\1\100\2\3\1\101"+
    "\10\3\4\0\6\3\15\0\2\3\1\57\3\0\1\102"+
    "\1\3\1\103\13\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\14\3\1\104\1\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\1\105\1\106"+
    "\1\107\1\110\3\3\1\111\4\3\1\112\1\3\1\0"+
    "\7\3\1\113\7\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\1\114\1\3\1\115\3\3\1\116\3\3\1\117"+
    "\1\3\1\120\1\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\1\121\11\3\1\122\3\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\5\3"+
    "\1\123\1\124\7\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\12\3\1\125\3\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\4\3\1\126"+
    "\11\3\1\0\6\3\1\127\10\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\1\130\2\3\1\131\6\3\1\132"+
    "\1\3\1\133\1\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\10\3\1\134\5\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\6\3\1\135"+
    "\7\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\1\136\15\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\1\137\2\3\1\140\12\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\2\3"+
    "\1\141\1\142\3\3\1\143\6\3\1\0\10\3\1\144"+
    "\1\145\1\146\1\147\1\150\1\151\1\3\4\0\6\3"+
    "\61\0\1\152\72\0\1\62\1\153\71\0\1\62\1\0"+
    "\1\153\70\0\1\62\26\0\2\3\1\57\3\0\16\3"+
    "\1\0\17\3\4\0\1\3\1\154\4\3\15\0\2\3"+
    "\1\57\3\0\16\3\1\0\17\3\4\0\3\3\1\155"+
    "\2\3\15\0\2\3\1\57\3\0\16\3\1\0\17\3"+
    "\4\0\4\3\1\156\1\3\61\0\1\152\11\0\1\152"+
    "\60\0\1\152\12\0\1\152\61\0\1\157\24\0\3\57"+
    "\3\0\16\57\1\0\17\57\4\0\6\57\16\0\1\160"+
    "\33\0\6\160\27\0\5\61\1\0\65\61\1\0\2\3"+
    "\1\57\3\0\1\3\1\161\14\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\3\3\1\162\12\3"+
    "\1\0\17\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\5\3\1\163\10\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\7\3\1\164\6\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\13\3\1\165"+
    "\2\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\2\3\1\166\13\3\1\0\5\3\1\167\11\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\16\3\1\0"+
    "\6\3\1\170\10\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\3\3\1\171\12\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\2\3\1\172\13\3\1\0"+
    "\4\3\1\173\12\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\2\3\1\174\13\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\5\3\1\175\2\3\1\176"+
    "\5\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\1\177\15\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\2\3\1\200\13\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\3\3\1\201"+
    "\12\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\13\3\1\202\2\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\10\3\1\203\5\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\16\3"+
    "\1\0\3\3\1\204\13\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\16\3\1\0\16\3\1\205\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\7\3\1\206\6\3\1\0"+
    "\6\3\1\207\10\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\4\3\1\210\11\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\12\3\1\211\3\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\1\3"+
    "\1\212\14\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\15\3\1\213\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\6\3\1\214\7\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\2\3"+
    "\1\215\10\3\1\216\2\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\7\3\1\217\6\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\4\3"+
    "\1\220\11\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\14\3\1\221\1\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\5\3\1\222\7\3"+
    "\1\223\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\5\3\1\224\10\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\13\3\1\225\2\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\1\3"+
    "\1\226\14\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\7\3\1\227\6\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\1\3\1\230\14\3"+
    "\1\0\17\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\2\3\1\231\13\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\5\3\1\232\10\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\7\3\1\233"+
    "\3\3\1\234\2\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\1\235\15\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\16\3\1\0\6\3"+
    "\1\236\10\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\16\3\1\0\17\3\4\0\2\3\1\156\3\3\15\0"+
    "\2\3\1\57\3\0\16\3\1\0\17\3\4\0\5\3"+
    "\1\156\16\0\1\237\33\0\6\237\30\0\2\3\1\57"+
    "\3\0\2\3\1\240\13\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\1\241\15\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\3\3\1\242"+
    "\12\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\1\243\15\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\5\3\1\244\10\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\16\3\1\0"+
    "\1\245\16\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\12\3\1\246\1\3\1\247\1\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\5\3\1\250\10\3"+
    "\1\0\17\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\14\3\1\251\1\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\6\3\1\252\7\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\1\253\15\3"+
    "\1\0\17\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\16\3\1\0\1\3\1\254\15\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\6\3\1\255\7\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\3\3\1\256"+
    "\12\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\7\3\1\257\6\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\6\3\1\260\7\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\3\3"+
    "\1\261\12\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\3\3\1\262\12\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\16\3\1\0\1\263"+
    "\16\3\4\0\6\3\15\0\2\3\1\57\3\0\16\3"+
    "\1\0\4\3\1\264\12\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\4\3\1\204\11\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\16\3\1\0\6\3"+
    "\1\265\10\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\7\3\1\266\6\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\14\3\1\267\1\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\16\3\1\0"+
    "\1\270\16\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\13\3\1\271\2\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\16\3\1\0\3\3\1\272\13\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\7\3\1\273"+
    "\6\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\7\3\1\274\6\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\3\3\1\275\12\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\3\3"+
    "\1\276\12\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\1\277\15\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\16\3\1\0\3\3\1\300"+
    "\13\3\4\0\6\3\15\0\2\3\1\57\3\0\1\3"+
    "\1\301\14\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\6\3\1\302\7\3\1\0\17\3\4\0"+
    "\6\3\16\0\1\237\33\0\6\237\20\0\1\303\7\0"+
    "\2\3\1\57\3\0\3\3\1\304\12\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\6\3\1\305"+
    "\7\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\7\3\1\306\6\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\13\3\1\307\2\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\16\3"+
    "\1\0\1\3\1\310\15\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\3\3\1\311\12\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\5\3\1\312\10\3"+
    "\1\0\17\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\6\3\1\313\7\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\16\3\1\0\6\3\1\314\10\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\3\3\1\315"+
    "\12\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\1\316\15\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\3\3\1\317\12\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\11\3\1\320"+
    "\4\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\16\3\1\0\1\3\1\321\15\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\12\3\1\322\3\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\2\3"+
    "\1\323\13\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\1\3\1\324\14\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\7\3\1\325\6\3"+
    "\1\0\17\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\14\3\1\326\1\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\3\3\1\327\12\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\4\3\1\330"+
    "\11\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\7\3\1\331\6\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\15\3\1\332\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\3\3\1\333"+
    "\12\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\7\3\1\334\6\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\2\3\1\335\13\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\12\3"+
    "\1\336\3\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\16\3\1\0\2\3\1\337\14\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\13\3\1\340\2\3"+
    "\1\0\17\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\14\3\1\341\1\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\3\3\1\342\12\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\12\3\1\343"+
    "\3\3\1\0\17\3\4\0\6\3\15\0\2\3\1\57"+
    "\3\0\2\3\1\344\13\3\1\0\17\3\4\0\6\3"+
    "\15\0\2\3\1\57\3\0\4\3\1\345\11\3\1\0"+
    "\17\3\4\0\6\3\15\0\2\3\1\57\3\0\3\3"+
    "\1\346\12\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\13\3\1\347\2\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\16\3\1\0\3\3"+
    "\1\350\13\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\5\3\1\351\10\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\16\3\1\0\16\3\1\352\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\13\3\1\353\2\3"+
    "\1\0\17\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\1\354\15\3\1\0\17\3\4\0\6\3\15\0\2\3"+
    "\1\57\3\0\7\3\1\355\6\3\1\0\17\3\4\0"+
    "\6\3\15\0\2\3\1\57\3\0\12\3\1\356\3\3"+
    "\1\0\17\3\4\0\6\3\15\0\2\3\1\57\3\0"+
    "\7\3\1\357\6\3\1\0\17\3\4\0\6\3\15\0"+
    "\2\3\1\57\3\0\7\3\1\360\6\3\1\0\17\3"+
    "\4\0\6\3\15\0\2\3\1\57\3\0\3\3\1\361"+
    "\12\3\1\0\17\3\4\0\6\3\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9499];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\4\1\2\11\14\1\1\11\22\1\7\11"+
    "\1\1\1\0\1\1\1\11\67\1\2\11\3\1\1\0"+
    "\57\1\1\0\43\1\1\11\56\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerHTML(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerHTML(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokensH yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 42: 
          { lexeme=yytext(); return H3;
          }
        case 96: break;
        case 3: 
          { lexeme=yytext(); return Identificador;
          }
        case 97: break;
        case 72: 
          { lexeme=yytext(); return Meta;
          }
        case 98: break;
        case 70: 
          { lexeme=yytext(); return Code;
          }
        case 99: break;
        case 35: 
          { lexeme=yytext(); return Th;
          }
        case 100: break;
        case 27: 
          { lexeme = yytext(); return Op_Atribucion;
          }
        case 101: break;
        case 78: 
          { lexeme=yytext(); return Small;
          }
        case 102: break;
        case 74: 
          { lexeme=yytext(); return Head;
          }
        case 103: break;
        case 11: 
          { lexeme=yytext(); return I;
          }
        case 104: break;
        case 34: 
          { lexeme=yytext(); return Tt;
          }
        case 105: break;
        case 60: 
          { lexeme=yytext(); return Area;
          }
        case 106: break;
        case 31: 
          { lexeme=yytext(); return Li;
          }
        case 107: break;
        case 13: 
          { lexeme=yytext(); return U;
          }
        case 108: break;
        case 52: 
          { lexeme=yytext(); return Sup;
          }
        case 109: break;
        case 82: 
          { lexeme=yytext(); return  Input;
          }
        case 110: break;
        case 51: 
          { lexeme=yytext(); return Div;
          }
        case 111: break;
        case 41: 
          { lexeme=yytext(); return H2;
          }
        case 112: break;
        case 94: 
          { lexeme=yytext(); return Noscript;
          }
        case 113: break;
        case 88: 
          { lexeme=yytext(); return Center;
          }
        case 114: break;
        case 28: 
          { lexeme=yytext(); return Dd;
          }
        case 115: break;
        case 19: 
          { lexeme=yytext(); return Parentesis_Izq;
          }
        case 116: break;
        case 5: 
          { /*Ignore*/
          }
        case 117: break;
        case 10: 
          { lexeme=yytext(); return B;
          }
        case 118: break;
        case 22: 
          { lexeme=yytext(); return Llave_Der;
          }
        case 119: break;
        case 40: 
          { lexeme=yytext(); return H1;
          }
        case 120: break;
        case 2: 
          { return ERROR;
          }
        case 121: break;
        case 71: 
          { lexeme=yytext(); return Cite;
          }
        case 122: break;
        case 86: 
          { lexeme=yytext(); return Script;
          }
        case 123: break;
        case 84: 
          { lexeme=yytext(); return Strong;
          }
        case 124: break;
        case 66: 
          { lexeme=yytext(); return Base;
          }
        case 125: break;
        case 65: 
          { lexeme=yytext(); return Time;
          }
        case 126: break;
        case 77: 
          { lexeme=yytext(); return Stype;
          }
        case 127: break;
        case 64: 
          { lexeme = yytext(); return Op_Booleano;
          }
        case 128: break;
        case 17: 
          { lexeme=yytext(); return Op_Multiplicacion;
          }
        case 129: break;
        case 33: 
          { lexeme=yytext(); return Tr;
          }
        case 130: break;
        case 53: 
          { lexeme=yytext(); return Sub;
          }
        case 131: break;
        case 63: 
          { lexeme=yytext(); return Link ;
          }
        case 132: break;
        case 25: 
          { lexeme=yytext(); return P_Coma;
          }
        case 133: break;
        case 95: 
          { lexeme=yytext(); return Blockquote;
          }
        case 134: break;
        case 38: 
          { lexeme=yytext(); return UL ;
          }
        case 135: break;
        case 57: 
          { lexeme=yytext(); return Kbd;
          }
        case 136: break;
        case 23: 
          { lexeme = yytext(); return Corchete_Izq;
          }
        case 137: break;
        case 79: 
          { lexeme=yytext(); return Param;
          }
        case 138: break;
        case 45: 
          { lexeme=yytext(); return H6;
          }
        case 139: break;
        case 58: 
          { lexeme=yytext(); return Var;
          }
        case 140: break;
        case 55: 
          { lexeme=yytext(); return Big;
          }
        case 141: break;
        case 26: 
          { lexeme=yytext(); return Dos_Puntos;
          }
        case 142: break;
        case 37: 
          { lexeme=yytext(); return Ol;
          }
        case 143: break;
        case 49: 
          { lexeme=yytext(); return Dfn;
          }
        case 144: break;
        case 62: 
          { lexeme=yytext(); return Samp;
          }
        case 145: break;
        case 89: 
          { lexeme=yytext(); return Address;
          }
        case 146: break;
        case 20: 
          { lexeme=yytext(); return Parentesis_Der;
          }
        case 147: break;
        case 15: 
          { lexeme=yytext(); return Op_Suma;
          }
        case 148: break;
        case 56: 
          { lexeme=yytext(); return Img;
          }
        case 149: break;
        case 1: 
          { lexeme=yytext(); return Texto;
          }
        case 150: break;
        case 61: 
          { lexeme=yytext(); return Data;
          }
        case 151: break;
        case 81: 
          { lexeme=yytext(); return Title;
          }
        case 152: break;
        case 59: 
          { lexeme=yytext(); return Map;
          }
        case 153: break;
        case 85: 
          { lexeme=yytext(); return Strike;
          }
        case 154: break;
        case 91: 
          { lexeme=yytext(); return Caption;
          }
        case 155: break;
        case 80: 
          { lexeme=yytext(); return Table;
          }
        case 156: break;
        case 6: 
          { lexeme=yytext(); return Op_Division;
          }
        case 157: break;
        case 4: 
          { lexeme=yytext(); return Numero;
          }
        case 158: break;
        case 87: 
          { lexeme=yytext(); return Option;
          }
        case 159: break;
        case 32: 
          { lexeme=yytext(); return Td;
          }
        case 160: break;
        case 44: 
          { lexeme=yytext(); return H5;
          }
        case 161: break;
        case 30: 
          { lexeme=yytext(); return Em;
          }
        case 162: break;
        case 12: 
          { lexeme=yytext(); return Punto;
          }
        case 163: break;
        case 69: 
          { lexeme=yytext(); return Font;
          }
        case 164: break;
        case 68: 
          { lexeme=yytext(); return Form;
          }
        case 165: break;
        case 7: 
          { return Linea;
          }
        case 166: break;
        case 90: 
          { lexeme=yytext(); return Isindex;
          }
        case 167: break;
        case 16: 
          { lexeme=yytext(); return Op_Resta;
          }
        case 168: break;
        case 39: 
          { lexeme=yytext(); return Hr;
          }
        case 169: break;
        case 75: 
          { lexeme=yytext(); return Html;
          }
        case 170: break;
        case 50: 
          { lexeme=yytext(); return Dir;
          }
        case 171: break;
        case 14: 
          { lexeme=yytext(); return Op_Igual;
          }
        case 172: break;
        case 43: 
          { lexeme=yytext(); return H4;
          }
        case 173: break;
        case 8: 
          { lexeme=yytext(); return Comillas;
          }
        case 174: break;
        case 24: 
          { lexeme = yytext(); return Corchete_Der;
          }
        case 175: break;
        case 46: 
          { lexeme = yytext(); return Op_Incremento;
          }
        case 176: break;
        case 29: 
          { lexeme=yytext(); return Dl;
          }
        case 177: break;
        case 18: 
          { lexeme = yytext(); return Op_Relacional;
          }
        case 178: break;
        case 48: 
          { lexeme=yytext(); return Real;
          }
        case 179: break;
        case 76: 
          { lexeme=yytext(); return Select ;
          }
        case 180: break;
        case 93: 
          { lexeme=yytext(); return Basefont;
          }
        case 181: break;
        case 21: 
          { lexeme=yytext(); return Llave_Izq;
          }
        case 182: break;
        case 47: 
          { lexeme=yytext(); return Op_Logico;
          }
        case 183: break;
        case 9: 
          { lexeme=yytext(); return P;
          }
        case 184: break;
        case 54: 
          { lexeme=yytext(); return Pre;
          }
        case 185: break;
        case 92: 
          { lexeme=yytext(); return Textarea;
          }
        case 186: break;
        case 73: 
          { lexeme=yytext(); return Menu;
          }
        case 187: break;
        case 67: 
          { lexeme=yytext(); return Body;
          }
        case 188: break;
        case 83: 
          { lexeme=yytext(); return Appelt;
          }
        case 189: break;
        case 36: 
          { lexeme=yytext(); return Br;
          }
        case 190: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
