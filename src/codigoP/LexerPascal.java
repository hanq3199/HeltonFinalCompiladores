/* The following code was generated by JFlex 1.4.3 on 29/05/21 03:25 AM */

package codigoP;
import static codigoP.TokensPascal.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/05/21 03:25 AM from the specification file
 * <tt>LexerPascal.flex</tt>
 */
class LexerPascal {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\1\46\1\6\2\0"+
    "\1\51\1\44\1\0\1\52\1\53\1\43\1\41\1\3\1\42\1\26"+
    "\1\4\12\2\1\62\1\61\1\50\1\40\1\47\2\0\13\1\1\60"+
    "\16\1\1\56\1\0\1\57\1\0\1\1\1\0\1\7\1\10\1\20"+
    "\1\23\1\16\1\30\1\32\1\34\1\21\1\36\1\37\1\13\1\17"+
    "\1\25\1\12\1\31\1\1\1\22\1\11\1\15\1\14\1\35\1\24"+
    "\1\27\1\33\1\1\1\54\1\45\1\55\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\17\2\1\10\5\2\1\11\1\12\1\13\1\14\3\15"+
    "\2\16\1\1\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\0\1\4\1\27\11\2\1\30\1\31"+
    "\3\2\1\32\13\2\1\33\1\34\2\2\1\35\21\2"+
    "\1\16\1\36\1\15\1\0\1\37\1\2\1\40\1\2"+
    "\1\41\2\2\1\42\1\43\1\44\11\2\1\45\1\2"+
    "\1\46\14\2\1\47\3\2\1\50\1\51\1\52\1\2"+
    "\1\53\6\2\1\54\1\2\1\0\6\2\1\55\1\2"+
    "\1\56\1\57\1\60\1\61\1\62\1\2\1\63\14\2"+
    "\1\64\4\2\1\65\4\2\1\66\1\2\1\3\1\2"+
    "\1\67\1\70\2\2\1\71\1\72\1\2\1\73\13\2"+
    "\1\74\1\75\10\2\1\76\1\77\2\2\1\100\1\2"+
    "\1\101\2\2\1\102\1\103\1\104\1\2\1\105\1\106"+
    "\3\2\1\107\14\2\1\110\2\2\1\111\1\112\1\113"+
    "\1\114\1\115\6\2\1\116\3\2\1\117\1\120\1\121"+
    "\1\2\1\122\2\2\1\123\1\124\2\2\1\125";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\63\0\63"+
    "\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\63"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\u05fa\0\u062d\0\u052e\0\u0660\0\u0693\0\u05c7\0\u06c6"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\63\0\u06f9"+
    "\0\u072c\0\63\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e"+
    "\0\u0891\0\u08c4\0\u08f7\0\146\0\146\0\u092a\0\u095d\0\u0990"+
    "\0\146\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\146\0\u0c27\0\u0c5a"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\63\0\63\0\63\0\u1023\0\u06f9\0\u1056"+
    "\0\146\0\u1089\0\146\0\u10bc\0\u10ef\0\146\0\146\0\146"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\146\0\u12ed\0\146\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\u13ec\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\146\0\u1584\0\u15b7\0\u15ea\0\146\0\146\0\146\0\u161d"+
    "\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\146"+
    "\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a"+
    "\0\146\0\u194d\0\146\0\146\0\146\0\146\0\146\0\u1980"+
    "\0\146\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5"+
    "\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\146\0\u1c17\0\u1c4a"+
    "\0\u1c7d\0\u1cb0\0\146\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\146"+
    "\0\u1daf\0\63\0\u1de2\0\146\0\146\0\u1e15\0\u1e48\0\146"+
    "\0\146\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\146\0\146"+
    "\0\u2112\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277"+
    "\0\146\0\146\0\u22aa\0\u22dd\0\146\0\u2310\0\146\0\u2343"+
    "\0\u2376\0\146\0\146\0\146\0\u23a9\0\146\0\146\0\u23dc"+
    "\0\u240f\0\u2442\0\146\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541"+
    "\0\u2574\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\146"+
    "\0\u26d9\0\u270c\0\146\0\146\0\146\0\146\0\146\0\u273f"+
    "\0\u2772\0\u27a5\0\u27d8\0\u280b\0\u283e\0\146\0\u2871\0\u28a4"+
    "\0\u28d7\0\146\0\146\0\146\0\u290a\0\146\0\u293d\0\u2970"+
    "\0\146\0\146\0\u29a3\0\u29d6\0\146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\3\1\35\2\3\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\3\1\56"+
    "\1\57\64\0\2\3\4\0\17\3\1\0\11\3\20\0"+
    "\1\3\4\0\1\4\23\0\1\60\37\0\1\5\63\0"+
    "\1\61\33\0\1\62\23\0\2\3\4\0\1\3\1\63"+
    "\1\64\10\3\1\65\2\3\1\66\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\7\3\1\67\7\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\6\3\1\70"+
    "\1\71\7\3\1\0\5\3\1\72\3\3\20\0\1\3"+
    "\3\0\2\3\4\0\1\3\1\73\11\3\1\74\3\3"+
    "\1\0\1\3\1\75\7\3\20\0\1\3\3\0\2\3"+
    "\4\0\1\76\16\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\2\3\1\77\13\3\1\100\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\3\3\1\101\7\3"+
    "\1\102\3\3\1\0\4\3\1\103\1\104\3\3\20\0"+
    "\1\3\3\0\2\3\4\0\4\3\1\105\11\3\1\106"+
    "\1\0\1\107\10\3\20\0\1\3\3\0\2\3\4\0"+
    "\3\3\1\110\13\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\1\111\2\3\1\112\6\3\1\113\4\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\10\3"+
    "\1\114\5\3\1\115\1\0\1\3\1\116\7\3\20\0"+
    "\1\3\3\0\2\3\4\0\1\117\6\3\1\120\7\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\3\3"+
    "\1\121\3\3\1\122\2\3\1\123\4\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\12\3\1\124\1\125"+
    "\3\3\1\0\5\3\1\126\3\3\20\0\1\3\3\0"+
    "\2\3\4\0\3\3\1\127\6\3\1\130\4\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\3\3\1\131"+
    "\13\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\1\132\2\3\1\133\1\3\1\134\4\3\1\135\4\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\1\136"+
    "\12\3\1\137\3\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\3\3\1\140\13\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\1\141\11\3\1\142\4\3"+
    "\1\0\11\3\20\0\1\3\42\0\1\143\62\0\1\62"+
    "\1\144\61\0\1\62\1\0\1\144\60\0\1\62\66\0"+
    "\1\145\63\0\1\145\55\0\1\143\6\0\1\143\53\0"+
    "\1\143\7\0\1\143\54\0\1\146\22\0\1\147\60\0"+
    "\5\61\1\0\55\61\1\0\2\3\4\0\2\3\1\150"+
    "\14\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\10\3\1\151\6\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\13\3\1\152\3\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\14\3\1\153\2\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\17\3\1\0"+
    "\3\3\1\154\5\3\20\0\1\3\3\0\2\3\4\0"+
    "\13\3\1\155\3\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\6\3\1\156\10\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\4\3\1\157\6\3\1\160"+
    "\3\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\17\3\1\0\7\3\1\161\1\3\20\0\1\3\3\0"+
    "\2\3\4\0\1\3\1\162\15\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\7\3\1\163\7\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\6\3\1\164"+
    "\3\3\1\165\4\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\5\3\1\166\11\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\17\3\1\0\2\3\1\167"+
    "\6\3\20\0\1\3\3\0\2\3\4\0\7\3\1\170"+
    "\7\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\2\3\1\171\14\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\14\3\1\172\2\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\6\3\1\173\10\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\14\3\1\174"+
    "\2\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\2\3\1\175\14\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\16\3\1\176\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\13\3\1\177\3\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\17\3\1\0\2\3"+
    "\1\200\6\3\20\0\1\3\3\0\2\3\4\0\4\3"+
    "\1\201\1\3\1\202\10\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\16\3\1\203\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\1\204\10\3\1\205\5\3"+
    "\1\0\2\3\1\206\6\3\20\0\1\3\3\0\2\3"+
    "\4\0\15\3\1\207\1\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\2\3\1\210\14\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\17\3\1\0\6\3"+
    "\1\211\2\3\20\0\1\3\3\0\2\3\4\0\6\3"+
    "\1\212\10\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\12\3\1\213\4\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\12\3\1\214\4\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\6\3\1\215\10\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\4\3"+
    "\1\216\12\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\13\3\1\217\3\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\4\3\1\220\12\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\13\3\1\221\3\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\16\3"+
    "\1\222\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\4\3\1\223\12\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\11\3\1\224\5\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\3\3\1\225\6\3\1\226"+
    "\4\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\6\3\1\227\10\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\13\3\1\230\3\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\13\3\1\231\3\3\1\0"+
    "\11\3\20\0\1\3\4\0\1\232\61\0\2\3\4\0"+
    "\3\3\1\233\13\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\1\234\16\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\12\3\1\235\4\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\12\3\1\236\4\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\7\3"+
    "\1\237\7\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\7\3\1\240\7\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\2\3\1\241\14\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\12\3\1\242\4\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\6\3"+
    "\1\243\10\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\7\3\1\244\7\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\7\3\1\245\7\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\16\3\1\246\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\7\3\1\247"+
    "\7\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\7\3\1\250\7\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\7\3\1\251\7\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\2\3\1\252\14\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\11\3\1\253"+
    "\5\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\4\3\1\254\12\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\12\3\1\255\4\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\7\3\1\256\7\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\14\3\1\257"+
    "\2\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\14\3\1\260\2\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\3\3\1\261\2\3\1\262\10\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\7\3\1\263"+
    "\7\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\16\3\1\264\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\6\3\1\265\10\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\17\3\1\0\5\3\1\266\3\3"+
    "\20\0\1\3\3\0\2\3\4\0\6\3\1\267\10\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\4\3"+
    "\1\270\12\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\2\3\1\166\14\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\15\3\1\271\1\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\11\3\1\272\5\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\7\3"+
    "\1\273\7\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\17\3\1\0\10\3\1\274\20\0\1\3\3\0"+
    "\2\3\4\0\11\3\1\275\5\3\1\0\3\3\1\276"+
    "\5\3\20\0\1\3\3\0\2\3\4\0\17\3\1\0"+
    "\6\3\1\277\2\3\20\0\1\3\3\0\2\3\4\0"+
    "\3\3\1\300\13\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\6\3\1\301\10\3\1\0\11\3\20\0"+
    "\1\3\4\0\1\232\50\0\1\302\10\0\2\3\4\0"+
    "\4\3\1\303\12\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\17\3\1\0\4\3\1\304\4\3\20\0"+
    "\1\3\3\0\2\3\4\0\16\3\1\305\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\16\3\1\306\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\11\3\1\307"+
    "\5\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\4\3\1\310\12\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\4\3\1\311\12\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\13\3\1\312\3\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\6\3\1\313"+
    "\10\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\4\3\1\314\12\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\7\3\1\315\7\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\16\3\1\316\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\13\3\1\317\3\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\3\3"+
    "\1\320\13\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\17\3\1\0\11\3\20\0\1\321\3\0\2\3"+
    "\4\0\13\3\1\322\3\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\1\323\16\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\1\324\16\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\6\3\1\325\10\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\13\3"+
    "\1\326\3\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\7\3\1\327\7\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\7\3\1\330\7\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\1\331\16\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\6\3\1\332"+
    "\10\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\7\3\1\333\7\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\7\3\1\334\7\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\13\3\1\335\3\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\1\336\16\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\5\3"+
    "\1\337\11\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\5\3\1\340\11\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\17\3\1\0\3\3\1\341\5\3"+
    "\20\0\1\3\3\0\2\3\4\0\6\3\1\342\10\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\16\3"+
    "\1\343\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\13\3\1\344\3\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\7\3\1\345\7\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\10\3\1\346\6\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\7\3\1\347"+
    "\7\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\13\3\1\350\3\3\1\0\1\3\1\351\7\3\20\0"+
    "\1\3\3\0\2\3\4\0\10\3\1\352\6\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\16\3\1\353"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\14\3"+
    "\1\354\2\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\16\3\1\355\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\6\3\1\356\10\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\3\3\1\357\13\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\5\3\1\360"+
    "\11\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\13\3\1\361\3\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\12\3\1\362\4\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\14\3\1\363\2\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\14\3\1\364"+
    "\2\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\1\365\16\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\6\3\1\366\10\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\1\367\16\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\6\3\1\370\10\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\1\371\16\3"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\5\3"+
    "\1\372\11\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\7\3\1\373\7\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\5\3\1\374\11\3\1\0\11\3"+
    "\20\0\1\3\3\0\2\3\4\0\1\375\16\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\17\3\1\0"+
    "\3\3\1\376\5\3\20\0\1\3\3\0\2\3\4\0"+
    "\11\3\1\377\5\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\14\3\1\u0100\2\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\3\3\1\u0101\13\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\5\3\1\u0102"+
    "\11\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\10\3\1\u0103\6\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\7\3\1\u0104\7\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\4\3\1\u0105\12\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\7\3\1\u0106"+
    "\7\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\4\3\1\u0107\12\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\11\3\1\u0108\5\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\6\3\1\u0109\10\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\17\3\1\0"+
    "\2\3\1\u010a\6\3\20\0\1\3\3\0\2\3\4\0"+
    "\11\3\1\u010b\5\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\4\3\1\u010c\12\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\6\3\1\u010d\10\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\16\3\1\u010e"+
    "\1\0\11\3\20\0\1\3\3\0\2\3\4\0\13\3"+
    "\1\u010f\3\3\1\0\11\3\20\0\1\3\3\0\2\3"+
    "\4\0\6\3\1\u0110\10\3\1\0\11\3\20\0\1\3"+
    "\3\0\2\3\4\0\1\u0111\16\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\6\3\1\u0112\10\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\7\3\1\u0113"+
    "\7\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\7\3\1\u0114\7\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\3\3\1\u0115\13\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\7\3\1\u0116\7\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\3\3\1\u0117"+
    "\13\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\6\3\1\u0118\10\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\13\3\1\u0119\3\3\1\0\11\3\20\0"+
    "\1\3\3\0\2\3\4\0\13\3\1\u011a\3\3\1\0"+
    "\11\3\20\0\1\3\3\0\2\3\4\0\12\3\1\u011b"+
    "\4\3\1\0\11\3\20\0\1\3\3\0\2\3\4\0"+
    "\3\3\1\u011c\13\3\1\0\11\3\20\0\1\3\3\0"+
    "\2\3\4\0\16\3\1\u011d\1\0\11\3\20\0\1\3"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10761];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\2\11\17\1\1\11\20\1\7\11"+
    "\1\0\1\1\1\11\60\1\3\11\1\0\63\1\1\0"+
    "\47\1\1\11\133\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerPascal(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerPascal(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokensPascal yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 55: 
          { lexeme=yytext(); return Array;
          }
        case 86: break;
        case 61: 
          { lexeme=yytext(); return While;
          }
        case 87: break;
        case 34: 
          { lexeme=yytext(); return Set;
          }
        case 88: break;
        case 59: 
          { lexeme=yytext(); return Const;
          }
        case 89: break;
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 90: break;
        case 67: 
          { lexeme = yytext(); return ReadLn;
          }
        case 91: break;
        case 53: 
          { lexeme=yytext(); return File;
          }
        case 92: break;
        case 85: 
          { lexeme=yytext(); return Implemetation;
          }
        case 93: break;
        case 23: 
          { lexeme = yytext(); return Op_Atribucion;
          }
        case 94: break;
        case 50: 
          { lexeme=yytext(); return Else;
          }
        case 95: break;
        case 52: 
          { lexeme=yytext(); return With;
          }
        case 96: break;
        case 62: 
          { lexeme=yytext(); return String ;
          }
        case 97: break;
        case 66: 
          { lexeme=yytext(); return Random ;
          }
        case 98: break;
        case 38: 
          { lexeme=yytext(); return Mod;
          }
        case 99: break;
        case 42: 
          { lexeme=yytext(); return Xor;
          }
        case 100: break;
        case 54: 
          { lexeme=yytext(); return Goto;
          }
        case 101: break;
        case 49: 
          { lexeme=yytext(); return Then;
          }
        case 102: break;
        case 73: 
          { lexeme=yytext(); return  Program;
          }
        case 103: break;
        case 39: 
          { lexeme=yytext(); return Div;
          }
        case 104: break;
        case 82: 
          { lexeme=yytext(); return Procedure;
          }
        case 105: break;
        case 80: 
          { lexeme=yytext(); return Interface;
          }
        case 106: break;
        case 51: 
          { lexeme=yytext(); return Case;
          }
        case 107: break;
        case 35: 
          { lexeme=yytext(); return Shl;
          }
        case 108: break;
        case 15: 
          { lexeme=yytext(); return Parentesis_Izq;
          }
        case 109: break;
        case 4: 
          { /*Ignore*/
          }
        case 110: break;
        case 83: 
          { lexeme=yytext(); return Destructor;
          }
        case 111: break;
        case 32: 
          { lexeme=yytext(); return Asm;
          }
        case 112: break;
        case 77: 
          { lexeme=yytext(); return External;
          }
        case 113: break;
        case 36: 
          { lexeme=yytext(); return Shr;
          }
        case 114: break;
        case 74: 
          { lexeme=yytext(); return Private;
          }
        case 115: break;
        case 18: 
          { lexeme=yytext(); return Llave_Der;
          }
        case 116: break;
        case 60: 
          { lexeme = yytext(); return Write;
          }
        case 117: break;
        case 70: 
          { lexeme=yytext(); return Downto;
          }
        case 118: break;
        case 68: 
          { lexeme=yytext(); return Record;
          }
        case 119: break;
        case 1: 
          { return ERROR;
          }
        case 120: break;
        case 71: 
          { lexeme=yytext(); return Packed;
          }
        case 121: break;
        case 47: 
          { lexeme = yytext(); return Op_Booleano;
          }
        case 122: break;
        case 12: 
          { lexeme=yytext(); return Op_Multiplicacion;
          }
        case 123: break;
        case 29: 
          { lexeme=yytext(); return Do;
          }
        case 124: break;
        case 27: 
          { lexeme=yytext(); return In;
          }
        case 125: break;
        case 45: 
          { lexeme=yytext(); return Uses;
          }
        case 126: break;
        case 75: 
          { lexeme=yytext(); return Virtual;
          }
        case 127: break;
        case 21: 
          { lexeme=yytext(); return P_Coma;
          }
        case 128: break;
        case 57: 
          { lexeme=yytext(); return Label;
          }
        case 129: break;
        case 19: 
          { lexeme = yytext(); return Corchete_Izq;
          }
        case 130: break;
        case 46: 
          { lexeme=yytext(); return Unit ;
          }
        case 131: break;
        case 65: 
          { lexeme=yytext(); return Inline;
          }
        case 132: break;
        case 64: 
          { lexeme=yytext(); return Circle;
          }
        case 133: break;
        case 25: 
          { lexeme=yytext(); return Of;
          }
        case 134: break;
        case 72: 
          { lexeme=yytext(); return Forward;
          }
        case 135: break;
        case 44: 
          { lexeme=yytext(); return Var;
          }
        case 136: break;
        case 22: 
          { lexeme=yytext(); return Dos_Puntos;
          }
        case 137: break;
        case 40: 
          { lexeme=yytext(); return Not;
          }
        case 138: break;
        case 69: 
          { lexeme=yytext(); return Repeat;
          }
        case 139: break;
        case 24: 
          { lexeme=yytext(); return Or;
          }
        case 140: break;
        case 16: 
          { lexeme=yytext(); return Parentesis_Der;
          }
        case 141: break;
        case 76: 
          { lexeme=yytext(); return Adsolute;
          }
        case 142: break;
        case 10: 
          { lexeme=yytext(); return Op_Suma;
          }
        case 143: break;
        case 79: 
          { lexeme=yytext(); return Interrupt;
          }
        case 144: break;
        case 63: 
          { lexeme=yytext(); return Object;
          }
        case 145: break;
        case 5: 
          { lexeme=yytext(); return Op_Division;
          }
        case 146: break;
        case 3: 
          { lexeme=yytext(); return Numero;
          }
        case 147: break;
        case 43: 
          { lexeme=yytext(); return For;
          }
        case 148: break;
        case 84: 
          { lexeme=yytext(); return Constructor;
          }
        case 149: break;
        case 8: 
          { lexeme=yytext(); return Punto;
          }
        case 150: break;
        case 28: 
          { lexeme=yytext(); return If;
          }
        case 151: break;
        case 48: 
          { lexeme=yytext(); return Type;
          }
        case 152: break;
        case 6: 
          { return Linea;
          }
        case 153: break;
        case 41: 
          { lexeme=yytext(); return Nil ;
          }
        case 154: break;
        case 11: 
          { lexeme=yytext(); return Op_Resta;
          }
        case 155: break;
        case 58: 
          { lexeme=yytext(); return Until;
          }
        case 156: break;
        case 78: 
          { lexeme=yytext(); return Function;
          }
        case 157: break;
        case 81: 
          { lexeme=yytext(); return Rectangle;
          }
        case 158: break;
        case 56: 
          { lexeme=yytext(); return Begin;
          }
        case 159: break;
        case 9: 
          { lexeme=yytext(); return Op_Igual;
          }
        case 160: break;
        case 33: 
          { lexeme=yytext(); return And;
          }
        case 161: break;
        case 7: 
          { lexeme=yytext(); return Comillas;
          }
        case 162: break;
        case 20: 
          { lexeme = yytext(); return Corchete_Der;
          }
        case 163: break;
        case 30: 
          { lexeme = yytext(); return Op_Incremento;
          }
        case 164: break;
        case 14: 
          { lexeme = yytext(); return Op_Relacional;
          }
        case 165: break;
        case 31: 
          { lexeme=yytext(); return Real;
          }
        case 166: break;
        case 26: 
          { lexeme=yytext(); return To;
          }
        case 167: break;
        case 17: 
          { lexeme=yytext(); return Llave_Izq;
          }
        case 168: break;
        case 13: 
          { lexeme=yytext(); return Op_Logico;
          }
        case 169: break;
        case 37: 
          { lexeme=yytext(); return End;
          }
        case 170: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
