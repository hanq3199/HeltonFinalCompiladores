/* The following code was generated by JFlex 1.4.3 on 29/05/21 03:28 AM */

package codigoP;
import java_cup.runtime.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/05/21 03:28 AM from the specification file
 * <tt>LexerCupPascal.flex</tt>
 */
public class LexerCupPascal implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\6\2\0\1\3\22\0\1\3\1\46\1\7\2\0"+
    "\1\51\1\44\1\0\1\52\1\53\1\43\1\41\1\3\1\42\1\4"+
    "\1\5\12\2\1\62\1\61\1\50\1\40\1\47\2\0\13\1\1\57"+
    "\16\1\1\56\1\0\1\60\1\0\1\1\1\0\1\10\1\11\1\21"+
    "\1\24\1\17\1\30\1\32\1\34\1\22\1\36\1\37\1\14\1\20"+
    "\1\26\1\13\1\31\1\1\1\23\1\12\1\16\1\15\1\35\1\25"+
    "\1\27\1\33\1\1\1\54\1\45\1\55\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\24\2\1\10\1\11\1\12\1\13\3\14\2\15\1\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\0\1\4\1\26\11\2\1\27\1\30\3\2\1\31"+
    "\13\2\1\32\1\33\2\2\1\34\21\2\1\15\1\35"+
    "\1\14\1\0\1\36\1\2\1\37\1\2\1\40\2\2"+
    "\1\41\1\42\1\43\11\2\1\44\1\2\1\45\14\2"+
    "\1\46\3\2\1\47\1\50\1\51\1\2\1\52\6\2"+
    "\1\53\1\2\1\0\6\2\1\54\1\2\1\55\1\56"+
    "\1\57\1\60\1\61\1\2\1\62\14\2\1\63\4\2"+
    "\1\64\4\2\1\65\1\2\1\3\1\2\1\66\1\67"+
    "\2\2\1\70\1\71\1\2\1\72\13\2\1\73\1\74"+
    "\10\2\1\75\1\76\2\2\1\77\1\2\1\100\2\2"+
    "\1\101\1\102\1\103\1\2\1\104\1\105\3\2\1\106"+
    "\14\2\1\107\2\2\1\110\1\111\1\112\1\113\1\114"+
    "\6\2\1\115\3\2\1\116\1\117\1\120\1\2\1\121"+
    "\2\2\1\122\1\123\2\2\1\124";

  private static int [] zzUnpackAction() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\63\0\377\0\63"+
    "\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u052e\0\u0660\0\u0693\0\u05c7\0\u06c6\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\u06f9\0\u072c"+
    "\0\63\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\146\0\146\0\u092a\0\u095d\0\u0990\0\146"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28"+
    "\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\146\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25"+
    "\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd"+
    "\0\u0ff0\0\63\0\63\0\63\0\u1023\0\u06f9\0\u1056\0\146"+
    "\0\u1089\0\146\0\u10bc\0\u10ef\0\146\0\146\0\146\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba"+
    "\0\146\0\u12ed\0\146\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec"+
    "\0\u141f\0\u1452\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u1551\0\146"+
    "\0\u1584\0\u15b7\0\u15ea\0\146\0\146\0\146\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u16e9\0\u171c\0\u174f\0\u1782\0\146\0\u17b5"+
    "\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7\0\u191a\0\146"+
    "\0\u194d\0\146\0\146\0\146\0\146\0\146\0\u1980\0\146"+
    "\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\146\0\u1c17\0\u1c4a\0\u1c7d"+
    "\0\u1cb0\0\146\0\u1ce3\0\u1d16\0\u1d49\0\u1d7c\0\146\0\u1daf"+
    "\0\63\0\u1de2\0\146\0\146\0\u1e15\0\u1e48\0\146\0\146"+
    "\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0"+
    "\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\146\0\146\0\u2112"+
    "\0\u2145\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\146"+
    "\0\146\0\u22aa\0\u22dd\0\146\0\u2310\0\146\0\u2343\0\u2376"+
    "\0\146\0\146\0\146\0\u23a9\0\146\0\146\0\u23dc\0\u240f"+
    "\0\u2442\0\146\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574"+
    "\0\u25a7\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\146\0\u26d9"+
    "\0\u270c\0\146\0\146\0\146\0\146\0\146\0\u273f\0\u2772"+
    "\0\u27a5\0\u27d8\0\u280b\0\u283e\0\146\0\u2871\0\u28a4\0\u28d7"+
    "\0\146\0\146\0\146\0\u290a\0\146\0\u293d\0\u2970\0\146"+
    "\0\146\0\u29a3\0\u29d6\0\146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\2\3\1\34\2\3\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\3\1\54\1\55"+
    "\1\56\64\0\2\3\5\0\30\3\17\0\1\3\5\0"+
    "\1\4\1\0\1\57\61\0\1\5\2\0\1\5\61\0"+
    "\1\60\32\0\1\61\23\0\2\3\5\0\1\3\1\62"+
    "\1\63\10\3\1\64\2\3\1\65\11\3\17\0\1\3"+
    "\4\0\2\3\5\0\7\3\1\66\20\3\17\0\1\3"+
    "\4\0\2\3\5\0\6\3\1\67\1\70\14\3\1\71"+
    "\3\3\17\0\1\3\4\0\2\3\5\0\1\3\1\72"+
    "\11\3\1\73\4\3\1\74\7\3\17\0\1\3\4\0"+
    "\2\3\5\0\1\75\27\3\17\0\1\3\4\0\2\3"+
    "\5\0\2\3\1\76\13\3\1\77\11\3\17\0\1\3"+
    "\4\0\2\3\5\0\3\3\1\100\7\3\1\101\7\3"+
    "\1\102\1\103\3\3\17\0\1\3\4\0\2\3\5\0"+
    "\4\3\1\104\11\3\1\105\1\106\10\3\17\0\1\3"+
    "\4\0\2\3\5\0\3\3\1\107\24\3\17\0\1\3"+
    "\4\0\2\3\5\0\1\110\2\3\1\111\6\3\1\112"+
    "\15\3\17\0\1\3\4\0\2\3\5\0\10\3\1\113"+
    "\5\3\1\114\1\3\1\115\7\3\17\0\1\3\4\0"+
    "\2\3\5\0\1\116\6\3\1\117\20\3\17\0\1\3"+
    "\4\0\2\3\5\0\3\3\1\120\3\3\1\121\2\3"+
    "\1\122\15\3\17\0\1\3\4\0\2\3\5\0\12\3"+
    "\1\123\1\124\10\3\1\125\3\3\17\0\1\3\4\0"+
    "\2\3\5\0\3\3\1\126\6\3\1\127\15\3\17\0"+
    "\1\3\4\0\2\3\5\0\3\3\1\130\24\3\17\0"+
    "\1\3\4\0\2\3\5\0\1\131\2\3\1\132\1\3"+
    "\1\133\4\3\1\134\15\3\17\0\1\3\4\0\2\3"+
    "\5\0\1\135\12\3\1\136\14\3\17\0\1\3\4\0"+
    "\2\3\5\0\3\3\1\137\24\3\17\0\1\3\4\0"+
    "\2\3\5\0\1\140\11\3\1\141\15\3\17\0\1\3"+
    "\43\0\1\142\62\0\1\61\1\143\61\0\1\61\1\0"+
    "\1\143\60\0\1\61\66\0\1\144\63\0\1\144\55\0"+
    "\1\142\6\0\1\142\53\0\1\142\7\0\1\142\54\0"+
    "\1\145\22\0\1\146\60\0\6\60\1\0\54\60\1\0"+
    "\2\3\5\0\2\3\1\147\25\3\17\0\1\3\4\0"+
    "\2\3\5\0\10\3\1\150\17\3\17\0\1\3\4\0"+
    "\2\3\5\0\13\3\1\151\14\3\17\0\1\3\4\0"+
    "\2\3\5\0\14\3\1\152\13\3\17\0\1\3\4\0"+
    "\2\3\5\0\22\3\1\153\5\3\17\0\1\3\4\0"+
    "\2\3\5\0\13\3\1\154\14\3\17\0\1\3\4\0"+
    "\2\3\5\0\6\3\1\155\21\3\17\0\1\3\4\0"+
    "\2\3\5\0\4\3\1\156\6\3\1\157\14\3\17\0"+
    "\1\3\4\0\2\3\5\0\26\3\1\160\1\3\17\0"+
    "\1\3\4\0\2\3\5\0\1\3\1\161\26\3\17\0"+
    "\1\3\4\0\2\3\5\0\7\3\1\162\20\3\17\0"+
    "\1\3\4\0\2\3\5\0\6\3\1\163\3\3\1\164"+
    "\15\3\17\0\1\3\4\0\2\3\5\0\5\3\1\165"+
    "\22\3\17\0\1\3\4\0\2\3\5\0\21\3\1\166"+
    "\6\3\17\0\1\3\4\0\2\3\5\0\7\3\1\167"+
    "\20\3\17\0\1\3\4\0\2\3\5\0\2\3\1\170"+
    "\25\3\17\0\1\3\4\0\2\3\5\0\14\3\1\171"+
    "\13\3\17\0\1\3\4\0\2\3\5\0\6\3\1\172"+
    "\21\3\17\0\1\3\4\0\2\3\5\0\14\3\1\173"+
    "\13\3\17\0\1\3\4\0\2\3\5\0\2\3\1\174"+
    "\25\3\17\0\1\3\4\0\2\3\5\0\16\3\1\175"+
    "\11\3\17\0\1\3\4\0\2\3\5\0\13\3\1\176"+
    "\14\3\17\0\1\3\4\0\2\3\5\0\21\3\1\177"+
    "\6\3\17\0\1\3\4\0\2\3\5\0\4\3\1\200"+
    "\1\3\1\201\21\3\17\0\1\3\4\0\2\3\5\0"+
    "\16\3\1\202\11\3\17\0\1\3\4\0\2\3\5\0"+
    "\1\203\10\3\1\204\7\3\1\205\6\3\17\0\1\3"+
    "\4\0\2\3\5\0\15\3\1\206\12\3\17\0\1\3"+
    "\4\0\2\3\5\0\2\3\1\207\25\3\17\0\1\3"+
    "\4\0\2\3\5\0\25\3\1\210\2\3\17\0\1\3"+
    "\4\0\2\3\5\0\6\3\1\211\21\3\17\0\1\3"+
    "\4\0\2\3\5\0\12\3\1\212\15\3\17\0\1\3"+
    "\4\0\2\3\5\0\12\3\1\213\15\3\17\0\1\3"+
    "\4\0\2\3\5\0\6\3\1\214\21\3\17\0\1\3"+
    "\4\0\2\3\5\0\4\3\1\215\23\3\17\0\1\3"+
    "\4\0\2\3\5\0\13\3\1\216\14\3\17\0\1\3"+
    "\4\0\2\3\5\0\4\3\1\217\23\3\17\0\1\3"+
    "\4\0\2\3\5\0\13\3\1\220\14\3\17\0\1\3"+
    "\4\0\2\3\5\0\16\3\1\221\11\3\17\0\1\3"+
    "\4\0\2\3\5\0\4\3\1\222\23\3\17\0\1\3"+
    "\4\0\2\3\5\0\11\3\1\223\16\3\17\0\1\3"+
    "\4\0\2\3\5\0\3\3\1\224\6\3\1\225\15\3"+
    "\17\0\1\3\4\0\2\3\5\0\6\3\1\226\21\3"+
    "\17\0\1\3\4\0\2\3\5\0\13\3\1\227\14\3"+
    "\17\0\1\3\4\0\2\3\5\0\13\3\1\230\14\3"+
    "\17\0\1\3\5\0\1\231\61\0\2\3\5\0\3\3"+
    "\1\232\24\3\17\0\1\3\4\0\2\3\5\0\1\233"+
    "\27\3\17\0\1\3\4\0\2\3\5\0\12\3\1\234"+
    "\15\3\17\0\1\3\4\0\2\3\5\0\12\3\1\235"+
    "\15\3\17\0\1\3\4\0\2\3\5\0\7\3\1\236"+
    "\20\3\17\0\1\3\4\0\2\3\5\0\7\3\1\237"+
    "\20\3\17\0\1\3\4\0\2\3\5\0\2\3\1\240"+
    "\25\3\17\0\1\3\4\0\2\3\5\0\12\3\1\241"+
    "\15\3\17\0\1\3\4\0\2\3\5\0\6\3\1\242"+
    "\21\3\17\0\1\3\4\0\2\3\5\0\7\3\1\243"+
    "\20\3\17\0\1\3\4\0\2\3\5\0\7\3\1\244"+
    "\20\3\17\0\1\3\4\0\2\3\5\0\16\3\1\245"+
    "\11\3\17\0\1\3\4\0\2\3\5\0\7\3\1\246"+
    "\20\3\17\0\1\3\4\0\2\3\5\0\7\3\1\247"+
    "\20\3\17\0\1\3\4\0\2\3\5\0\7\3\1\250"+
    "\20\3\17\0\1\3\4\0\2\3\5\0\2\3\1\251"+
    "\25\3\17\0\1\3\4\0\2\3\5\0\11\3\1\252"+
    "\16\3\17\0\1\3\4\0\2\3\5\0\4\3\1\253"+
    "\23\3\17\0\1\3\4\0\2\3\5\0\12\3\1\254"+
    "\15\3\17\0\1\3\4\0\2\3\5\0\7\3\1\255"+
    "\20\3\17\0\1\3\4\0\2\3\5\0\14\3\1\256"+
    "\13\3\17\0\1\3\4\0\2\3\5\0\14\3\1\257"+
    "\13\3\17\0\1\3\4\0\2\3\5\0\3\3\1\260"+
    "\2\3\1\261\21\3\17\0\1\3\4\0\2\3\5\0"+
    "\7\3\1\262\20\3\17\0\1\3\4\0\2\3\5\0"+
    "\16\3\1\263\11\3\17\0\1\3\4\0\2\3\5\0"+
    "\6\3\1\264\21\3\17\0\1\3\4\0\2\3\5\0"+
    "\24\3\1\265\3\3\17\0\1\3\4\0\2\3\5\0"+
    "\6\3\1\266\21\3\17\0\1\3\4\0\2\3\5\0"+
    "\4\3\1\267\23\3\17\0\1\3\4\0\2\3\5\0"+
    "\2\3\1\165\25\3\17\0\1\3\4\0\2\3\5\0"+
    "\15\3\1\270\12\3\17\0\1\3\4\0\2\3\5\0"+
    "\11\3\1\271\16\3\17\0\1\3\4\0\2\3\5\0"+
    "\7\3\1\272\20\3\17\0\1\3\4\0\2\3\5\0"+
    "\27\3\1\273\17\0\1\3\4\0\2\3\5\0\11\3"+
    "\1\274\10\3\1\275\5\3\17\0\1\3\4\0\2\3"+
    "\5\0\25\3\1\276\2\3\17\0\1\3\4\0\2\3"+
    "\5\0\3\3\1\277\24\3\17\0\1\3\4\0\2\3"+
    "\5\0\6\3\1\300\21\3\17\0\1\3\5\0\1\231"+
    "\50\0\1\301\10\0\2\3\5\0\4\3\1\302\23\3"+
    "\17\0\1\3\4\0\2\3\5\0\23\3\1\303\4\3"+
    "\17\0\1\3\4\0\2\3\5\0\16\3\1\304\11\3"+
    "\17\0\1\3\4\0\2\3\5\0\16\3\1\305\11\3"+
    "\17\0\1\3\4\0\2\3\5\0\11\3\1\306\16\3"+
    "\17\0\1\3\4\0\2\3\5\0\4\3\1\307\23\3"+
    "\17\0\1\3\4\0\2\3\5\0\4\3\1\310\23\3"+
    "\17\0\1\3\4\0\2\3\5\0\13\3\1\311\14\3"+
    "\17\0\1\3\4\0\2\3\5\0\6\3\1\312\21\3"+
    "\17\0\1\3\4\0\2\3\5\0\4\3\1\313\23\3"+
    "\17\0\1\3\4\0\2\3\5\0\7\3\1\314\20\3"+
    "\17\0\1\3\4\0\2\3\5\0\16\3\1\315\11\3"+
    "\17\0\1\3\4\0\2\3\5\0\13\3\1\316\14\3"+
    "\17\0\1\3\4\0\2\3\5\0\3\3\1\317\24\3"+
    "\17\0\1\3\4\0\2\3\5\0\30\3\17\0\1\320"+
    "\4\0\2\3\5\0\13\3\1\321\14\3\17\0\1\3"+
    "\4\0\2\3\5\0\1\322\27\3\17\0\1\3\4\0"+
    "\2\3\5\0\1\323\27\3\17\0\1\3\4\0\2\3"+
    "\5\0\6\3\1\324\21\3\17\0\1\3\4\0\2\3"+
    "\5\0\13\3\1\325\14\3\17\0\1\3\4\0\2\3"+
    "\5\0\7\3\1\326\20\3\17\0\1\3\4\0\2\3"+
    "\5\0\7\3\1\327\20\3\17\0\1\3\4\0\2\3"+
    "\5\0\1\330\27\3\17\0\1\3\4\0\2\3\5\0"+
    "\6\3\1\331\21\3\17\0\1\3\4\0\2\3\5\0"+
    "\7\3\1\332\20\3\17\0\1\3\4\0\2\3\5\0"+
    "\7\3\1\333\20\3\17\0\1\3\4\0\2\3\5\0"+
    "\13\3\1\334\14\3\17\0\1\3\4\0\2\3\5\0"+
    "\1\335\27\3\17\0\1\3\4\0\2\3\5\0\5\3"+
    "\1\336\22\3\17\0\1\3\4\0\2\3\5\0\5\3"+
    "\1\337\22\3\17\0\1\3\4\0\2\3\5\0\22\3"+
    "\1\340\5\3\17\0\1\3\4\0\2\3\5\0\6\3"+
    "\1\341\21\3\17\0\1\3\4\0\2\3\5\0\16\3"+
    "\1\342\11\3\17\0\1\3\4\0\2\3\5\0\13\3"+
    "\1\343\14\3\17\0\1\3\4\0\2\3\5\0\7\3"+
    "\1\344\20\3\17\0\1\3\4\0\2\3\5\0\10\3"+
    "\1\345\17\3\17\0\1\3\4\0\2\3\5\0\7\3"+
    "\1\346\20\3\17\0\1\3\4\0\2\3\5\0\13\3"+
    "\1\347\4\3\1\350\7\3\17\0\1\3\4\0\2\3"+
    "\5\0\10\3\1\351\17\3\17\0\1\3\4\0\2\3"+
    "\5\0\16\3\1\352\11\3\17\0\1\3\4\0\2\3"+
    "\5\0\14\3\1\353\13\3\17\0\1\3\4\0\2\3"+
    "\5\0\16\3\1\354\11\3\17\0\1\3\4\0\2\3"+
    "\5\0\6\3\1\355\21\3\17\0\1\3\4\0\2\3"+
    "\5\0\3\3\1\356\24\3\17\0\1\3\4\0\2\3"+
    "\5\0\5\3\1\357\22\3\17\0\1\3\4\0\2\3"+
    "\5\0\13\3\1\360\14\3\17\0\1\3\4\0\2\3"+
    "\5\0\12\3\1\361\15\3\17\0\1\3\4\0\2\3"+
    "\5\0\14\3\1\362\13\3\17\0\1\3\4\0\2\3"+
    "\5\0\14\3\1\363\13\3\17\0\1\3\4\0\2\3"+
    "\5\0\1\364\27\3\17\0\1\3\4\0\2\3\5\0"+
    "\6\3\1\365\21\3\17\0\1\3\4\0\2\3\5\0"+
    "\1\366\27\3\17\0\1\3\4\0\2\3\5\0\6\3"+
    "\1\367\21\3\17\0\1\3\4\0\2\3\5\0\1\370"+
    "\27\3\17\0\1\3\4\0\2\3\5\0\5\3\1\371"+
    "\22\3\17\0\1\3\4\0\2\3\5\0\7\3\1\372"+
    "\20\3\17\0\1\3\4\0\2\3\5\0\5\3\1\373"+
    "\22\3\17\0\1\3\4\0\2\3\5\0\1\374\27\3"+
    "\17\0\1\3\4\0\2\3\5\0\22\3\1\375\5\3"+
    "\17\0\1\3\4\0\2\3\5\0\11\3\1\376\16\3"+
    "\17\0\1\3\4\0\2\3\5\0\14\3\1\377\13\3"+
    "\17\0\1\3\4\0\2\3\5\0\3\3\1\u0100\24\3"+
    "\17\0\1\3\4\0\2\3\5\0\5\3\1\u0101\22\3"+
    "\17\0\1\3\4\0\2\3\5\0\10\3\1\u0102\17\3"+
    "\17\0\1\3\4\0\2\3\5\0\7\3\1\u0103\20\3"+
    "\17\0\1\3\4\0\2\3\5\0\4\3\1\u0104\23\3"+
    "\17\0\1\3\4\0\2\3\5\0\7\3\1\u0105\20\3"+
    "\17\0\1\3\4\0\2\3\5\0\4\3\1\u0106\23\3"+
    "\17\0\1\3\4\0\2\3\5\0\11\3\1\u0107\16\3"+
    "\17\0\1\3\4\0\2\3\5\0\6\3\1\u0108\21\3"+
    "\17\0\1\3\4\0\2\3\5\0\21\3\1\u0109\6\3"+
    "\17\0\1\3\4\0\2\3\5\0\11\3\1\u010a\16\3"+
    "\17\0\1\3\4\0\2\3\5\0\4\3\1\u010b\23\3"+
    "\17\0\1\3\4\0\2\3\5\0\6\3\1\u010c\21\3"+
    "\17\0\1\3\4\0\2\3\5\0\16\3\1\u010d\11\3"+
    "\17\0\1\3\4\0\2\3\5\0\13\3\1\u010e\14\3"+
    "\17\0\1\3\4\0\2\3\5\0\6\3\1\u010f\21\3"+
    "\17\0\1\3\4\0\2\3\5\0\1\u0110\27\3\17\0"+
    "\1\3\4\0\2\3\5\0\6\3\1\u0111\21\3\17\0"+
    "\1\3\4\0\2\3\5\0\7\3\1\u0112\20\3\17\0"+
    "\1\3\4\0\2\3\5\0\7\3\1\u0113\20\3\17\0"+
    "\1\3\4\0\2\3\5\0\3\3\1\u0114\24\3\17\0"+
    "\1\3\4\0\2\3\5\0\7\3\1\u0115\20\3\17\0"+
    "\1\3\4\0\2\3\5\0\3\3\1\u0116\24\3\17\0"+
    "\1\3\4\0\2\3\5\0\6\3\1\u0117\21\3\17\0"+
    "\1\3\4\0\2\3\5\0\13\3\1\u0118\14\3\17\0"+
    "\1\3\4\0\2\3\5\0\13\3\1\u0119\14\3\17\0"+
    "\1\3\4\0\2\3\5\0\12\3\1\u011a\15\3\17\0"+
    "\1\3\4\0\2\3\5\0\3\3\1\u011b\24\3\17\0"+
    "\1\3\4\0\2\3\5\0\16\3\1\u011c\11\3\17\0"+
    "\1\3\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10761];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\1\11\37\1\7\11"+
    "\1\0\1\1\1\11\60\1\3\11\1\0\63\1\1\0"+
    "\47\1\1\11\133\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[284];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCupPascal(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexerCupPascal(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 85: break;
        case 13: 
          { return new Symbol(sym.Op_Relacional, yychar, yyline, yytext());
          }
        case 86: break;
        case 42: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 87: break;
        case 74: 
          { return new Symbol(sym.Virtual, yychar, yyline, yytext());
          }
        case 88: break;
       
        case 51: 
          { return new Symbol(sym.With, yychar, yyline, yytext());
          }
        case 90: break;
        case 44: 
          { return new Symbol(sym.Uses, yychar, yyline, yytext());
          }
        case 91: break;
        case 11: 
          { return new Symbol(sym.Op_Multiplicacion, yychar, yyline, yytext());
          }
        case 92: break;
        case 30: 
          { return new Symbol(sym.Real, yycolumn,yyline,new String(yytext()));
          }
        case 93: break;
        case 6: 
          { return new Symbol(sym.Op_Division, yychar, yyline, yytext());
          }
        case 94: break;
        case 33: 
          { return new Symbol(sym.Set, yychar, yyline, yytext());
          }
        case 95: break;
        case 76: 
          { return new Symbol(sym.External, yychar, yyline, yytext());
          }
        case 96: break;
        case 31: 
          { return new Symbol(sym.Asm, yychar, yyline, yytext());
          }
        case 97: break;
        case 4: 
          { /*Ignore*/
          }
        case 98: break;
        case 72: 
          { return new Symbol(sym.Program, yychar, yyline, yytext());
          }
        case 99: break;
        case 16: 
          { return new Symbol(sym.Llave_Izq, yychar, yyline, yytext());
          }
        case 100: break;
        
        case 24: 
          { return new Symbol(sym.Of, yychar, yyline, yytext());
          }
        case 102: break;
        case 8: 
          { return new Symbol(sym.Op_Igual, yychar, yyline, yytext());
          }
        case 103: break;
        case 63: 
          { return new Symbol(sym.Circle, yychar, yyline, yytext());
          }
        case 104: break;
        case 22: 
          { return new Symbol(sym.Op_Atribucion, yychar, yyline, yytext());
          }
        case 105: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 106: break;
        case 38: 
          { return new Symbol(sym.Div, yychar, yyline, yytext());
          }
        case 107: break;
        case 39: 
          { return new Symbol(sym.Not, yychar, yyline, yytext());
          }
        case 108: break;
        case 35: 
          { return new Symbol(sym.Shr, yychar, yyline, yytext());
          }
        case 109: break;
        case 80: 
          { return new Symbol(sym.Rectangle, yychar, yyline, yytext());
          }
        case 110: break;
        case 79: 
          { return new Symbol(sym.Interface, yychar, yyline, yytext());
          }
        case 111: break;
        case 52: 
          { return new Symbol(sym.File, yychar, yyline, yytext());
          }
        case 112: break;
        case 23: 
          { return new Symbol(sym.Or, yychar, yyline, yytext());
          }
        case 113: break;
        case 50: 
          { return new Symbol(sym.Case, yychar, yyline, yytext());
          }
        case 114: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 115: break;
        case 82: 
          { return new Symbol(sym.Destructor, yychar, yyline, yytext());
          }
        case 116: break;
        case 49: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 117: break;
        case 71: 
          { return new Symbol(sym.Forward, yychar, yyline, yytext());
          }
        case 118: break;
        case 32: 
          { return new Symbol(sym.And, yychar, yyline, yytext());
          }
        case 119: break;
        case 55: 
          { return new Symbol(sym.Begin, yychar, yyline, yytext());
          }
        case 120: break;
        case 21: 
          { return new Symbol(sym.Dos_Puntos, yychar, yyline, yytext());
          }
        case 121: break;
        case 66: 
          { return new Symbol(sym.ReadLn, yychar, yyline, yytext());
          }
        case 122: break;
        case 68: 
          { return new Symbol(sym.Repeat, yychar, yyline, yytext());
          }
        case 123: break;
        case 73: 
          { return new Symbol(sym.Private, yychar, yyline, yytext());
          }
        case 124: break;
        case 40: 
          { return new Symbol(sym.Nil, yychar, yyline, yytext());
          }
        case 125: break;
        case 26: 
          { return new Symbol(sym.In, yychar, yyline, yytext());
          }
        case 126: break;
        case 78: 
          { return new Symbol(sym.Interrupt, yychar, yyline, yytext());
          }
        case 127: break;
        case 17: 
          { return new Symbol(sym.Llave_Der, yychar, yyline, yytext());
          }
        case 128: break;
        case 18: 
          { return new Symbol(sym.Corchete_Izq, yychar, yyline, yytext());
          }
        case 129: break;
        case 10: 
          { return new Symbol(sym.Op_Resta, yychar, yyline, yytext());
          }
        case 130: break;
        case 83: 
          { return new Symbol(sym.Constructor, yychar, yyline, yytext());
          }
        case 131: break;
        case 56: 
          { return new Symbol(sym.Label, yychar, yyline, yytext());
          }
        case 132: break;
        case 46: 
          { return new Symbol(sym.Op_Booleano, yychar, yyline, yytext());
          }
        case 133: break;
        case 54: 
          { return new Symbol(sym.Array, yychar, yyline, yytext());
          }
        case 134: break;
        case 9: 
          { return new Symbol(sym.Op_Suma, yychar, yyline, yytext());
          }
        case 135: break;
        case 48: 
          { return new Symbol(sym.Then, yychar, yyline, yytext());
          }
        case 136: break;
        case 57: 
          { return new Symbol(sym.Until, yychar, yyline, yytext());
          }
        case 137: break;
        case 77: 
          { return new Symbol(sym.Function, yychar, yyline, yytext());
          }
        case 138: break;
        case 27: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 139: break;
        case 62: 
          { return new Symbol(sym.Object, yychar, yyline, yytext());
          }
        case 140: break;
        case 69: 
          { return new Symbol(sym.Downto, yychar, yyline, yytext());
          }
        case 141: break;
        case 20: 
          { return new Symbol(sym.P_Coma, yychar, yyline, yytext());
          }
        case 142: break;
        case 5: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 143: break;
        case 14: 
          { return new Symbol(sym.Parentesis_Izq, yychar, yyline, yytext());
          }
        case 144: break;
        case 12: 
          { return new Symbol(sym.Op_Logico, yychar, yyline, yytext());
          }
        case 145: break;
        case 41: 
          { return new Symbol(sym.Xor, yychar, yyline, yytext());
          }
        case 146: break;
        case 34: 
          { return new Symbol(sym.Shl, yychar, yyline, yytext());
          }
        case 147: break;
        case 28: 
          { return new Symbol(sym.Do, yychar, yyline, yytext());
          }
        case 148: break;
        case 53: 
          { return new Symbol(sym.Goto, yychar, yyline, yytext());
          }
        case 149: break;
        case 47: 
          { return new Symbol(sym.Type, yychar, yyline, yytext());
          }
        case 150: break;
        case 59: 
          { return new Symbol(sym.Write, yychar, yyline, yytext());
          }
        case 151: break;
        case 67: 
          { return new Symbol(sym.Record, yychar, yyline, yytext());
          }
        case 152: break;
        case 19: 
          { return new Symbol(sym.Corchete_Der, yychar, yyline, yytext());
          }
        case 153: break;
        case 29: 
          { return new Symbol(sym.Op_Incremento, yychar, yyline, yytext());
          }
        case 154: break;
        case 61: 
          { return new Symbol(sym.String, yychar, yyline, yytext());
          }
        case 155: break;
        case 36: 
          { return new Symbol(sym.End, yychar, yyline, yytext());
          }
        case 156: break;
        case 43: 
          { return new Symbol(sym.Var, yychar, yyline, yytext());
          }
        case 157: break;
        case 58: 
          { return new Symbol(sym.Const, yychar, yyline, yytext());
          }
        case 158: break;
        case 70: 
          { return new Symbol(sym.Packed, yychar, yyline, yytext());
          }
        case 159: break;
        case 45: 
          { return new Symbol(sym.Unit, yychar, yyline, yytext());
          }
        case 160: break;
        case 60: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 161: break;
        case 65: 
          { return new Symbol(sym.Random, yychar, yyline, yytext());
          }
        case 162: break;
        case 64: 
          { return new Symbol(sym.Inline, yychar, yyline, yytext());
          }
        case 163: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 164: break;
       
        case 165: break;
        case 37: 
          { return new Symbol(sym.Mod, yychar, yyline, yytext());
          }
        case 166: break;
        case 15: 
          { return new Symbol(sym.Parentesis_Der, yychar, yyline, yytext());
          }
        case 167: break;
        case 25: 
          { return new Symbol(sym.To, yychar, yyline, yytext());
          }
        case 168: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
