
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 29 03:32:40 CST 2021
//----------------------------------------------------

package codigoP;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 29 03:32:40 CST 2021
  */
public class SintacticoP extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoP() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoP(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoP(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\014\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\004\010\000\002\004\010\000\002\004\011\000\002" +
    "\004\011\000\002\004\011\000\002\004\007\000\002\006" +
    "\011\000\002\012\003\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\006\000\002\012\007\000" +
    "\002\007\015\000\002\010\011\000\002\011\011\000\002" +
    "\013\012\000\002\013\011\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\015\005\000\002\016\005" +
    "\000\002\020\005\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\047\004\001\002\000\004\123\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\113\010\001\002\000\004\123\011\001\002\000" +
    "\004\121\012\001\002\000\004\123\013\001\002\000\004" +
    "\114\014\001\002\000\004\121\015\001\002\000\004\034" +
    "\016\001\002\000\016\005\035\006\032\017\022\032\020" +
    "\054\037\063\031\001\002\000\022\002\ufff8\005\ufff8\006" +
    "\ufff8\017\ufff8\032\ufff8\054\ufff8\063\ufff8\116\ufff8\001\002" +
    "\000\004\113\177\001\002\000\022\002\ufff6\005\ufff6\006" +
    "\ufff6\017\ufff6\032\ufff6\054\ufff6\063\ufff6\116\ufff6\001\002" +
    "\000\004\113\165\001\002\000\024\002\ufff3\005\ufff3\006" +
    "\ufff3\017\ufff3\032\ufff3\054\ufff3\063\ufff3\102\163\116\ufff3" +
    "\001\002\000\022\002\ufffe\005\ufffe\006\ufffe\017\ufffe\032" +
    "\ufffe\054\ufffe\063\ufffe\116\ufffe\001\002\000\024\002\ufff5" +
    "\005\ufff5\006\ufff5\017\ufff5\032\ufff5\054\ufff5\063\ufff5\104" +
    "\161\116\ufff5\001\002\000\022\002\ufffa\005\ufffa\006\ufffa" +
    "\017\ufffa\032\ufffa\054\ufffa\063\ufffa\116\ufffa\001\002\000" +
    "\022\002\ufffc\005\ufffc\006\ufffc\017\ufffc\032\ufffc\054\ufffc" +
    "\063\ufffc\116\ufffc\001\002\000\020\002\000\005\035\006" +
    "\032\017\022\032\020\054\037\063\031\001\002\000\004" +
    "\113\107\001\002\000\004\113\103\001\002\000\022\002" +
    "\ufff1\005\ufff1\006\ufff1\017\ufff1\032\ufff1\054\ufff1\063\ufff1" +
    "\116\ufff1\001\002\000\024\002\ufff4\005\ufff4\006\ufff4\017" +
    "\ufff4\032\ufff4\054\ufff4\063\ufff4\105\101\116\ufff4\001\002" +
    "\000\004\113\073\001\002\000\024\002\ufff2\005\ufff2\006" +
    "\ufff2\017\ufff2\032\ufff2\054\ufff2\063\ufff2\103\071\116\ufff2" +
    "\001\002\000\006\111\040\123\041\001\002\000\004\123" +
    "\067\001\002\000\012\101\044\110\045\111\043\121\042" +
    "\001\002\000\022\002\ufff0\005\ufff0\006\ufff0\017\ufff0\032" +
    "\ufff0\054\ufff0\063\ufff0\116\ufff0\001\002\000\004\121\066" +
    "\001\002\000\006\004\057\124\056\001\002\000\006\004" +
    "\047\124\046\001\002\000\004\121\055\001\002\000\006" +
    "\004\050\123\051\001\002\000\004\121\054\001\002\000" +
    "\004\004\052\001\002\000\004\121\053\001\002\000\022" +
    "\002\uffe9\005\uffe9\006\uffe9\017\uffe9\032\uffe9\054\uffe9\063" +
    "\uffe9\116\uffe9\001\002\000\022\002\uffeb\005\uffeb\006\uffeb" +
    "\017\uffeb\032\uffeb\054\uffeb\063\uffeb\116\uffeb\001\002\000" +
    "\022\002\uffef\005\uffef\006\uffef\017\uffef\032\uffef\054\uffef" +
    "\063\uffef\116\uffef\001\002\000\004\121\065\001\002\000" +
    "\006\004\060\123\061\001\002\000\004\121\064\001\002" +
    "\000\004\004\062\001\002\000\004\121\063\001\002\000" +
    "\022\002\uffe8\005\uffe8\006\uffe8\017\uffe8\032\uffe8\054\uffe8" +
    "\063\uffe8\116\uffe8\001\002\000\022\002\uffea\005\uffea\006" +
    "\uffea\017\uffea\032\uffea\054\uffea\063\uffea\116\uffea\001\002" +
    "\000\022\002\uffee\005\uffee\006\uffee\017\uffee\032\uffee\054" +
    "\uffee\063\uffee\116\uffee\001\002\000\022\002\uffed\005\uffed" +
    "\006\uffed\017\uffed\032\uffed\054\uffed\063\uffed\116\uffed\001" +
    "\002\000\004\121\070\001\002\000\022\002\uffec\005\uffec" +
    "\006\uffec\017\uffec\032\uffec\054\uffec\063\uffec\116\uffec\001" +
    "\002\000\002\001\002\000\024\002\uffd5\005\uffd5\006\uffd5" +
    "\017\uffd5\032\uffd5\054\uffd5\063\uffd5\103\uffd5\116\uffd5\001" +
    "\002\000\004\004\074\001\002\000\004\123\075\001\002" +
    "\000\004\004\076\001\002\000\004\114\077\001\002\000" +
    "\004\121\100\001\002\000\022\002\uffe7\005\uffe7\006\uffe7" +
    "\017\uffe7\032\uffe7\054\uffe7\063\uffe7\116\uffe7\001\002\000" +
    "\002\001\002\000\024\002\uffd4\005\uffd4\006\uffd4\017\uffd4" +
    "\032\uffd4\054\uffd4\063\uffd4\105\uffd4\116\uffd4\001\002\000" +
    "\004\123\104\001\002\000\004\114\105\001\002\000\004" +
    "\121\106\001\002\000\022\002\uffe6\005\uffe6\006\uffe6\017" +
    "\uffe6\032\uffe6\054\uffe6\063\uffe6\116\uffe6\001\002\000\006" +
    "\054\112\123\111\001\002\000\004\114\150\001\002\000" +
    "\004\101\142\001\002\000\004\123\113\001\002\000\004" +
    "\101\114\001\002\000\004\124\115\001\002\000\004\121" +
    "\116\001\002\000\006\112\120\123\121\001\002\000\004" +
    "\121\132\001\002\000\006\114\uffe4\121\uffe4\001\002\000" +
    "\004\107\122\001\002\000\012\004\124\112\125\123\126" +
    "\124\123\001\002\000\006\114\uffe2\121\uffe2\001\002\000" +
    "\006\004\127\123\130\001\002\000\006\114\uffe3\121\uffe3" +
    "\001\002\000\006\114\uffe1\121\uffe1\001\002\000\006\114" +
    "\uffe0\121\uffe0\001\002\000\004\004\131\001\002\000\006" +
    "\114\uffdf\121\uffdf\001\002\000\006\111\134\123\135\001" +
    "\002\000\004\114\uffdb\001\002\000\004\123\141\001\002" +
    "\000\006\110\137\111\136\001\002\000\004\114\uffd8\001" +
    "\002\000\004\124\140\001\002\000\004\114\uffd9\001\002" +
    "\000\004\114\uffd7\001\002\000\004\124\143\001\002\000" +
    "\004\121\144\001\002\000\006\112\120\123\121\001\002" +
    "\000\004\121\146\001\002\000\006\111\134\123\135\001" +
    "\002\000\004\114\uffda\001\002\000\004\115\151\001\002" +
    "\000\016\005\035\006\032\017\022\032\020\054\037\063" +
    "\031\001\002\000\020\005\035\006\032\017\022\032\020" +
    "\054\037\063\031\116\156\001\002\000\022\002\ufff9\005" +
    "\ufff9\006\ufff9\017\ufff9\032\ufff9\054\ufff9\063\ufff9\116\ufff9" +
    "\001\002\000\022\002\ufff7\005\ufff7\006\ufff7\017\ufff7\032" +
    "\ufff7\054\ufff7\063\ufff7\116\ufff7\001\002\000\022\002\uffff" +
    "\005\uffff\006\uffff\017\uffff\032\uffff\054\uffff\063\uffff\116" +
    "\uffff\001\002\000\022\002\uffdc\005\uffdc\006\uffdc\017\uffdc" +
    "\032\uffdc\054\uffdc\063\uffdc\116\uffdc\001\002\000\022\002" +
    "\ufffb\005\ufffb\006\ufffb\017\ufffb\032\ufffb\054\ufffb\063\ufffb" +
    "\116\ufffb\001\002\000\022\002\ufffd\005\ufffd\006\ufffd\017" +
    "\ufffd\032\ufffd\054\ufffd\063\ufffd\116\ufffd\001\002\000\002" +
    "\001\002\000\024\002\uffd3\005\uffd3\006\uffd3\017\uffd3\032" +
    "\uffd3\054\uffd3\063\uffd3\104\uffd3\116\uffd3\001\002\000\002" +
    "\001\002\000\024\002\uffd6\005\uffd6\006\uffd6\017\uffd6\032" +
    "\uffd6\054\uffd6\063\uffd6\102\uffd6\116\uffd6\001\002\000\006" +
    "\112\120\123\121\001\002\000\004\114\167\001\002\000" +
    "\004\115\170\001\002\000\016\005\035\006\032\017\022" +
    "\032\020\054\037\063\031\001\002\000\020\005\035\006" +
    "\032\017\022\032\020\054\037\063\031\116\172\001\002" +
    "\000\024\002\uffe5\005\uffe5\006\uffe5\017\uffe5\032\uffe5\037" +
    "\173\054\uffe5\063\uffe5\116\uffe5\001\002\000\004\115\174" +
    "\001\002\000\016\005\035\006\032\017\022\032\020\054" +
    "\037\063\031\001\002\000\020\005\035\006\032\017\022" +
    "\032\020\054\037\063\031\116\176\001\002\000\022\002" +
    "\uffde\005\uffde\006\uffde\017\uffde\032\uffde\054\uffde\063\uffde" +
    "\116\uffde\001\002\000\006\112\120\123\121\001\002\000" +
    "\004\114\201\001\002\000\004\115\202\001\002\000\016" +
    "\005\035\006\032\017\022\032\020\054\037\063\031\001" +
    "\002\000\020\005\035\006\032\017\022\032\020\054\037" +
    "\063\031\116\204\001\002\000\022\002\uffdd\005\uffdd\006" +
    "\uffdd\017\uffdd\032\uffdd\054\uffdd\063\uffdd\116\uffdd\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\027" +
    "\004\023\006\026\007\025\010\016\011\020\014\032\015" +
    "\022\016\035\017\024\020\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\154\006\157\007" +
    "\156\010\152\011\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\144\001\001\000\002" +
    "\001\001\000\004\005\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\151\004\023\006\026\007\025" +
    "\010\016\011\020\014\032\015\022\016\035\017\024\020" +
    "\033\001\001\000\014\004\154\006\157\007\156\010\152" +
    "\011\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\161\001\001\000\002\001\001\000" +
    "\004\015\163\001\001\000\002\001\001\000\004\012\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\170\004\023\006\026\007\025\010\016\011\020\014\032" +
    "\015\022\016\035\017\024\020\033\001\001\000\014\004" +
    "\154\006\157\007\156\010\152\011\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\174\004\023\006" +
    "\026\007\025\010\016\011\020\014\032\015\022\016\035" +
    "\017\024\020\033\001\001\000\014\004\154\006\157\007" +
    "\156\010\152\011\153\001\001\000\002\001\001\000\004" +
    "\012\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\202\004\023\006\026\007\025\010\016\011\020" +
    "\014\032\015\022\016\035\017\024\020\033\001\001\000" +
    "\014\004\154\006\157\007\156\010\152\011\153\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoP$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoP$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoP$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoP$actions {
  private final SintacticoP parser;

  /** Constructor */
  CUP$SintacticoP$actions(SintacticoP parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoP$do_action(
    int                        CUP$SintacticoP$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoP$parser,
    java.util.Stack            CUP$SintacticoP$stack,
    int                        CUP$SintacticoP$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoP$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoP$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MULTIPLICACION ::= MULTIPLICACION Op_Multiplicacion MULTIPLICACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoP$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1*num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("MULTIPLICACION",13, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DIVISION ::= DIVISION Op_Division DIVISION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoP$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1/num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DIVISION",14, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RESTA ::= RESTA Op_Resta RESTA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoP$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1-num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("RESTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SUMA ::= SUMA Op_Suma SUMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoP$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1-num2;
    RESULT= (respuesta)+"";

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SUMA",11, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_FOR ::= Op_Incremento Identificador 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_FOR ::= Identificador Op_Incremento 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_FOR ::= Identificador Op_Atribucion Numero 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_FOR ::= Identificador Op_Igual Numero P_Coma SENTENCIA_BOOLEANA P_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_FOR ::= Var Identificador Op_Igual Numero P_Coma SENTENCIA_BOOLEANA P_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FOR ::= For Parentesis_Izq SENTENCIA_FOR Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // WHILE ::= While Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF_ELSE ::= If Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der Else Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Identificador 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Numero 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Op_Booleano 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= If Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= ReadLn Parentesis_Izq Identificador Parentesis_Der P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Write Parentesis_Izq Comillas Identificador Comillas Parentesis_Der P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Var Identificador Op_Igual Comillas Identificador Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Var Identificador Op_Atribucion Comillas Identificador Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Var Identificador Op_Igual Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Var Identificador Op_Atribucion Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Var Op_Incremento Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Var Identificador Op_Incremento P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Var Identificador Op_Igual Numero P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Var Identificador Op_Atribucion Numero P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Var Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= RESTA 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SUMA 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DIVISION 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Program Identificador Parentesis_Izq Identificador P_Coma Identificador Parentesis_Der P_Coma Begin SENTENCIA 
            {
              Object RESULT =null;

              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          return CUP$SintacticoP$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoP$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.elementAt(CUP$SintacticoP$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoP$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoP$parser.done_parsing();
          return CUP$SintacticoP$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

