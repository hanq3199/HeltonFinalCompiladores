
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 29 04:00:54 CST 2021
//----------------------------------------------------

package codigoPLSQL;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 29 04:00:54 CST 2021
  */
public class SintacticoPl extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoPl() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoPl(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoPl(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\006\000\002\004\006\000" +
    "\002\006\011\000\002\012\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\006\000\002\012" +
    "\007\000\002\007\015\000\002\010\011\000\002\015\005" +
    "\000\002\016\005\000\002\020\005\000\002\017\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\004\000\004\051\004\001\002\000\004\002\000\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\004\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoPl$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoPl$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoPl$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoPl$actions {
  private final SintacticoPl parser;

  /** Constructor */
  CUP$SintacticoPl$actions(SintacticoPl parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoPl$do_action(
    int                        CUP$SintacticoPl$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoPl$parser,
    java.util.Stack            CUP$SintacticoPl$stack,
    int                        CUP$SintacticoPl$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoPl$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoPl$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MULTIPLICACION ::= MULTIPLICACION Op_Multiplicacion MULTIPLICACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoPl$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1*num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("MULTIPLICACION",13, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DIVISION ::= DIVISION Op_Division DIVISION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoPl$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1/num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("DIVISION",14, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RESTA ::= RESTA Op_Resta RESTA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoPl$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1-num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("RESTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SUMA ::= SUMA Op_Suma SUMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoPl$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1-num2;
    RESULT= (respuesta)+"";

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SUMA",11, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // WHILE ::= While Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF_ELSE ::= If Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der Else Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Identificador 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Numero 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Op_Booleano 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= If Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Integer Op_Incremento Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Integer Identificador Op_Incremento P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Integer Identificador Op_Igual Numero P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Integer Identificador Op_Atribucion Numero P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Integer Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= RESTA 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= SUMA 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= DIVISION 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Create 
            {
              Object RESULT =null;

              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          return CUP$SintacticoPl$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoPl$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.elementAt(CUP$SintacticoPl$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoPl$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoPl$parser.done_parsing();
          return CUP$SintacticoPl$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

