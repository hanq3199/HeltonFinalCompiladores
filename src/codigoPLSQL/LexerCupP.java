/* The following code was generated by JFlex 1.4.3 on 29/05/21 03:49 AM */

package codigoPLSQL;
import java_cup.runtime.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/05/21 03:49 AM from the specification file
 * <tt>LexerCupP.flex</tt>
 */
public class LexerCupP implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\6\2\0\1\3\22\0\1\3\1\53\1\7\2\0"+
    "\1\54\2\0\1\61\1\62\1\50\1\46\1\3\1\47\1\4\1\5"+
    "\2\2\1\22\7\2\1\70\1\67\1\52\1\45\1\51\2\0\1\20"+
    "\1\13\1\16\1\25\1\14\1\34\1\33\1\17\1\31\1\1\1\44"+
    "\1\24\1\12\1\10\1\23\1\30\1\1\1\15\1\35\1\26\1\11"+
    "\1\21\1\36\1\32\1\27\1\1\1\65\1\0\1\66\1\0\1\1"+
    "\1\0\1\56\3\1\1\40\1\55\5\1\1\57\1\1\1\43\3\1"+
    "\1\37\1\60\1\41\1\42\5\1\1\63\1\0\1\64\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\24\3\1\11\1\12\1\13\1\14\2\15\2\2\1\3"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\1\1\0\1\5\1\26\6\3\1\27\14\3\1\30"+
    "\1\3\1\31\15\3\1\32\12\3\1\15\1\33\1\3"+
    "\1\0\1\34\2\3\1\31\5\3\1\35\4\3\1\36"+
    "\6\3\1\37\27\3\1\40\10\3\1\0\1\3\1\41"+
    "\5\3\1\42\1\43\1\3\1\44\3\3\1\45\10\3"+
    "\1\46\1\47\1\50\1\51\2\3\1\52\1\53\1\54"+
    "\1\3\1\55\1\3\1\56\3\3\1\57\1\3\1\60"+
    "\1\3\1\61\3\3\1\62\2\3\1\63\1\4\2\3"+
    "\1\64\3\3\1\65\3\3\1\66\1\3\1\67\1\70"+
    "\2\3\1\71\4\3\1\72\1\73\1\74\3\3\1\75"+
    "\2\3\1\76\1\3\1\77\1\100\1\101\1\3\1\102"+
    "\1\103\1\3\1\104\1\105\1\3\1\106\1\107\1\3"+
    "\1\110\2\3\1\111\1\3\1\112\1\3\1\113\1\114"+
    "\2\3\1\115\1\116\1\117\2\3\1\120\1\121\1\122"+
    "\1\3\1\123";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\71\0\u011d\0\71"+
    "\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5"+
    "\0\u031e\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\u05ca\0\u0675\0\u0720\0\u0759\0\71\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\u0792\0\u07cb\0\u0804"+
    "\0\71\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\162"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\162\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\71"+
    "\0\71\0\u1209\0\u1242\0\u07cb\0\u127b\0\u12b4\0\162\0\u12ed"+
    "\0\u1326\0\u135f\0\u1398\0\u13d1\0\162\0\u140a\0\u1443\0\u147c"+
    "\0\u14b5\0\162\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\162\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\162\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9"+
    "\0\u1cf2\0\u1d2b\0\u1d64\0\162\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\162\0\162\0\u1eba\0\162\0\u1ef3\0\u1f2c\0\u1f65"+
    "\0\162\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4"+
    "\0\u212d\0\162\0\162\0\162\0\162\0\u2166\0\u219f\0\162"+
    "\0\162\0\162\0\u21d8\0\162\0\u2211\0\162\0\u224a\0\u2283"+
    "\0\u22bc\0\162\0\u22f5\0\162\0\u232e\0\162\0\u2367\0\u23a0"+
    "\0\u23d9\0\162\0\u2412\0\u244b\0\162\0\71\0\u2484\0\u24bd"+
    "\0\162\0\u24f6\0\u252f\0\u2568\0\162\0\u25a1\0\u25da\0\u2613"+
    "\0\162\0\u264c\0\162\0\162\0\u2685\0\u26be\0\162\0\u26f7"+
    "\0\u2730\0\u2769\0\u27a2\0\162\0\162\0\162\0\u27db\0\u2814"+
    "\0\u284d\0\162\0\u2886\0\u28bf\0\162\0\u28f8\0\162\0\162"+
    "\0\162\0\u2931\0\162\0\162\0\u296a\0\162\0\162\0\u29a3"+
    "\0\162\0\162\0\u29dc\0\162\0\u2a15\0\u2a4e\0\162\0\u2a87"+
    "\0\162\0\u2ac0\0\162\0\162\0\u2af9\0\u2b32\0\162\0\162"+
    "\0\162\0\u2b6b\0\u2ba4\0\162\0\162\0\162\0\u2bdd\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\5\1\10"+
    "\1\11\1\12\1\3\1\13\1\14\1\15\1\16\1\3"+
    "\1\17\1\20\1\4\1\21\1\22\1\23\1\24\1\3"+
    "\1\25\1\26\1\3\1\27\1\30\1\31\1\32\1\33"+
    "\1\3\1\34\3\3\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\3\3\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\72\0\2\3\1\56"+
    "\2\0\1\56\1\0\35\3\10\0\4\3\11\0\1\56"+
    "\1\4\1\56\1\57\1\0\1\56\1\0\12\56\1\4"+
    "\22\56\10\0\4\56\11\0\2\56\1\5\2\0\1\5"+
    "\1\0\35\56\10\0\4\56\15\0\1\60\37\0\1\61"+
    "\24\0\2\3\1\56\2\0\1\56\1\0\1\3\1\62"+
    "\2\3\1\63\6\3\1\64\21\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\20\3\1\65\14\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\66\6\3\1\67\3\3\1\70\1\3\1\71"+
    "\13\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\1\72\7\3\1\73\3\3\1\74\5\3\1\75"+
    "\12\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\13\3\1\76\21\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\5\3\1\77\1\3\1\100"+
    "\3\3\1\101\1\102\20\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\1\103\13\3\1\104\10\3"+
    "\1\105\7\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\10\3\1\106\24\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\5\3\1\107\10\3"+
    "\1\110\1\3\1\111\14\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\10\3\1\112\2\3\1\113"+
    "\21\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\1\3\1\114\2\3\1\115\3\3\1\116\24\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\5\3\1\117\1\3\1\120\1\121\6\3\1\122\15\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\5\3\1\123\27\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\1\124\23\3\1\125\10\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\13\3"+
    "\1\126\21\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\1\3\1\127\3\3\1\130\5\3\1\131"+
    "\5\3\1\132\13\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\4\3\1\133\3\3\1\134\24\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\7\3\1\135\25\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\30\3\1\136\4\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\27\3\1\137"+
    "\5\3\10\0\4\3\55\0\1\140\70\0\1\61\1\141"+
    "\67\0\1\61\1\0\1\141\66\0\1\61\70\0\1\140"+
    "\3\0\1\140\64\0\1\140\4\0\1\140\17\0\2\3"+
    "\1\56\2\0\1\56\1\0\35\3\10\0\1\3\1\142"+
    "\2\3\57\0\1\143\22\0\3\56\2\0\1\56\1\0"+
    "\35\56\10\0\4\56\12\0\1\144\17\0\1\144\46\0"+
    "\6\60\1\0\62\60\1\0\2\3\1\56\2\0\1\56"+
    "\1\0\2\3\1\145\32\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\22\3\1\146\12\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\16\3"+
    "\1\147\16\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\15\3\1\150\17\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\23\3\1\151\1\152"+
    "\10\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\13\3\1\153\21\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\1\154\34\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\15\3\1\155"+
    "\17\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\6\3\1\156\26\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\25\3\1\157\7\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\21\3"+
    "\1\160\13\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\14\3\1\161\11\3\1\162\6\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\4\3"+
    "\1\163\30\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\10\3\1\164\24\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\1\3\1\165\1\166"+
    "\32\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\13\3\1\167\21\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\15\3\1\147\17\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\16\3"+
    "\1\170\16\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\6\3\1\171\26\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\5\3\1\172\6\3"+
    "\1\173\20\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\15\3\1\174\17\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\7\3\1\175\25\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\176\30\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\25\3\1\177\7\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\13\3\1\200"+
    "\21\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\10\3\1\201\24\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\6\3\1\202\5\3\1\203"+
    "\10\3\1\204\7\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\16\3\1\205\16\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\21\3\1\206"+
    "\13\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\4\3\1\207\30\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\3\3\1\210\31\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\20\3"+
    "\1\211\14\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\21\3\1\212\13\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\15\3\1\213\1\214"+
    "\6\3\1\215\7\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\16\3\1\216\16\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\1\217\34\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\13\3\1\220\21\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\5\3\1\221\27\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\5\3\1\222"+
    "\27\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\14\3\1\223\20\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\11\3\1\224\23\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\4\3"+
    "\1\225\14\3\1\226\13\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\31\3\1\227\3\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\32\3"+
    "\1\230\2\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\35\3\10\0\2\3\1\231\1\3\12\0"+
    "\1\232\17\0\1\232\47\0\2\3\1\56\2\0\1\56"+
    "\1\0\3\3\1\233\31\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\16\3\1\234\16\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\10\3"+
    "\1\235\24\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\21\3\1\236\13\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\13\3\1\237\21\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\14\3\1\240\20\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\10\3\1\241\24\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\7\3\1\242"+
    "\25\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\4\3\1\243\14\3\1\244\13\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\16\3\1\245"+
    "\6\3\1\246\7\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\14\3\1\247\20\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\10\3\1\250"+
    "\24\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\5\3\1\251\27\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\1\252\34\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\2\3\1\253"+
    "\32\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\25\3\1\254\7\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\4\3\1\255\30\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\6\3"+
    "\1\256\26\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\1\3\1\257\33\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\4\3\1\260\30\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\261\30\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\1\262\34\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\16\3\1\263\16\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\20\3\1\264\14\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\14\3\1\265\20\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\14\3\1\266"+
    "\20\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\4\3\1\267\30\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\6\3\1\270\26\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\4\3"+
    "\1\271\30\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\2\3\1\272\20\3\1\273\11\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\1\274"+
    "\34\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\14\3\1\275\20\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\4\3\1\276\30\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\13\3"+
    "\1\277\21\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\4\3\1\300\30\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\4\3\1\301\6\3"+
    "\1\302\21\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\4\3\1\303\30\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\13\3\1\304\21\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\6\3\1\305\26\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\2\3\1\306\32\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\25\3\1\307"+
    "\7\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\4\3\1\310\30\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\4\3\1\311\30\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\1\312"+
    "\34\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\14\3\1\313\20\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\32\3\1\314\2\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\30\3"+
    "\1\315\4\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\35\3\10\0\3\3\1\230\12\0\1\232"+
    "\17\0\1\232\37\0\1\316\7\0\2\3\1\56\2\0"+
    "\1\56\1\0\4\3\1\317\30\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\16\3\1\320\16\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\1\321\34\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\5\3\1\322\27\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\4\3\1\323\30\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\5\3\1\324\27\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\24\3\1\325\10\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\16\3\1\326"+
    "\16\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\3\3\1\327\31\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\16\3\1\330\16\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\16\3"+
    "\1\331\16\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\21\3\1\332\13\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\4\3\1\333\30\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\5\3\1\334\27\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\7\3\1\335\25\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\4\3\1\336"+
    "\30\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\5\3\1\337\27\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\5\3\1\340\27\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\10\3"+
    "\1\341\24\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\16\3\1\342\16\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\23\3\1\343\11\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\344\30\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\5\3\1\345\27\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\22\3\1\346"+
    "\12\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\23\3\1\347\11\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\5\3\1\350\27\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\16\3"+
    "\1\351\16\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\16\3\1\352\16\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\6\3\1\353\26\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\20\3\1\354\14\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\4\3\1\355\30\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\27\3\1\356"+
    "\5\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\5\3\1\357\27\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\4\3\1\360\30\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\4\3"+
    "\1\361\30\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\10\3\1\362\24\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\17\3\1\363\15\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\25\3\1\364\7\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\10\3\1\365\24\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\4\3\1\366"+
    "\30\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\16\3\1\367\16\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\10\3\1\370\24\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\25\3"+
    "\1\371\7\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\25\3\1\372\7\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\5\3\1\373\27\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\374\30\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\4\3\1\375\30\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\4\3\1\376"+
    "\30\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\16\3\1\377\16\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\21\3\1\u0100\13\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\16\3"+
    "\1\u0101\16\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\13\3\1\u0102\21\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\33\3\1\u0103\1\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\1\u0104\34\3\10\0\4\3\11\0\2\3\1\56\2\0"+
    "\1\56\1\0\6\3\1\u0105\26\3\10\0\4\3\11\0"+
    "\2\3\1\56\2\0\1\56\1\0\5\3\1\u0106\27\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\4\3\1\u0107\30\3\10\0\4\3\11\0\2\3\1\56"+
    "\2\0\1\56\1\0\5\3\1\u0108\27\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\5\3\1\u0109"+
    "\27\3\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\13\3\1\u010a\21\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\21\3\1\u010b\13\3\10\0"+
    "\4\3\11\0\2\3\1\56\2\0\1\56\1\0\34\3"+
    "\1\u010c\10\0\4\3\11\0\2\3\1\56\2\0\1\56"+
    "\1\0\12\3\1\u010d\22\3\10\0\4\3\11\0\2\3"+
    "\1\56\2\0\1\56\1\0\1\u010e\34\3\10\0\4\3"+
    "\11\0\2\3\1\56\2\0\1\56\1\0\1\u010f\34\3"+
    "\10\0\4\3\11\0\2\3\1\56\2\0\1\56\1\0"+
    "\16\3\1\u0110\16\3\10\0\4\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11286];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\3\1\1\11\1\1\1\11\36\1\7\11"+
    "\1\1\1\0\1\1\1\11\56\1\2\11\1\1\1\0"+
    "\66\1\1\0\63\1\1\11\102\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCupP(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexerCupP(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return new Symbol(sym.Comillas, yychar, yyline, yytext());
          }
        case 84: break;
        case 13: 
          { return new Symbol(sym.Op_Relacional, yychar, yyline, yytext());
          }
        case 85: break;
        case 55: 
          { return new Symbol(sym.Close, yychar, yyline, yytext());
          }
        case 86: break;
        case 60: 
          { return new Symbol(sym.Index, yychar, yyline, yytext());
          }
        case 87: break;
        case 74: 
          { return new Symbol(sym.Select, yychar, yyline, yytext());
          }
        case 88: break;
        case 70: 
          { return new Symbol(sym.Values, yychar, yyline, yytext());
          }
        case 89: break;
        case 32: 
          { return new Symbol(sym.For, yychar, yyline, yytext());
          }
        case 90: break;
        case 33: 
          { return new Symbol(sym.Next, yychar, yyline, yytext());
          }
        case 91: break;
        case 57: 
          { return new Symbol(sym.Order, yychar, yyline, yytext());
          }
        case 92: break;
        case 34: 
          { return new Symbol(sym.Each, yychar, yyline, yytext());
          }
        case 93: break;
        case 63: 
          { return new Symbol(sym.Number, yychar, yyline, yytext());
          }
        case 94: break;
        case 24: 
          { return new Symbol(sym.As, yychar, yyline, yytext());
          }
        case 95: break;
        case 56: 
          { return new Symbol(sym.Alter, yychar, yyline, yytext());
          }
        case 96: break;
        case 36: 
          { return new Symbol(sym.Exit, yychar, yyline, yytext());
          }
        case 97: break;
        case 12: 
          { return new Symbol(sym.Op_Multiplicacion, yychar, yyline, yytext());
          }
        case 98: break;
        case 28: 
          { return new Symbol(sym.Real, yycolumn,yyline,new String(yytext()));
          }
        case 99: break;
        case 83: 
          { return new Symbol(sym.Savepoint, yychar, yyline, yytext());
          }
        case 100: break;
        case 7: 
          { return new Symbol(sym.Op_Division, yychar, yyline, yytext());
          }
        case 101: break;
        case 72: 
          { return new Symbol(sym.Delete, yychar, yyline, yytext());
          }
        case 102: break;
        case 61: 
          { return new Symbol(sym.First, yychar, yyline, yytext());
          }
        case 103: break;
        case 69: 
          { return new Symbol(sym.Commit, yychar, yyline, yytext());
          }
        case 104: break;
        case 49: 
          { return new Symbol(sym.From, yychar, yyline, yytext());
          }
        case 105: break;
        case 66: 
          { return new Symbol(sym.Binary, yychar, yyline, yytext());
          }
        case 106: break;
        case 5: 
          { /*Ignore*/
          }
        case 107: break;
        case 16: 
          { return new Symbol(sym.Llave_Izq, yychar, yyline, yytext());
          }
        case 108: break;
        case 54: 
          { return new Symbol(sym.Count, yychar, yyline, yytext());
          }
        case 109: break;
        case 9: 
          { return new Symbol(sym.Op_Igual, yychar, yyline, yytext());
          }
        case 110: break;
        case 53: 
          { return new Symbol(sym.Elsif, yychar, yyline, yytext());
          }
        case 111: break;
        case 42: 
          { return new Symbol(sym.Desc, yychar, yyline, yytext());
          }
        case 112: break;
        case 22: 
          { return new Symbol(sym.Op_Atribucion, yychar, yyline, yytext());
          }
        case 113: break;
        case 2: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 114: break;
        case 80: 
          { return new Symbol(sym.Rollback, yychar, yyline, yytext());
          }
        case 115: break;
        case 71: 
          { return new Symbol(sym.Others, yychar, yyline, yytext());
          }
        case 116: break;
        case 76: 
          { return new Symbol(sym.Boolean, yychar, yyline, yytext());
          }
        case 117: break;
        case 39: 
          { return new Symbol(sym.Last, yychar, yyline, yytext());
          }
        case 118: break;
        case 58: 
          { return new Symbol(sym.Table, yychar, yyline, yytext());
          }
        case 119: break;
        case 73: 
          { return new Symbol(sym.Insert, yychar, yyline, yytext());
          }
        case 120: break;
        case 44: 
          { return new Symbol(sym.Trim, yychar, yyline, yytext());
          }
        case 121: break;
        case 3: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 122: break;
        case 30: 
          { return new Symbol(sym.Row, yychar, yyline, yytext());
          }
        case 123: break;
        case 35: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 124: break;
        case 38: 
          { return new Symbol(sym.Open, yychar, yyline, yytext());
          }
        case 125: break;
        case 79: 
          { return new Symbol(sym.Integer, yychar, yyline, yytext());
          }
        case 126: break;
        case 31: 
          { return new Symbol(sym.Asc, yychar, yyline, yytext());
          }
        case 127: break;
        case 52: 
          { return new Symbol(sym.Begin, yychar, yyline, yytext());
          }
        case 128: break;
        case 21: 
          { return new Symbol(sym.Dos_Puntos, yychar, yyline, yytext());
          }
        case 129: break;
        case 17: 
          { return new Symbol(sym.Llave_Der, yychar, yyline, yytext());
          }
        case 130: break;
        case 18: 
          { return new Symbol(sym.Corchete_Izq, yychar, yyline, yytext());
          }
        case 131: break;
        case 11: 
          { return new Symbol(sym.Op_Resta, yychar, yyline, yytext());
          }
        case 132: break;
        case 41: 
          { return new Symbol(sym.Dual, yychar, yyline, yytext());
          }
        case 133: break;
        case 51: 
          { return new Symbol(sym.Op_Booleano, yychar, yyline, yytext());
          }
        case 134: break;
        case 40: 
          { return new Symbol(sym.Loop, yychar, yyline, yytext());
          }
        case 135: break;
        case 47: 
          { return new Symbol(sym.Into, yychar, yyline, yytext());
          }
        case 136: break;
        case 64: 
          { return new Symbol(sym.Update, yychar, yyline, yytext());
          }
        case 137: break;
        case 50: 
          { return new Symbol(sym.When, yychar, yyline, yytext());
          }
        case 138: break;
        case 10: 
          { return new Symbol(sym.Op_Suma, yychar, yyline, yytext());
          }
        case 139: break;
        case 45: 
          { return new Symbol(sym.Then, yychar, yyline, yytext());
          }
        case 140: break;
        case 82: 
          { return new Symbol(sym.Function, yychar, yyline, yytext());
          }
        case 141: break;
        case 26: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 142: break;
        case 20: 
          { return new Symbol(sym.P_Coma, yychar, yyline, yytext());
          }
        case 143: break;
        case 6: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 144: break;
        case 14: 
          { return new Symbol(sym.Parentesis_Izq, yychar, yyline, yytext());
          }
        case 145: break;
        case 25: 
          { return new Symbol(sym.Op_Logico, yychar, yyline, yytext());
          }
        case 146: break;
        case 43: 
          { return new Symbol(sym.Date, yychar, yyline, yytext());
          }
        case 147: break;
        case 67: 
          { return new Symbol(sym.Exists, yychar, yyline, yytext());
          }
        case 148: break;
        case 59: 
          { return new Symbol(sym.Prior, yychar, yyline, yytext());
          }
        case 149: break;
        case 48: 
          { return new Symbol(sym.Goto, yychar, yyline, yytext());
          }
        case 150: break;
        case 46: 
          { return new Symbol(sym.Type, yychar, yyline, yytext());
          }
        case 151: break;
        case 1: 
          { return new Symbol(sym.Texto, yycolumn,yyline,new String(yytext()));
          }
        case 152: break;
        case 19: 
          { return new Symbol(sym.Corchete_Der, yychar, yyline, yytext());
          }
        case 153: break;
        case 27: 
          { return new Symbol(sym.Op_Incremento, yychar, yyline, yytext());
          }
        case 154: break;
        case 29: 
          { return new Symbol(sym.End, yychar, yyline, yytext());
          }
        case 155: break;
        case 75: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 156: break;
        case 62: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 157: break;
        case 4: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 158: break;
        case 77: 
          { return new Symbol(sym.Declare, yychar, yyline, yytext());
          }
        case 159: break;
        case 37: 
          { return new Symbol(sym.Char, yychar, yyline, yytext());
          }
        case 160: break;
        case 23: 
          { return new Symbol(sym.By, yychar, yyline, yytext());
          }
        case 161: break;
        case 68: 
          { return new Symbol(sym.Create, yychar, yyline, yytext());
          }
        case 162: break;
        case 15: 
          { return new Symbol(sym.Parentesis_Der, yychar, yyline, yytext());
          }
        case 163: break;
        case 81: 
          { return new Symbol(sym.Varchar2, yychar, yyline, yytext());
          }
        case 164: break;
        case 65: 
          { return new Symbol(sym.Before, yychar, yyline, yytext());
          }
        case 165: break;
        case 78: 
          { return new Symbol(sym.Trigger, yychar, yyline, yytext());
          }
        case 166: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
