
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 28 14:50:05 CST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 28 14:50:05 CST 2021
  */
public class SintacticoC extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoC() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoC(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoC(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\004\005\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\004\006\000\002" +
    "\004\005\000\002\004\007\000\002\004\007\000\002\004" +
    "\006\000\002\004\006\000\002\004\010\000\002\004\010" +
    "\000\002\004\011\000\002\004\011\000\002\004\010\000" +
    "\002\004\010\000\002\004\011\000\002\004\011\000\002" +
    "\004\010\000\002\004\013\000\002\004\006\000\002\004" +
    "\010\000\002\004\013\000\002\004\012\000\002\004\011" +
    "\000\002\004\011\000\002\004\010\000\002\004\012\000" +
    "\002\004\012\000\002\004\011\000\002\004\011\000\002" +
    "\004\013\000\002\004\013\000\002\004\014\000\002\004" +
    "\014\000\002\004\013\000\002\004\013\000\002\004\014" +
    "\000\002\004\014\000\002\004\013\000\002\004\016\000" +
    "\002\004\011\000\002\006\011\000\002\012\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\006\000\002\012\007\000\002\007\015\000\002\010\011" +
    "\000\002\011\011\000\002\013\012\000\002\013\011\000" +
    "\002\005\005\000\002\005\004\000\002\005\004\000\002" +
    "\015\005\000\002\016\005\000\002\020\005\000\002\017" +
    "\005\000\002\021\006\000\002\022\010\000\002\022\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\014\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\006\005\004\065\006\001\002\000\004\032" +
    "\u010c\001\002\000\004\002\u010b\001\002\000\004\005\007" +
    "\001\002\000\004\032\010\001\002\000\004\033\011\001" +
    "\002\000\004\034\012\001\002\000\036\007\035\010\040" +
    "\011\037\022\043\023\014\031\041\032\020\050\013\051" +
    "\036\052\030\065\033\066\044\067\024\071\017\001\002" +
    "\000\004\032\u0108\001\002\000\004\032\355\001\002\000" +
    "\032\007\ufff4\010\ufff4\011\ufff4\020\ufff4\022\ufff4\023\ufff4" +
    "\035\ufff4\043\353\065\ufff4\066\ufff4\067\ufff4\071\ufff4\001" +
    "\002\000\030\007\ufff0\010\ufff0\011\ufff0\020\ufff0\022\ufff0" +
    "\023\ufff0\035\ufff0\065\ufff0\066\ufff0\067\ufff0\071\ufff0\001" +
    "\002\000\004\052\320\001\002\000\014\032\020\051\036" +
    "\052\030\065\277\067\276\001\002\000\030\007\ufff7\010" +
    "\ufff7\011\ufff7\020\ufff7\022\ufff7\023\ufff7\035\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\071\ufff7\001\002\000\032\007\ufff2\010" +
    "\ufff2\011\ufff2\020\ufff2\022\ufff2\023\ufff2\035\ufff2\044\314" +
    "\065\ufff2\066\ufff2\067\ufff2\071\ufff2\001\002\000\032\007" +
    "\ufff3\010\ufff3\011\ufff3\020\ufff3\022\ufff3\023\ufff3\035\ufff3" +
    "\042\312\065\ufff3\066\ufff3\067\ufff3\071\ufff3\001\002\000" +
    "\034\007\uffac\010\uffac\011\uffac\020\uffac\022\uffac\023\uffac" +
    "\035\uffac\052\130\056\127\065\uffac\066\uffac\067\uffac\071" +
    "\uffac\001\002\000\030\007\ufffd\010\ufffd\011\ufffd\020\ufffd" +
    "\022\ufffd\023\ufffd\035\ufffd\065\ufffd\066\ufffd\067\ufffd\071" +
    "\ufffd\001\002\000\026\007\035\010\040\011\037\022\043" +
    "\023\014\035\311\065\070\066\044\067\063\071\017\001" +
    "\002\000\030\007\uffef\010\uffef\011\uffef\020\uffef\022\uffef" +
    "\023\uffef\035\uffef\065\uffef\066\uffef\067\uffef\071\uffef\001" +
    "\002\000\034\007\uffab\010\uffab\011\uffab\020\uffab\022\uffab" +
    "\023\uffab\033\uffab\035\uffab\041\uffab\065\uffab\066\uffab\067" +
    "\uffab\071\uffab\001\002\000\030\007\uffee\010\uffee\011\uffee" +
    "\020\uffee\022\uffee\023\uffee\035\uffee\065\uffee\066\uffee\067" +
    "\uffee\071\uffee\001\002\000\030\007\ufffb\010\ufffb\011\ufffb" +
    "\020\ufffb\022\ufffb\023\ufffb\035\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\071\ufffb\001\002\000\034\007\uffad\010\uffad\011\uffad" +
    "\020\uffad\022\uffad\023\uffad\035\uffad\052\073\056\072\065" +
    "\uffad\066\uffad\067\uffad\071\uffad\001\002\000\030\007\ufff9" +
    "\010\ufff9\011\ufff9\020\ufff9\022\ufff9\023\ufff9\035\ufff9\065" +
    "\ufff9\066\ufff9\067\ufff9\071\ufff9\001\002\000\004\054\303" +
    "\001\002\000\004\032\274\001\002\000\004\032\262\001" +
    "\002\000\004\054\236\001\002\000\004\032\223\001\002" +
    "\000\030\007\ufff5\010\ufff5\011\ufff5\020\ufff5\022\ufff5\023" +
    "\ufff5\035\ufff5\065\ufff5\066\ufff5\067\ufff5\071\ufff5\001\002" +
    "\000\004\032\203\001\002\000\004\052\050\001\002\000" +
    "\032\007\ufff1\010\ufff1\011\ufff1\020\ufff1\022\ufff1\023\ufff1" +
    "\035\ufff1\047\046\065\ufff1\066\ufff1\067\ufff1\071\ufff1\001" +
    "\002\000\002\001\002\000\032\007\uffb3\010\uffb3\011\uffb3" +
    "\020\uffb3\022\uffb3\023\uffb3\035\uffb3\047\uffb3\065\uffb3\066" +
    "\uffb3\067\uffb3\071\uffb3\001\002\000\006\046\051\055\052" +
    "\001\002\000\004\004\167\001\002\000\004\004\053\001" +
    "\002\000\006\004\054\052\055\001\002\000\004\041\163" +
    "\001\002\000\004\004\056\001\002\000\004\041\057\001" +
    "\002\000\032\007\uffe1\010\uffe1\011\uffe1\020\uffe1\022\uffe1" +
    "\023\uffe1\034\060\035\uffe1\065\uffe1\066\uffe1\067\uffe1\071" +
    "\uffe1\001\002\000\036\007\035\010\040\011\037\022\043" +
    "\023\014\031\041\032\020\050\013\051\036\052\030\065" +
    "\033\066\044\067\024\071\017\001\002\000\026\007\035" +
    "\010\040\011\037\022\043\023\014\035\066\065\070\066" +
    "\044\067\063\071\017\001\002\000\030\007\ufff8\010\ufff8" +
    "\011\ufff8\020\ufff8\022\ufff8\023\ufff8\035\ufff8\065\ufff8\066" +
    "\ufff8\067\ufff8\071\ufff8\001\002\000\006\052\130\056\127" +
    "\001\002\000\030\007\ufff6\010\ufff6\011\ufff6\020\ufff6\022" +
    "\ufff6\023\ufff6\035\ufff6\065\ufff6\066\ufff6\067\ufff6\071\ufff6" +
    "\001\002\000\030\007\ufffe\010\ufffe\011\ufffe\020\ufffe\022" +
    "\ufffe\023\ufffe\035\ufffe\065\ufffe\066\ufffe\067\ufffe\071\ufffe" +
    "\001\002\000\030\007\uffcc\010\uffcc\011\uffcc\020\uffcc\022" +
    "\uffcc\023\uffcc\035\uffcc\065\uffcc\066\uffcc\067\uffcc\071\uffcc" +
    "\001\002\000\030\007\ufffa\010\ufffa\011\ufffa\020\ufffa\022" +
    "\ufffa\023\ufffa\035\ufffa\065\ufffa\066\ufffa\067\ufffa\071\ufffa" +
    "\001\002\000\006\052\073\056\072\001\002\000\030\007" +
    "\ufffc\010\ufffc\011\ufffc\020\ufffc\022\ufffc\023\ufffc\035\ufffc" +
    "\065\ufffc\066\ufffc\067\ufffc\071\ufffc\001\002\000\004\052" +
    "\122\001\002\000\012\041\074\046\076\055\077\056\075" +
    "\001\002\000\032\007\uffed\010\uffed\011\uffed\020\uffed\022" +
    "\uffed\023\uffed\034\117\035\uffed\065\uffed\066\uffed\067\uffed" +
    "\071\uffed\001\002\000\004\041\113\001\002\000\004\060" +
    "\106\001\002\000\004\060\100\001\002\000\004\041\101" +
    "\001\002\000\032\007\uffec\010\uffec\011\uffec\020\uffec\022" +
    "\uffec\023\uffec\035\uffec\041\102\065\uffec\066\uffec\067\uffec" +
    "\071\uffec\001\002\000\004\034\103\001\002\000\036\007" +
    "\035\010\040\011\037\022\043\023\014\031\041\032\020" +
    "\050\013\051\036\052\030\065\033\066\044\067\024\071" +
    "\017\001\002\000\026\007\035\010\040\011\037\022\043" +
    "\023\014\035\105\065\070\066\044\067\063\071\017\001" +
    "\002\000\030\007\uffd7\010\uffd7\011\uffd7\020\uffd7\022\uffd7" +
    "\023\uffd7\035\uffd7\065\uffd7\066\uffd7\067\uffd7\071\uffd7\001" +
    "\002\000\004\041\107\001\002\000\032\007\uffeb\010\uffeb" +
    "\011\uffeb\020\uffeb\022\uffeb\023\uffeb\034\110\035\uffeb\065" +
    "\uffeb\066\uffeb\067\uffeb\071\uffeb\001\002\000\036\007\035" +
    "\010\040\011\037\022\043\023\014\031\041\032\020\050" +
    "\013\051\036\052\030\065\033\066\044\067\024\071\017" +
    "\001\002\000\026\007\035\010\040\011\037\022\043\023" +
    "\014\035\112\065\070\066\044\067\063\071\017\001\002" +
    "\000\030\007\uffd6\010\uffd6\011\uffd6\020\uffd6\022\uffd6\023" +
    "\uffd6\035\uffd6\065\uffd6\066\uffd6\067\uffd6\071\uffd6\001\002" +
    "\000\032\007\uffea\010\uffea\011\uffea\020\uffea\022\uffea\023" +
    "\uffea\034\114\035\uffea\065\uffea\066\uffea\067\uffea\071\uffea" +
    "\001\002\000\036\007\035\010\040\011\037\022\043\023" +
    "\014\031\041\032\020\050\013\051\036\052\030\065\033" +
    "\066\044\067\024\071\017\001\002\000\026\007\035\010" +
    "\040\011\037\022\043\023\014\035\116\065\070\066\044" +
    "\067\063\071\017\001\002\000\030\007\uffd5\010\uffd5\011" +
    "\uffd5\020\uffd5\022\uffd5\023\uffd5\035\uffd5\065\uffd5\066\uffd5" +
    "\067\uffd5\071\uffd5\001\002\000\036\007\035\010\040\011" +
    "\037\022\043\023\014\031\041\032\020\050\013\051\036" +
    "\052\030\065\033\066\044\067\024\071\017\001\002\000" +
    "\026\007\035\010\040\011\037\022\043\023\014\035\121" +
    "\065\070\066\044\067\063\071\017\001\002\000\030\007" +
    "\uffd8\010\uffd8\011\uffd8\020\uffd8\022\uffd8\023\uffd8\035\uffd8" +
    "\065\uffd8\066\uffd8\067\uffd8\071\uffd8\001\002\000\004\041" +
    "\123\001\002\000\032\007\uffe9\010\uffe9\011\uffe9\020\uffe9" +
    "\022\uffe9\023\uffe9\034\124\035\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\071\uffe9\001\002\000\036\007\035\010\040\011\037" +
    "\022\043\023\014\031\041\032\020\050\013\051\036\052" +
    "\030\065\033\066\044\067\024\071\017\001\002\000\026" +
    "\007\035\010\040\011\037\022\043\023\014\035\126\065" +
    "\070\066\044\067\063\071\017\001\002\000\030\007\uffd4" +
    "\010\uffd4\011\uffd4\020\uffd4\022\uffd4\023\uffd4\035\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\071\uffd4\001\002\000\004\052\156" +
    "\001\002\000\012\041\131\046\133\055\134\056\132\001" +
    "\002\000\032\007\uffe8\010\uffe8\011\uffe8\020\uffe8\022\uffe8" +
    "\023\uffe8\034\153\035\uffe8\065\uffe8\066\uffe8\067\uffe8\071" +
    "\uffe8\001\002\000\004\041\147\001\002\000\004\061\142" +
    "\001\002\000\004\061\135\001\002\000\004\041\136\001" +
    "\002\000\032\007\uffe7\010\uffe7\011\uffe7\020\uffe7\022\uffe7" +
    "\023\uffe7\034\137\035\uffe7\065\uffe7\066\uffe7\067\uffe7\071" +
    "\uffe7\001\002\000\036\007\035\010\040\011\037\022\043" +
    "\023\014\031\041\032\020\050\013\051\036\052\030\065" +
    "\033\066\044\067\024\071\017\001\002\000\026\007\035" +
    "\010\040\011\037\022\043\023\014\035\141\065\070\066" +
    "\044\067\063\071\017\001\002\000\030\007\uffd2\010\uffd2" +
    "\011\uffd2\020\uffd2\022\uffd2\023\uffd2\035\uffd2\065\uffd2\066" +
    "\uffd2\067\uffd2\071\uffd2\001\002\000\004\041\143\001\002" +
    "\000\032\007\uffe6\010\uffe6\011\uffe6\020\uffe6\022\uffe6\023" +
    "\uffe6\034\144\035\uffe6\065\uffe6\066\uffe6\067\uffe6\071\uffe6" +
    "\001\002\000\036\007\035\010\040\011\037\022\043\023" +
    "\014\031\041\032\020\050\013\051\036\052\030\065\033" +
    "\066\044\067\024\071\017\001\002\000\026\007\035\010" +
    "\040\011\037\022\043\023\014\035\146\065\070\066\044" +
    "\067\063\071\017\001\002\000\030\007\uffd1\010\uffd1\011" +
    "\uffd1\020\uffd1\022\uffd1\023\uffd1\035\uffd1\065\uffd1\066\uffd1" +
    "\067\uffd1\071\uffd1\001\002\000\032\007\uffe5\010\uffe5\011" +
    "\uffe5\020\uffe5\022\uffe5\023\uffe5\034\150\035\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\071\uffe5\001\002\000\036\007\035\010" +
    "\040\011\037\022\043\023\014\031\041\032\020\050\013" +
    "\051\036\052\030\065\033\066\044\067\024\071\017\001" +
    "\002\000\026\007\035\010\040\011\037\022\043\023\014" +
    "\035\152\065\070\066\044\067\063\071\017\001\002\000" +
    "\030\007\uffd0\010\uffd0\011\uffd0\020\uffd0\022\uffd0\023\uffd0" +
    "\035\uffd0\065\uffd0\066\uffd0\067\uffd0\071\uffd0\001\002\000" +
    "\036\007\035\010\040\011\037\022\043\023\014\031\041" +
    "\032\020\050\013\051\036\052\030\065\033\066\044\067" +
    "\024\071\017\001\002\000\026\007\035\010\040\011\037" +
    "\022\043\023\014\035\155\065\070\066\044\067\063\071" +
    "\017\001\002\000\030\007\uffd3\010\uffd3\011\uffd3\020\uffd3" +
    "\022\uffd3\023\uffd3\035\uffd3\065\uffd3\066\uffd3\067\uffd3\071" +
    "\uffd3\001\002\000\004\041\157\001\002\000\032\007\uffe4" +
    "\010\uffe4\011\uffe4\020\uffe4\022\uffe4\023\uffe4\034\160\035" +
    "\uffe4\065\uffe4\066\uffe4\067\uffe4\071\uffe4\001\002\000\036" +
    "\007\035\010\040\011\037\022\043\023\014\031\041\032" +
    "\020\050\013\051\036\052\030\065\033\066\044\067\024" +
    "\071\017\001\002\000\026\007\035\010\040\011\037\022" +
    "\043\023\014\035\162\065\070\066\044\067\063\071\017" +
    "\001\002\000\030\007\uffcf\010\uffcf\011\uffcf\020\uffcf\022" +
    "\uffcf\023\uffcf\035\uffcf\065\uffcf\066\uffcf\067\uffcf\071\uffcf" +
    "\001\002\000\032\007\uffe3\010\uffe3\011\uffe3\020\uffe3\022" +
    "\uffe3\023\uffe3\034\164\035\uffe3\065\uffe3\066\uffe3\067\uffe3" +
    "\071\uffe3\001\002\000\036\007\035\010\040\011\037\022" +
    "\043\023\014\031\041\032\020\050\013\051\036\052\030" +
    "\065\033\066\044\067\024\071\017\001\002\000\026\007" +
    "\035\010\040\011\037\022\043\023\014\035\166\065\070" +
    "\066\044\067\063\071\017\001\002\000\030\007\uffce\010" +
    "\uffce\011\uffce\020\uffce\022\uffce\023\uffce\035\uffce\065\uffce" +
    "\066\uffce\067\uffce\071\uffce\001\002\000\006\004\170\052" +
    "\171\001\002\000\004\041\177\001\002\000\004\004\172" +
    "\001\002\000\004\041\173\001\002\000\032\007\uffe0\010" +
    "\uffe0\011\uffe0\020\uffe0\022\uffe0\023\uffe0\034\174\035\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\071\uffe0\001\002\000\036\007" +
    "\035\010\040\011\037\022\043\023\014\031\041\032\020" +
    "\050\013\051\036\052\030\065\033\066\044\067\024\071" +
    "\017\001\002\000\026\007\035\010\040\011\037\022\043" +
    "\023\014\035\176\065\070\066\044\067\063\071\017\001" +
    "\002\000\030\007\uffcb\010\uffcb\011\uffcb\020\uffcb\022\uffcb" +
    "\023\uffcb\035\uffcb\065\uffcb\066\uffcb\067\uffcb\071\uffcb\001" +
    "\002\000\032\007\uffe2\010\uffe2\011\uffe2\020\uffe2\022\uffe2" +
    "\023\uffe2\034\200\035\uffe2\065\uffe2\066\uffe2\067\uffe2\071" +
    "\uffe2\001\002\000\036\007\035\010\040\011\037\022\043" +
    "\023\014\031\041\032\020\050\013\051\036\052\030\065" +
    "\033\066\044\067\024\071\017\001\002\000\026\007\035" +
    "\010\040\011\037\022\043\023\014\035\202\065\070\066" +
    "\044\067\063\071\017\001\002\000\030\007\uffcd\010\uffcd" +
    "\011\uffcd\020\uffcd\022\uffcd\023\uffcd\035\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\071\uffcd\001\002\000\006\052\206\057\205" +
    "\001\002\000\004\033\217\001\002\000\006\033\uffc2\041" +
    "\uffc2\001\002\000\004\054\207\001\002\000\012\004\211" +
    "\052\213\057\212\060\210\001\002\000\006\033\uffc0\041" +
    "\uffc0\001\002\000\006\004\214\052\215\001\002\000\006" +
    "\033\uffc1\041\uffc1\001\002\000\006\033\uffbf\041\uffbf\001" +
    "\002\000\006\033\uffbe\041\uffbe\001\002\000\004\004\216" +
    "\001\002\000\006\033\uffbd\041\uffbd\001\002\000\004\034" +
    "\220\001\002\000\036\007\035\010\040\011\037\022\043" +
    "\023\014\031\041\032\020\050\013\051\036\052\030\065" +
    "\033\066\044\067\024\071\017\001\002\000\026\007\035" +
    "\010\040\011\037\022\043\023\014\035\222\065\070\066" +
    "\044\067\063\071\017\001\002\000\030\007\uffbb\010\uffbb" +
    "\011\uffbb\020\uffbb\022\uffbb\023\uffbb\035\uffbb\065\uffbb\066" +
    "\uffbb\067\uffbb\071\uffbb\001\002\000\004\052\224\001\002" +
    "\000\004\033\225\001\002\000\004\034\226\001\002\000" +
    "\004\017\227\001\002\000\004\052\230\001\002\000\004" +
    "\041\231\001\002\000\036\007\035\010\040\011\037\022" +
    "\043\023\014\031\041\032\020\050\013\051\036\052\030" +
    "\065\033\066\044\067\024\071\017\001\002\000\026\007" +
    "\035\010\040\011\037\020\233\022\043\023\014\065\070" +
    "\066\044\067\063\071\017\001\002\000\004\041\234\001" +
    "\002\000\004\035\235\001\002\000\030\007\uffaa\010\uffaa" +
    "\011\uffaa\020\uffaa\022\uffaa\023\uffaa\035\uffaa\065\uffaa\066" +
    "\uffaa\067\uffaa\071\uffaa\001\002\000\004\004\237\001\002" +
    "\000\006\037\240\052\241\001\002\000\004\052\252\001" +
    "\002\000\004\004\242\001\002\000\004\041\243\001\002" +
    "\000\034\007\uffdb\010\uffdb\011\uffdb\020\uffdb\022\uffdb\023" +
    "\uffdb\034\244\035\uffdb\044\245\065\uffdb\066\uffdb\067\uffdb" +
    "\071\uffdb\001\002\000\036\007\035\010\040\011\037\022" +
    "\043\023\014\031\041\032\020\050\013\051\036\052\030" +
    "\065\033\066\044\067\024\071\017\001\002\000\004\052" +
    "\246\001\002\000\004\041\247\001\002\000\030\007\uffda" +
    "\010\uffda\011\uffda\020\uffda\022\uffda\023\uffda\035\uffda\065" +
    "\uffda\066\uffda\067\uffda\071\uffda\001\002\000\026\007\035" +
    "\010\040\011\037\022\043\023\014\035\251\065\070\066" +
    "\044\067\063\071\017\001\002\000\030\007\uffc6\010\uffc6" +
    "\011\uffc6\020\uffc6\022\uffc6\023\uffc6\035\uffc6\065\uffc6\066" +
    "\uffc6\067\uffc6\071\uffc6\001\002\000\004\041\253\001\002" +
    "\000\004\044\254\001\002\000\004\052\255\001\002\000" +
    "\004\041\256\001\002\000\004\034\257\001\002\000\036" +
    "\007\035\010\040\011\037\022\043\023\014\031\041\032" +
    "\020\050\013\051\036\052\030\065\033\066\044\067\024" +
    "\071\017\001\002\000\026\007\035\010\040\011\037\022" +
    "\043\023\014\035\261\065\070\066\044\067\063\071\017" +
    "\001\002\000\030\007\uffc5\010\uffc5\011\uffc5\020\uffc5\022" +
    "\uffc5\023\uffc5\035\uffc5\065\uffc5\066\uffc5\067\uffc5\071\uffc5" +
    "\001\002\000\006\052\206\057\205\001\002\000\004\033" +
    "\264\001\002\000\004\034\265\001\002\000\036\007\035" +
    "\010\040\011\037\022\043\023\014\031\041\032\020\050" +
    "\013\051\036\052\030\065\033\066\044\067\024\071\017" +
    "\001\002\000\026\007\035\010\040\011\037\022\043\023" +
    "\014\035\267\065\070\066\044\067\063\071\017\001\002" +
    "\000\032\007\uffc3\010\uffc3\011\uffc3\012\270\020\uffc3\022" +
    "\uffc3\023\uffc3\035\uffc3\065\uffc3\066\uffc3\067\uffc3\071\uffc3" +
    "\001\002\000\004\034\271\001\002\000\036\007\035\010" +
    "\040\011\037\022\043\023\014\031\041\032\020\050\013" +
    "\051\036\052\030\065\033\066\044\067\024\071\017\001" +
    "\002\000\026\007\035\010\040\011\037\022\043\023\014" +
    "\035\273\065\070\066\044\067\063\071\017\001\002\000" +
    "\030\007\uffbc\010\uffbc\011\uffbc\020\uffbc\022\uffbc\023\uffbc" +
    "\035\uffbc\065\uffbc\066\uffbc\067\uffbc\071\uffbc\001\002\000" +
    "\014\032\020\051\036\052\030\065\277\067\276\001\002" +
    "\000\004\041\300\001\002\000\006\033\uffac\041\uffac\001" +
    "\002\000\006\033\uffad\041\uffad\001\002\000\014\032\020" +
    "\051\036\052\030\065\277\067\276\001\002\000\004\033" +
    "\302\001\002\000\034\007\uffaf\010\uffaf\011\uffaf\020\uffaf" +
    "\022\uffaf\023\uffaf\033\uffaf\035\uffaf\041\uffaf\065\uffaf\066" +
    "\uffaf\067\uffaf\071\uffaf\001\002\000\004\052\304\001\002" +
    "\000\004\041\305\001\002\000\032\007\uffd9\010\uffd9\011" +
    "\uffd9\020\uffd9\022\uffd9\023\uffd9\034\306\035\uffd9\065\uffd9" +
    "\066\uffd9\067\uffd9\071\uffd9\001\002\000\036\007\035\010" +
    "\040\011\037\022\043\023\014\031\041\032\020\050\013" +
    "\051\036\052\030\065\033\066\044\067\024\071\017\001" +
    "\002\000\026\007\035\010\040\011\037\022\043\023\014" +
    "\035\310\065\070\066\044\067\063\071\017\001\002\000" +
    "\030\007\uffc4\010\uffc4\011\uffc4\020\uffc4\022\uffc4\023\uffc4" +
    "\035\uffc4\065\uffc4\066\uffc4\067\uffc4\071\uffc4\001\002\000" +
    "\004\002\000\001\002\000\002\001\002\000\032\007\uffb2" +
    "\010\uffb2\011\uffb2\020\uffb2\022\uffb2\023\uffb2\035\uffb2\042" +
    "\uffb2\065\uffb2\066\uffb2\067\uffb2\071\uffb2\001\002\000\002" +
    "\001\002\000\032\007\uffb4\010\uffb4\011\uffb4\020\uffb4\022" +
    "\uffb4\023\uffb4\035\uffb4\044\uffb4\065\uffb4\066\uffb4\067\uffb4" +
    "\071\uffb4\001\002\000\004\033\317\001\002\000\034\007" +
    "\uffae\010\uffae\011\uffae\020\uffae\022\uffae\023\uffae\033\uffae" +
    "\035\uffae\041\uffae\065\uffae\066\uffae\067\uffae\071\uffae\001" +
    "\002\000\006\046\321\055\322\001\002\000\004\004\337" +
    "\001\002\000\004\004\323\001\002\000\006\004\324\052" +
    "\325\001\002\000\004\041\333\001\002\000\004\004\326" +
    "\001\002\000\004\041\327\001\002\000\032\007\uffdd\010" +
    "\uffdd\011\uffdd\020\uffdd\022\uffdd\023\uffdd\034\330\035\uffdd" +
    "\065\uffdd\066\uffdd\067\uffdd\071\uffdd\001\002\000\036\007" +
    "\035\010\040\011\037\022\043\023\014\031\041\032\020" +
    "\050\013\051\036\052\030\065\033\066\044\067\024\071" +
    "\017\001\002\000\026\007\035\010\040\011\037\022\043" +
    "\023\014\035\332\065\070\066\044\067\063\071\017\001" +
    "\002\000\030\007\uffc8\010\uffc8\011\uffc8\020\uffc8\022\uffc8" +
    "\023\uffc8\035\uffc8\065\uffc8\066\uffc8\067\uffc8\071\uffc8\001" +
    "\002\000\032\007\uffdf\010\uffdf\011\uffdf\020\uffdf\022\uffdf" +
    "\023\uffdf\034\334\035\uffdf\065\uffdf\066\uffdf\067\uffdf\071" +
    "\uffdf\001\002\000\036\007\035\010\040\011\037\022\043" +
    "\023\014\031\041\032\020\050\013\051\036\052\030\065" +
    "\033\066\044\067\024\071\017\001\002\000\026\007\035" +
    "\010\040\011\037\022\043\023\014\035\336\065\070\066" +
    "\044\067\063\071\017\001\002\000\030\007\uffca\010\uffca" +
    "\011\uffca\020\uffca\022\uffca\023\uffca\035\uffca\065\uffca\066" +
    "\uffca\067\uffca\071\uffca\001\002\000\006\004\340\052\341" +
    "\001\002\000\004\041\347\001\002\000\004\004\342\001" +
    "\002\000\004\041\343\001\002\000\032\007\uffdc\010\uffdc" +
    "\011\uffdc\020\uffdc\022\uffdc\023\uffdc\034\344\035\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\071\uffdc\001\002\000\036\007\035" +
    "\010\040\011\037\022\043\023\014\031\041\032\020\050" +
    "\013\051\036\052\030\065\033\066\044\067\024\071\017" +
    "\001\002\000\026\007\035\010\040\011\037\022\043\023" +
    "\014\035\346\065\070\066\044\067\063\071\017\001\002" +
    "\000\030\007\uffc7\010\uffc7\011\uffc7\020\uffc7\022\uffc7\023" +
    "\uffc7\035\uffc7\065\uffc7\066\uffc7\067\uffc7\071\uffc7\001\002" +
    "\000\032\007\uffde\010\uffde\011\uffde\020\uffde\022\uffde\023" +
    "\uffde\034\350\035\uffde\065\uffde\066\uffde\067\uffde\071\uffde" +
    "\001\002\000\036\007\035\010\040\011\037\022\043\023" +
    "\014\031\041\032\020\050\013\051\036\052\030\065\033" +
    "\066\044\067\024\071\017\001\002\000\026\007\035\010" +
    "\040\011\037\022\043\023\014\035\352\065\070\066\044" +
    "\067\063\071\017\001\002\000\030\007\uffc9\010\uffc9\011" +
    "\uffc9\020\uffc9\022\uffc9\023\uffc9\035\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\071\uffc9\001\002\000\002\001\002\000\032\007" +
    "\uffb1\010\uffb1\011\uffb1\020\uffb1\022\uffb1\023\uffb1\035\uffb1" +
    "\043\uffb1\065\uffb1\066\uffb1\067\uffb1\071\uffb1\001\002\000" +
    "\006\052\357\065\360\001\002\000\004\033\u0104\001\002" +
    "\000\004\046\376\001\002\000\004\052\361\001\002\000" +
    "\004\046\362\001\002\000\004\060\363\001\002\000\004" +
    "\041\364\001\002\000\006\052\206\057\205\001\002\000" +
    "\004\041\366\001\002\000\006\052\371\056\370\001\002" +
    "\000\004\033\uffb9\001\002\000\004\052\375\001\002\000" +
    "\006\055\373\056\372\001\002\000\004\033\uffb6\001\002" +
    "\000\004\060\374\001\002\000\004\033\uffb7\001\002\000" +
    "\004\033\uffb5\001\002\000\004\060\377\001\002\000\004" +
    "\041\u0100\001\002\000\006\052\206\057\205\001\002\000" +
    "\004\041\u0102\001\002\000\006\052\371\056\370\001\002" +
    "\000\004\033\uffb8\001\002\000\004\034\u0105\001\002\000" +
    "\036\007\035\010\040\011\037\022\043\023\014\031\041" +
    "\032\020\050\013\051\036\052\030\065\033\066\044\067" +
    "\024\071\017\001\002\000\026\007\035\010\040\011\037" +
    "\022\043\023\014\035\u0107\065\070\066\044\067\063\071" +
    "\017\001\002\000\030\007\uffba\010\uffba\011\uffba\020\uffba" +
    "\022\uffba\023\uffba\035\uffba\065\uffba\066\uffba\067\uffba\071" +
    "\uffba\001\002\000\004\050\013\001\002\000\004\033\u010a" +
    "\001\002\000\032\007\uffb0\010\uffb0\011\uffb0\020\uffb0\022" +
    "\uffb0\023\uffb0\033\uffb0\035\uffb0\065\uffb0\066\uffb0\067\uffb0" +
    "\071\uffb0\001\002\000\004\002\001\001\002\000\004\033" +
    "\u010d\001\002\000\004\034\u010e\001\002\000\036\007\035" +
    "\010\040\011\037\022\043\023\014\031\041\032\020\050" +
    "\013\051\036\052\030\065\033\066\044\067\024\071\017" +
    "\001\002\000\026\007\035\010\040\011\037\022\043\023" +
    "\014\035\u0110\065\070\066\044\067\063\071\017\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\025\004\024\006" +
    "\031\007\033\010\020\011\041\014\030\015\021\016\044" +
    "\017\014\020\022\021\015\022\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\315\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\064\006\070\007\066\010" +
    "\061\011\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\060\004\024\006\031\007\033" +
    "\010\020\011\041\014\030\015\021\016\044\017\014\020" +
    "\022\021\015\022\026\001\001\000\014\004\064\006\070" +
    "\007\066\010\061\011\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\103\004\024\006\031\007\033\010\020\011\041\014" +
    "\030\015\021\016\044\017\014\020\022\021\015\022\026" +
    "\001\001\000\014\004\064\006\070\007\066\010\061\011" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\110\004\024\006\031\007\033\010" +
    "\020\011\041\014\030\015\021\016\044\017\014\020\022" +
    "\021\015\022\026\001\001\000\014\004\064\006\070\007" +
    "\066\010\061\011\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\114\004\024\006\031\007\033\010" +
    "\020\011\041\014\030\015\021\016\044\017\014\020\022" +
    "\021\015\022\026\001\001\000\014\004\064\006\070\007" +
    "\066\010\061\011\063\001\001\000\002\001\001\000\034" +
    "\003\117\004\024\006\031\007\033\010\020\011\041\014" +
    "\030\015\021\016\044\017\014\020\022\021\015\022\026" +
    "\001\001\000\014\004\064\006\070\007\066\010\061\011" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\003\124\004\024\006\031\007\033\010" +
    "\020\011\041\014\030\015\021\016\044\017\014\020\022" +
    "\021\015\022\026\001\001\000\014\004\064\006\070\007" +
    "\066\010\061\011\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\137\004\024\006\031\007" +
    "\033\010\020\011\041\014\030\015\021\016\044\017\014" +
    "\020\022\021\015\022\026\001\001\000\014\004\064\006" +
    "\070\007\066\010\061\011\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\144\004" +
    "\024\006\031\007\033\010\020\011\041\014\030\015\021" +
    "\016\044\017\014\020\022\021\015\022\026\001\001\000" +
    "\014\004\064\006\070\007\066\010\061\011\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\150\004" +
    "\024\006\031\007\033\010\020\011\041\014\030\015\021" +
    "\016\044\017\014\020\022\021\015\022\026\001\001\000" +
    "\014\004\064\006\070\007\066\010\061\011\063\001\001" +
    "\000\002\001\001\000\034\003\153\004\024\006\031\007" +
    "\033\010\020\011\041\014\030\015\021\016\044\017\014" +
    "\020\022\021\015\022\026\001\001\000\014\004\064\006" +
    "\070\007\066\010\061\011\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\160\004" +
    "\024\006\031\007\033\010\020\011\041\014\030\015\021" +
    "\016\044\017\014\020\022\021\015\022\026\001\001\000" +
    "\014\004\064\006\070\007\066\010\061\011\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\164\004" +
    "\024\006\031\007\033\010\020\011\041\014\030\015\021" +
    "\016\044\017\014\020\022\021\015\022\026\001\001\000" +
    "\014\004\064\006\070\007\066\010\061\011\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\174\004\024\006\031\007\033\010\020\011\041\014" +
    "\030\015\021\016\044\017\014\020\022\021\015\022\026" +
    "\001\001\000\014\004\064\006\070\007\066\010\061\011" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\200\004\024\006\031\007\033\010\020\011\041\014" +
    "\030\015\021\016\044\017\014\020\022\021\015\022\026" +
    "\001\001\000\014\004\064\006\070\007\066\010\061\011" +
    "\063\001\001\000\002\001\001\000\004\012\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\220" +
    "\004\024\006\031\007\033\010\020\011\041\014\030\015" +
    "\021\016\044\017\014\020\022\021\015\022\026\001\001" +
    "\000\014\004\064\006\070\007\066\010\061\011\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\231\004\024\006\031\007\033" +
    "\010\020\011\041\014\030\015\021\016\044\017\014\020" +
    "\022\021\015\022\026\001\001\000\014\004\064\006\070" +
    "\007\066\010\061\011\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\247\004\024\006\031" +
    "\007\033\010\020\011\041\014\030\015\021\016\044\017" +
    "\014\020\022\021\015\022\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\064\006" +
    "\070\007\066\010\061\011\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\257\004\024" +
    "\006\031\007\033\010\020\011\041\014\030\015\021\016" +
    "\044\017\014\020\022\021\015\022\026\001\001\000\014" +
    "\004\064\006\070\007\066\010\061\011\063\001\001\000" +
    "\002\001\001\000\004\012\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\265\004\024\006\031\007" +
    "\033\010\020\011\041\014\030\015\021\016\044\017\014" +
    "\020\022\021\015\022\026\001\001\000\014\004\064\006" +
    "\070\007\066\010\061\011\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\271\004\024\006\031\007" +
    "\033\010\020\011\041\014\030\015\021\016\044\017\014" +
    "\020\022\021\015\022\026\001\001\000\014\004\064\006" +
    "\070\007\066\010\061\011\063\001\001\000\002\001\001" +
    "\000\004\022\274\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\300\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\306\004\024\006\031" +
    "\007\033\010\020\011\041\014\030\015\021\016\044\017" +
    "\014\020\022\021\015\022\026\001\001\000\014\004\064" +
    "\006\070\007\066\010\061\011\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\312\001\001\000\002" +
    "\001\001\000\004\015\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\330\004\024\006\031\007\033\010\020\011" +
    "\041\014\030\015\021\016\044\017\014\020\022\021\015" +
    "\022\026\001\001\000\014\004\064\006\070\007\066\010" +
    "\061\011\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\334\004\024\006\031\007\033\010\020\011" +
    "\041\014\030\015\021\016\044\017\014\020\022\021\015" +
    "\022\026\001\001\000\014\004\064\006\070\007\066\010" +
    "\061\011\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\344\004\024\006\031\007\033" +
    "\010\020\011\041\014\030\015\021\016\044\017\014\020" +
    "\022\021\015\022\026\001\001\000\014\004\064\006\070" +
    "\007\066\010\061\011\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\350\004\024\006\031\007\033" +
    "\010\020\011\041\014\030\015\021\016\044\017\014\020" +
    "\022\021\015\022\026\001\001\000\014\004\064\006\070" +
    "\007\066\010\061\011\063\001\001\000\002\001\001\000" +
    "\004\017\353\001\001\000\002\001\001\000\004\013\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\364\001\001\000\002\001\001\000\004\005" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0100\001\001\000\002\001\001\000\004\005" +
    "\u0102\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\u0105\004\024\006\031\007\033\010\020\011\041\014" +
    "\030\015\021\016\044\017\014\020\022\021\015\022\026" +
    "\001\001\000\014\004\064\006\070\007\066\010\061\011" +
    "\063\001\001\000\002\001\001\000\004\021\u0108\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\u010e\004\024" +
    "\006\031\007\033\010\020\011\041\014\030\015\021\016" +
    "\044\017\014\020\022\021\015\022\026\001\001\000\014" +
    "\004\064\006\070\007\066\010\061\011\063\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoC$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoC$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoC$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoC$actions {
  private final SintacticoC parser;

  /** Constructor */
  CUP$SintacticoC$actions(SintacticoC parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoC$do_action(
    int                        CUP$SintacticoC$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoC$parser,
    java.util.Stack            CUP$SintacticoC$stack,
    int                        CUP$SintacticoC$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoC$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoC$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SWITCH ::= Switch Parentesis_Izq Identificador Parentesis_Der Llave_Izq Case Identificador P_Coma SENTENCIA Break P_Coma Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SWITCH",10, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // POTENCIA ::= Identificador 
            {
              String RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("POTENCIA",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // POTENCIA ::= Float 
            {
              String RESULT =null;
		int deleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int deright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String de = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT=de;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("POTENCIA",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // POTENCIA ::= Int 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		RESULT=num;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("POTENCIA",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // POTENCIA ::= Parentesis_Izq POTENCIA Parentesis_Der 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		 RESULT=num;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("POTENCIA",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // POTENCIA ::= Potencia Parentesis_Izq POTENCIA P_Coma POTENCIA Parentesis_Der 
            {
              String RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("POTENCIA",16, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // RAIZ ::= Raiz Parentesis_Izq RAIZ Parentesis_Der 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		 RESULT=num;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("RAIZ",15, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // MULTIPLICACION ::= MULTIPLICACION Op_Multiplicacion MULTIPLICACION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1*num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("MULTIPLICACION",13, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DIVISION ::= DIVISION Op_Division DIVISION 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1/num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DIVISION",14, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RESTA ::= RESTA Op_Resta RESTA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1-num2;
    RESULT= (respuesta)+"";
    
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("RESTA",12, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SUMA ::= SUMA Op_Suma SUMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.peek()).value;
		 
    int num1 = Integer.parseInt(a);
    int num2= Integer.parseInt(b);
    int respuesta = num1-num2;
    RESULT= (respuesta)+"";

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SUMA",11, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARACION_FOR ::= Op_Incremento Identificador 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARACION_FOR ::= Identificador Op_Incremento 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARACION_FOR ::= Identificador Op_Atribucion Numero 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SENTENCIA_FOR ::= Identificador Op_Igual Numero P_Coma SENTENCIA_BOOLEANA P_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SENTENCIA_FOR ::= Int Identificador Op_Igual Numero P_Coma SENTENCIA_BOOLEANA P_Coma DECLARACION_FOR 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",9, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR ::= For Parentesis_Izq SENTENCIA_FOR Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("FOR",7, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WHILE ::= While Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF_ELSE ::= If Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der Else Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("IF_ELSE",5, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-10)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Comillas Identificador Comillas 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Identificador 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Numero 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_BOOLEANA ::= Identificador Op_Relacional Op_Booleano 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENTENCIA_BOOLEANA ::= Op_Booleano 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= If Parentesis_Izq SENTENCIA_BOOLEANA Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION ::= Cin Op_Relacional Identificador P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION ::= Cout Op_Relacional Comillas Texto Identificador P_Coma Op_Suma Identificador P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-11)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION ::= Cout Op_Relacional Comillas Identificador Comillas P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION ::= Char Identificador Op_Igual Comillas Identificador Comillas P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION ::= Char Identificador Op_Atribucion Comillas Identificador Comillas P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION ::= Char Identificador Op_Igual Comillas Comillas P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION ::= Char Identificador Op_Atribucion Comillas Comillas P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION ::= String Identificador Op_Igual Comillas Identificador Comillas P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION ::= String Identificador Op_Atribucion Comillas Identificador Comillas P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-9)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION ::= String Identificador Op_Igual Comillas Comillas P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION ::= String Identificador Op_Atribucion Comillas Comillas P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION ::= Float Op_Incremento Identificador P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION ::= Float Identificador Op_Incremento P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION ::= Float Identificador Op_Igual Real P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION ::= Float Identificador Op_Atribucion Real P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION ::= Float Identificador P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION ::= Int Op_Incremento Identificador P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION ::= Int Identificador Op_Incremento P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION ::= Int Identificador Op_Igual Numero P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION ::= Int Identificador Op_Atribucion Numero P_Coma P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION ::= Int Identificador P_Coma Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION ::= Cin Op_Relacional Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= Cout Op_Relacional Comillas Identificador Comillas P_Coma Op_Suma Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-8)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= Cout Op_Relacional Comillas Identificador Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION ::= Char Identificador Op_Igual Comillas Identificador Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= Char Identificador Op_Atribucion Comillas Identificador Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= Char Identificador Op_Igual Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION ::= Char Identificador Op_Atribucion Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= String Identificador Op_Igual Comillas Identificador Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= String Identificador Op_Atribucion Comillas Identificador Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= String Identificador Op_Igual Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= String Identificador Op_Atribucion Comillas Comillas P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Float Op_Incremento Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Float Identificador Op_Incremento P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Float Identificador Op_Igual Real P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Float Identificador Op_Atribucion Real P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Float Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Int Op_Incremento Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador Op_Incremento P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador Op_Igual Numero P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Int Identificador Op_Atribucion Numero P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador P_Coma 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= POTENCIA 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= RAIZ 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= RESTA 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= SUMA 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= DIVISION 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA FOR 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA WHILE 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA IF_ELSE 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA IF 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Main Parentesis_Izq Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int Main Parentesis_Izq Parentesis_Der Llave_Izq SENTENCIA Llave_Der 
            {
              Object RESULT =null;

              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          return CUP$SintacticoC$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoC$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.elementAt(CUP$SintacticoC$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoC$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoC$parser.done_parsing();
          return CUP$SintacticoC$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

